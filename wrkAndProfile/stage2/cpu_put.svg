<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1094" onload="init(evt)" viewBox="0 0 1200 1094" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1077"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1077"> </text>
<g id="frames">
<g>
<title>all (3,530 samples, 100.00%)</title><rect x="10.0" y="1043.0" width="1180.0" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="13.0" y="1054.0">all</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/ld-2.31.so (1 samples, 0.03%)</title><rect x="10.0" y="1027.0" width="0.3" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="13.0" y="1038.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.14%)</title><rect x="10.3" y="1027.0" width="1.7" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="13.3" y="1038.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/ld-2.31.so (1 samples, 0.03%)</title><rect x="10.3" y="1011.0" width="0.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="13.3" y="1022.0"></text>
</g>
<g>
<title>pthread_cond_timedwait@@GLIBC_2.3.2 (4 samples, 0.11%)</title><rect x="10.7" y="1011.0" width="1.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="13.7" y="1022.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (3 samples, 0.08%)</title><rect x="11.0" y="995.0" width="1.0" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="14.0" y="1006.0"></text>
</g>
<g>
<title>do_syscall_64 (3 samples, 0.08%)</title><rect x="11.0" y="979.0" width="1.0" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="14.0" y="990.0"></text>
</g>
<g>
<title>__x64_sys_futex (3 samples, 0.08%)</title><rect x="11.0" y="963.0" width="1.0" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="14.0" y="974.0"></text>
</g>
<g>
<title>do_futex (3 samples, 0.08%)</title><rect x="11.0" y="947.0" width="1.0" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="14.0" y="958.0"></text>
</g>
<g>
<title>_raw_spin_lock (1 samples, 0.03%)</title><rect x="11.0" y="931.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="14.0" y="942.0"></text>
</g>
<g>
<title>futex_wait (2 samples, 0.06%)</title><rect x="11.3" y="931.0" width="0.7" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="14.3" y="942.0"></text>
</g>
<g>
<title>futex_wait_queue_me (2 samples, 0.06%)</title><rect x="11.3" y="915.0" width="0.7" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="14.3" y="926.0"></text>
</g>
<g>
<title>schedule (2 samples, 0.06%)</title><rect x="11.3" y="899.0" width="0.7" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="14.3" y="910.0"></text>
</g>
<g>
<title>__schedule (2 samples, 0.06%)</title><rect x="11.3" y="883.0" width="0.7" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="14.3" y="894.0"></text>
</g>
<g>
<title>finish_task_switch (2 samples, 0.06%)</title><rect x="11.3" y="867.0" width="0.7" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="14.3" y="878.0"></text>
</g>
<g>
<title>java/lang/Thread.run (67 samples, 1.90%)</title><rect x="12.0" y="1027.0" width="22.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="15.0" y="1038.0">j..</text>
</g>
<g>
<title>com/sun/jmx/remote/internal/ServerCommunicatorAdmin$Timeout.run (2 samples, 0.06%)</title><rect x="12.0" y="1011.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="15.0" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (65 samples, 1.84%)</title><rect x="12.7" y="1011.0" width="21.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="15.7" y="1022.0">j..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (65 samples, 1.84%)</title><rect x="12.7" y="995.0" width="21.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="15.7" y="1006.0">j..</text>
</g>
<g>
<title>ru/mail/polis/dao/valaubr/LsmDAO$$Lambda$13/863125040.run (37 samples, 1.05%)</title><rect x="12.7" y="979.0" width="12.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="15.7" y="990.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/valaubr/LsmDAO.flushingHelper (37 samples, 1.05%)</title><rect x="12.7" y="963.0" width="12.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="15.7" y="974.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/valaubr/LsmDAO.flush (37 samples, 1.05%)</title><rect x="12.7" y="947.0" width="12.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="15.7" y="958.0"></text>
</g>
<g>
<title>java/io/File.createNewFile (1 samples, 0.03%)</title><rect x="12.7" y="931.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="15.7" y="942.0"></text>
</g>
<g>
<title>java/io/File.isInvalid (1 samples, 0.03%)</title><rect x="12.7" y="915.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="15.7" y="926.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.03%)</title><rect x="12.7" y="899.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="15.7" y="910.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.03%)</title><rect x="12.7" y="883.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="15.7" y="894.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/valaubr/SSTable.serialize (36 samples, 1.02%)</title><rect x="13.0" y="931.0" width="12.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="16.0" y="942.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1 samples, 0.03%)</title><rect x="13.0" y="915.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="16.0" y="926.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="13.0" y="899.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="16.0" y="910.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.03%)</title><rect x="13.0" y="883.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="16.0" y="894.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.03%)</title><rect x="13.0" y="867.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="16.0" y="878.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="13.0" y="851.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="16.0" y="862.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="13.0" y="835.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="16.0" y="846.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="13.0" y="819.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="16.0" y="830.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (1 samples, 0.03%)</title><rect x="13.0" y="803.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="16.0" y="814.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.write (35 samples, 0.99%)</title><rect x="13.3" y="915.0" width="11.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="16.3" y="926.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (34 samples, 0.96%)</title><rect x="13.7" y="899.0" width="11.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="16.7" y="910.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.03%)</title><rect x="13.7" y="883.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="16.7" y="894.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (2 samples, 0.06%)</title><rect x="14.0" y="883.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="17.0" y="894.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (1 samples, 0.03%)</title><rect x="14.0" y="867.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="17.0" y="878.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (1 samples, 0.03%)</title><rect x="14.3" y="867.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="17.3" y="878.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.put (1 samples, 0.03%)</title><rect x="14.3" y="851.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="17.3" y="862.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (1 samples, 0.03%)</title><rect x="14.3" y="835.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="17.3" y="846.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.ix (1 samples, 0.03%)</title><rect x="14.3" y="819.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="17.3" y="830.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (28 samples, 0.79%)</title><rect x="14.7" y="883.0" width="9.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="17.7" y="894.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.03%)</title><rect x="14.7" y="867.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="17.7" y="878.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write (27 samples, 0.76%)</title><rect x="15.0" y="867.0" width="9.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="18.0" y="878.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (27 samples, 0.76%)</title><rect x="15.0" y="851.0" width="9.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="18.0" y="862.0"></text>
</g>
<g>
<title>__libc_write (26 samples, 0.74%)</title><rect x="15.3" y="835.0" width="8.7" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="18.3" y="846.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (20 samples, 0.57%)</title><rect x="17.4" y="819.0" width="6.6" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="20.4" y="830.0"></text>
</g>
<g>
<title>do_syscall_64 (20 samples, 0.57%)</title><rect x="17.4" y="803.0" width="6.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="20.4" y="814.0"></text>
</g>
<g>
<title>__x64_sys_write (17 samples, 0.48%)</title><rect x="18.4" y="787.0" width="5.6" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="21.4" y="798.0"></text>
</g>
<g>
<title>ksys_write (17 samples, 0.48%)</title><rect x="18.4" y="771.0" width="5.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="21.4" y="782.0"></text>
</g>
<g>
<title>__fdget_pos (3 samples, 0.08%)</title><rect x="18.4" y="755.0" width="1.0" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="21.4" y="766.0"></text>
</g>
<g>
<title>__fget_light (1 samples, 0.03%)</title><rect x="18.7" y="739.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="21.7" y="750.0"></text>
</g>
<g>
<title>__fget (1 samples, 0.03%)</title><rect x="18.7" y="723.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="21.7" y="734.0"></text>
</g>
<g>
<title>_cond_resched (1 samples, 0.03%)</title><rect x="19.0" y="739.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="22.0" y="750.0"></text>
</g>
<g>
<title>vfs_write (14 samples, 0.40%)</title><rect x="19.4" y="755.0" width="4.6" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="22.4" y="766.0"></text>
</g>
<g>
<title>__fsnotify_parent (8 samples, 0.23%)</title><rect x="19.4" y="739.0" width="2.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="22.4" y="750.0"></text>
</g>
<g>
<title>fsnotify (6 samples, 0.17%)</title><rect x="19.4" y="723.0" width="2.0" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="22.4" y="734.0"></text>
</g>
<g>
<title>fsnotify_destroy_event (1 samples, 0.03%)</title><rect x="19.7" y="707.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="22.7" y="718.0"></text>
</g>
<g>
<title>inotify_handle_event (3 samples, 0.08%)</title><rect x="20.0" y="707.0" width="1.0" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="23.0" y="718.0"></text>
</g>
<g>
<title>__kmalloc (1 samples, 0.03%)</title><rect x="20.0" y="691.0" width="0.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="23.0" y="702.0"></text>
</g>
<g>
<title>fsnotify_add_event (1 samples, 0.03%)</title><rect x="20.4" y="691.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="23.4" y="702.0"></text>
</g>
<g>
<title>fsnotify_destroy_event (1 samples, 0.03%)</title><rect x="20.7" y="691.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="23.7" y="702.0"></text>
</g>
<g>
<title>fsnotify_destroy_event.part.0 (1 samples, 0.03%)</title><rect x="20.7" y="675.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="23.7" y="686.0"></text>
</g>
<g>
<title>inotify_free_event (1 samples, 0.03%)</title><rect x="20.7" y="659.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="23.7" y="670.0"></text>
</g>
<g>
<title>kfree (1 samples, 0.03%)</title><rect x="20.7" y="643.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="23.7" y="654.0"></text>
</g>
<g>
<title>strcpy (1 samples, 0.03%)</title><rect x="21.0" y="707.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="24.0" y="718.0"></text>
</g>
<g>
<title>inotify_handle_event (1 samples, 0.03%)</title><rect x="21.4" y="723.0" width="0.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="24.4" y="734.0"></text>
</g>
<g>
<title>lockref_get_not_zero (1 samples, 0.03%)</title><rect x="21.7" y="723.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="24.7" y="734.0"></text>
</g>
<g>
<title>__vfs_write (6 samples, 0.17%)</title><rect x="22.0" y="739.0" width="2.0" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="25.0" y="750.0"></text>
</g>
<g>
<title>new_sync_write (6 samples, 0.17%)</title><rect x="22.0" y="723.0" width="2.0" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="25.0" y="734.0"></text>
</g>
<g>
<title>generic_file_write_iter (6 samples, 0.17%)</title><rect x="22.0" y="707.0" width="2.0" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="25.0" y="718.0"></text>
</g>
<g>
<title>__generic_file_write_iter (5 samples, 0.14%)</title><rect x="22.0" y="691.0" width="1.7" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="25.0" y="702.0"></text>
</g>
<g>
<title>file_update_time (1 samples, 0.03%)</title><rect x="22.0" y="675.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="25.0" y="686.0"></text>
</g>
<g>
<title>current_time (1 samples, 0.03%)</title><rect x="22.0" y="659.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="25.0" y="670.0"></text>
</g>
<g>
<title>timestamp_truncate (1 samples, 0.03%)</title><rect x="22.0" y="643.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="25.0" y="654.0"></text>
</g>
<g>
<title>generic_perform_write (4 samples, 0.11%)</title><rect x="22.4" y="675.0" width="1.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="25.4" y="686.0"></text>
</g>
<g>
<title>balance_dirty_pages_ratelimited (1 samples, 0.03%)</title><rect x="22.4" y="659.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="25.4" y="670.0"></text>
</g>
<g>
<title>shmem_write_begin (2 samples, 0.06%)</title><rect x="22.7" y="659.0" width="0.7" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="25.7" y="670.0"></text>
</g>
<g>
<title>shmem_getpage_gfp (2 samples, 0.06%)</title><rect x="22.7" y="643.0" width="0.7" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="25.7" y="654.0"></text>
</g>
<g>
<title>find_lock_entry (1 samples, 0.03%)</title><rect x="23.0" y="627.0" width="0.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="26.0" y="638.0"></text>
</g>
<g>
<title>find_get_entry (1 samples, 0.03%)</title><rect x="23.0" y="611.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="26.0" y="622.0"></text>
</g>
<g>
<title>shmem_write_end (1 samples, 0.03%)</title><rect x="23.4" y="659.0" width="0.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="26.4" y="670.0"></text>
</g>
<g>
<title>down_write (1 samples, 0.03%)</title><rect x="23.7" y="691.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="26.7" y="702.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (1 samples, 0.03%)</title><rect x="24.0" y="883.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="27.0" y="894.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.03%)</title><rect x="24.0" y="867.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="27.0" y="878.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.03%)</title><rect x="24.0" y="851.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="27.0" y="862.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.offerFirstTemporaryDirectBuffer (2 samples, 0.06%)</title><rect x="24.4" y="883.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="27.4" y="894.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.offerFirst (2 samples, 0.06%)</title><rect x="24.4" y="867.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="27.4" y="878.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler.run (28 samples, 0.79%)</title><rect x="25.0" y="979.0" width="9.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="28.0" y="990.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (28 samples, 0.79%)</title><rect x="25.0" y="963.0" width="9.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="28.0" y="974.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler$$Lambda$92/689455389.run (28 samples, 0.79%)</title><rect x="25.0" y="947.0" width="9.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="28.0" y="958.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler.lambda$run$0 (28 samples, 0.79%)</title><rect x="25.0" y="931.0" width="9.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="28.0" y="942.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler.run0 (28 samples, 0.79%)</title><rect x="25.0" y="915.0" width="9.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="28.0" y="926.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport.handleMessages (28 samples, 0.79%)</title><rect x="25.0" y="899.0" width="9.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="28.0" y="910.0"></text>
</g>
<g>
<title>java/io/FilterInputStream.read (2 samples, 0.06%)</title><rect x="25.0" y="883.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="28.0" y="894.0"></text>
</g>
<g>
<title>java/io/BufferedInputStream.read (2 samples, 0.06%)</title><rect x="25.0" y="867.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="28.0" y="878.0"></text>
</g>
<g>
<title>java/io/BufferedInputStream.fill (2 samples, 0.06%)</title><rect x="25.0" y="851.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="28.0" y="862.0"></text>
</g>
<g>
<title>java/net/SocketInputStream.read (2 samples, 0.06%)</title><rect x="25.0" y="835.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="28.0" y="846.0"></text>
</g>
<g>
<title>java/net/SocketInputStream.read (2 samples, 0.06%)</title><rect x="25.0" y="819.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="28.0" y="830.0"></text>
</g>
<g>
<title>java/net/SocketInputStream.socketRead (2 samples, 0.06%)</title><rect x="25.0" y="803.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="28.0" y="814.0"></text>
</g>
<g>
<title>java/net/SocketInputStream.socketRead0 (2 samples, 0.06%)</title><rect x="25.0" y="787.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="28.0" y="798.0"></text>
</g>
<g>
<title>Java_java_net_SocketInputStream_socketRead0 (1 samples, 0.03%)</title><rect x="25.0" y="771.0" width="0.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="28.0" y="782.0"></text>
</g>
<g>
<title>poll (1 samples, 0.03%)</title><rect x="25.0" y="755.0" width="0.4" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="28.0" y="766.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.03%)</title><rect x="25.0" y="739.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="28.0" y="750.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.03%)</title><rect x="25.0" y="723.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="28.0" y="734.0"></text>
</g>
<g>
<title>__x64_sys_poll (1 samples, 0.03%)</title><rect x="25.0" y="707.0" width="0.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="28.0" y="718.0"></text>
</g>
<g>
<title>do_sys_poll (1 samples, 0.03%)</title><rect x="25.0" y="691.0" width="0.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="28.0" y="702.0"></text>
</g>
<g>
<title>NET_NonBlockingRead (1 samples, 0.03%)</title><rect x="25.4" y="771.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="28.4" y="782.0"></text>
</g>
<g>
<title>sun/rmi/transport/Transport.serviceCall (24 samples, 0.68%)</title><rect x="25.7" y="883.0" width="8.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="28.7" y="894.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (22 samples, 0.62%)</title><rect x="25.7" y="867.0" width="7.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="28.7" y="878.0"></text>
</g>
<g>
<title>sun/rmi/transport/Transport$1.run (22 samples, 0.62%)</title><rect x="25.7" y="851.0" width="7.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="28.7" y="862.0"></text>
</g>
<g>
<title>sun/rmi/transport/Transport$1.run (22 samples, 0.62%)</title><rect x="25.7" y="835.0" width="7.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="28.7" y="846.0"></text>
</g>
<g>
<title>sun/rmi/server/UnicastServerRef.dispatch (22 samples, 0.62%)</title><rect x="25.7" y="819.0" width="7.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="28.7" y="830.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (6 samples, 0.17%)</title><rect x="25.7" y="803.0" width="2.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="28.7" y="814.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (6 samples, 0.17%)</title><rect x="25.7" y="787.0" width="2.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="28.7" y="798.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor33.invoke (1 samples, 0.03%)</title><rect x="25.7" y="771.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="28.7" y="782.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.getAttribute (1 samples, 0.03%)</title><rect x="25.7" y="755.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="28.7" y="766.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.doPrivilegedOperation (1 samples, 0.03%)</title><rect x="25.7" y="739.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="28.7" y="750.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl$PrivilegedOperation.run (1 samples, 0.03%)</title><rect x="25.7" y="723.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="28.7" y="734.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.doOperation (1 samples, 0.03%)</title><rect x="25.7" y="707.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="28.7" y="718.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/JmxMBeanServer.getAttribute (1 samples, 0.03%)</title><rect x="25.7" y="691.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="28.7" y="702.0"></text>
</g>
<g>
<title>com/sun/jmx/interceptor/DefaultMBeanServerInterceptor.getAttribute (1 samples, 0.03%)</title><rect x="25.7" y="675.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="28.7" y="686.0"></text>
</g>
<g>
<title>javax/management/StandardMBean.getAttribute (1 samples, 0.03%)</title><rect x="25.7" y="659.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="28.7" y="670.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/MBeanSupport.getAttribute (1 samples, 0.03%)</title><rect x="25.7" y="643.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="28.7" y="654.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/PerInterface.getAttribute (1 samples, 0.03%)</title><rect x="25.7" y="627.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="28.7" y="638.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/MBeanIntrospector.invokeM (1 samples, 0.03%)</title><rect x="25.7" y="611.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="28.7" y="622.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/MXBeanIntrospector.invokeM2 (1 samples, 0.03%)</title><rect x="25.7" y="595.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="28.7" y="606.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/MXBeanIntrospector.invokeM2 (1 samples, 0.03%)</title><rect x="25.7" y="579.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="28.7" y="590.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/ConvertingMethod.invokeWithOpenReturn (1 samples, 0.03%)</title><rect x="25.7" y="563.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="28.7" y="574.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/ConvertingMethod.invokeWithOpenReturn (1 samples, 0.03%)</title><rect x="25.7" y="547.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="28.7" y="558.0"></text>
</g>
<g>
<title>sun/reflect/misc/MethodUtil.invoke (1 samples, 0.03%)</title><rect x="25.7" y="531.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="28.7" y="542.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (1 samples, 0.03%)</title><rect x="25.7" y="515.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="28.7" y="526.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (1 samples, 0.03%)</title><rect x="25.7" y="499.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="28.7" y="510.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor3.invoke (1 samples, 0.03%)</title><rect x="25.7" y="483.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="28.7" y="494.0"></text>
</g>
<g>
<title>sun/reflect/misc/Trampoline.invoke (1 samples, 0.03%)</title><rect x="25.7" y="467.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="28.7" y="478.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (1 samples, 0.03%)</title><rect x="25.7" y="451.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="28.7" y="462.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (1 samples, 0.03%)</title><rect x="25.7" y="435.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="28.7" y="446.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor35.invoke (1 samples, 0.03%)</title><rect x="25.7" y="419.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="28.7" y="430.0"></text>
</g>
<g>
<title>sun/management/GarbageCollectorImpl.getCollectionTime (1 samples, 0.03%)</title><rect x="25.7" y="403.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="28.7" y="414.0"></text>
</g>
<g>
<title>jmm_GetLongAttribute (1 samples, 0.03%)</title><rect x="25.7" y="387.0" width="0.3" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="28.7" y="398.0"></text>
</g>
<g>
<title>get_gc_memory_manager_from_jobject(_jobject*, Thread*) (1 samples, 0.03%)</title><rect x="25.7" y="371.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="28.7" y="382.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor40.invoke (5 samples, 0.14%)</title><rect x="26.0" y="771.0" width="1.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="29.0" y="782.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.invoke (5 samples, 0.14%)</title><rect x="26.0" y="755.0" width="1.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="29.0" y="766.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.doPrivilegedOperation (3 samples, 0.08%)</title><rect x="26.0" y="739.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="29.0" y="750.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl$PrivilegedOperation.run (3 samples, 0.08%)</title><rect x="26.0" y="723.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="29.0" y="734.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.doOperation (3 samples, 0.08%)</title><rect x="26.0" y="707.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="29.0" y="718.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/JmxMBeanServer.invoke (3 samples, 0.08%)</title><rect x="26.0" y="691.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="29.0" y="702.0"></text>
</g>
<g>
<title>com/sun/jmx/interceptor/DefaultMBeanServerInterceptor.invoke (3 samples, 0.08%)</title><rect x="26.0" y="675.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="29.0" y="686.0"></text>
</g>
<g>
<title>javax/management/StandardMBean.invoke (3 samples, 0.08%)</title><rect x="26.0" y="659.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="29.0" y="670.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/MBeanSupport.invoke (3 samples, 0.08%)</title><rect x="26.0" y="643.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="29.0" y="654.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/PerInterface.invoke (3 samples, 0.08%)</title><rect x="26.0" y="627.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="29.0" y="638.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/MBeanIntrospector.invokeM (3 samples, 0.08%)</title><rect x="26.0" y="611.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="29.0" y="622.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/MXBeanIntrospector.invokeM2 (3 samples, 0.08%)</title><rect x="26.0" y="595.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="29.0" y="606.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/MXBeanIntrospector.invokeM2 (3 samples, 0.08%)</title><rect x="26.0" y="579.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="29.0" y="590.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/ConvertingMethod.invokeWithOpenReturn (3 samples, 0.08%)</title><rect x="26.0" y="563.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="29.0" y="574.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/ConvertingMethod.invokeWithOpenReturn (3 samples, 0.08%)</title><rect x="26.0" y="547.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="29.0" y="558.0"></text>
</g>
<g>
<title>sun/reflect/misc/MethodUtil.invoke (3 samples, 0.08%)</title><rect x="26.0" y="531.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="29.0" y="542.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (3 samples, 0.08%)</title><rect x="26.0" y="515.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="29.0" y="526.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (3 samples, 0.08%)</title><rect x="26.0" y="499.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="29.0" y="510.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor3.invoke (3 samples, 0.08%)</title><rect x="26.0" y="483.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="29.0" y="494.0"></text>
</g>
<g>
<title>sun/reflect/misc/Trampoline.invoke (3 samples, 0.08%)</title><rect x="26.0" y="467.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="29.0" y="478.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (3 samples, 0.08%)</title><rect x="26.0" y="451.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="29.0" y="462.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (3 samples, 0.08%)</title><rect x="26.0" y="435.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="29.0" y="446.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor45.invoke (3 samples, 0.08%)</title><rect x="26.0" y="419.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="29.0" y="430.0"></text>
</g>
<g>
<title>sun/management/ThreadImpl.getThreadInfo (3 samples, 0.08%)</title><rect x="26.0" y="403.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="29.0" y="414.0"></text>
</g>
<g>
<title>sun/management/ThreadImpl.getThreadInfo1 (3 samples, 0.08%)</title><rect x="26.0" y="387.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="29.0" y="398.0"></text>
</g>
<g>
<title>jmm_GetThreadInfo (3 samples, 0.08%)</title><rect x="26.0" y="371.0" width="1.0" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="29.0" y="382.0"></text>
</g>
<g>
<title>Management::create_thread_info_instance(ThreadSnapshot*, Thread*) (2 samples, 0.06%)</title><rect x="26.0" y="355.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="29.0" y="366.0"></text>
</g>
<g>
<title>JavaCalls::construct_new_instance(InstanceKlass*, Symbol*, JavaCallArguments*, Thread*) (1 samples, 0.03%)</title><rect x="26.0" y="339.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="29.0" y="350.0"></text>
</g>
<g>
<title>JavaCalls::call_special(JavaValue*, Klass*, Symbol*, Symbol*, JavaCallArguments*, Thread*) (1 samples, 0.03%)</title><rect x="26.0" y="323.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="29.0" y="334.0"></text>
</g>
<g>
<title>LinkResolver::resolve_special_call(CallInfo&amp;, Handle, LinkInfo const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="26.0" y="307.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="29.0" y="318.0"></text>
</g>
<g>
<title>LinkResolver::runtime_resolve_special_method(CallInfo&amp;, LinkInfo const&amp;, methodHandle const&amp;, Handle, Thread*) (1 samples, 0.03%)</title><rect x="26.0" y="291.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="29.0" y="302.0"></text>
</g>
<g>
<title>initialize_ThreadInfo_constructor_arguments(JavaCallArguments*, ThreadSnapshot*, Thread*) (1 samples, 0.03%)</title><rect x="26.4" y="339.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="29.4" y="350.0"></text>
</g>
<g>
<title>ThreadStackTrace::allocate_fill_stack_trace_element_array(Thread*) (1 samples, 0.03%)</title><rect x="26.4" y="323.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="29.4" y="334.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_objArray(int, int, Thread*) (1 samples, 0.03%)</title><rect x="26.4" y="307.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="29.4" y="318.0"></text>
</g>
<g>
<title>InstanceKlass::array_klass_impl(bool, int, Thread*) (1 samples, 0.03%)</title><rect x="26.4" y="291.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="29.4" y="302.0"></text>
</g>
<g>
<title>ThreadDumpResult::~ThreadDumpResult() (1 samples, 0.03%)</title><rect x="26.7" y="355.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="29.7" y="366.0"></text>
</g>
<g>
<title>cfree (1 samples, 0.03%)</title><rect x="26.7" y="339.0" width="0.3" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="29.7" y="350.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.getClassLoaderFor (1 samples, 0.03%)</title><rect x="27.0" y="739.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="30.0" y="750.0"></text>
</g>
<g>
<title>javax/management/MBeanPermission.&lt;init&gt; (1 samples, 0.03%)</title><rect x="27.0" y="723.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="30.0" y="734.0"></text>
</g>
<g>
<title>javax/management/MBeanPermission.parseName (1 samples, 0.03%)</title><rect x="27.0" y="707.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="30.0" y="718.0"></text>
</g>
<g>
<title>javax/management/MBeanPermission.setClassName (1 samples, 0.03%)</title><rect x="27.0" y="691.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="30.0" y="702.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.unwrap (1 samples, 0.03%)</title><rect x="27.4" y="739.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="30.4" y="750.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (1 samples, 0.03%)</title><rect x="27.4" y="723.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="30.4" y="734.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl$7.run (1 samples, 0.03%)</title><rect x="27.4" y="707.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="30.4" y="718.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl$7.run (1 samples, 0.03%)</title><rect x="27.4" y="691.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="30.4" y="702.0"></text>
</g>
<g>
<title>com/sun/jmx/remote/util/OrderClassLoaders.&lt;init&gt; (1 samples, 0.03%)</title><rect x="27.4" y="675.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="30.4" y="686.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.&lt;init&gt; (1 samples, 0.03%)</title><rect x="27.4" y="659.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="30.4" y="670.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.&lt;init&gt; (1 samples, 0.03%)</title><rect x="27.4" y="643.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="30.4" y="654.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.nameAndId (1 samples, 0.03%)</title><rect x="27.4" y="627.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="30.4" y="638.0"></text>
</g>
<g>
<title>java/lang/System.identityHashCode (1 samples, 0.03%)</title><rect x="27.4" y="611.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="30.4" y="622.0"></text>
</g>
<g>
<title>JVM_IHashCode (1 samples, 0.03%)</title><rect x="27.4" y="595.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="30.4" y="606.0"></text>
</g>
<g>
<title>ObjectSynchronizer::FastHashCode(Thread*, oopDesc*) (1 samples, 0.03%)</title><rect x="27.4" y="579.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="30.4" y="590.0"></text>
</g>
<g>
<title>sun/rmi/server/UnicastRef.marshalValue (8 samples, 0.23%)</title><rect x="27.7" y="803.0" width="2.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="30.7" y="814.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject (8 samples, 0.23%)</title><rect x="27.7" y="787.0" width="2.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="30.7" y="798.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (8 samples, 0.23%)</title><rect x="27.7" y="771.0" width="2.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="30.7" y="782.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeArray (2 samples, 0.06%)</title><rect x="27.7" y="755.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="30.7" y="766.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (2 samples, 0.06%)</title><rect x="27.7" y="739.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="30.7" y="750.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (2 samples, 0.06%)</title><rect x="27.7" y="723.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="30.7" y="734.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (2 samples, 0.06%)</title><rect x="27.7" y="707.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="30.7" y="718.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.defaultWriteFields (2 samples, 0.06%)</title><rect x="27.7" y="691.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="30.7" y="702.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (2 samples, 0.06%)</title><rect x="27.7" y="675.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="30.7" y="686.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (2 samples, 0.06%)</title><rect x="27.7" y="659.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="30.7" y="670.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (2 samples, 0.06%)</title><rect x="27.7" y="643.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="30.7" y="654.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.getClassDataLayout (1 samples, 0.03%)</title><rect x="27.7" y="627.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="30.7" y="638.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.getClassDataLayout0 (1 samples, 0.03%)</title><rect x="27.7" y="611.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="30.7" y="622.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (1 samples, 0.03%)</title><rect x="27.7" y="595.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="30.7" y="606.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.03%)</title><rect x="27.7" y="579.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="30.7" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.03%)</title><rect x="27.7" y="563.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="30.7" y="574.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.03%)</title><rect x="27.7" y="547.0" width="0.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="30.7" y="558.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.invokeWriteObject (1 samples, 0.03%)</title><rect x="28.1" y="627.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="31.1" y="638.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (1 samples, 0.03%)</title><rect x="28.1" y="611.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="31.1" y="622.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (1 samples, 0.03%)</title><rect x="28.1" y="595.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="31.1" y="606.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor30.invoke (1 samples, 0.03%)</title><rect x="28.1" y="579.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="31.1" y="590.0"></text>
</g>
<g>
<title>java/util/TreeMap.writeObject (1 samples, 0.03%)</title><rect x="28.1" y="563.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="31.1" y="574.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject (1 samples, 0.03%)</title><rect x="28.1" y="547.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="31.1" y="558.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (1 samples, 0.03%)</title><rect x="28.1" y="531.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="31.1" y="542.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeString (1 samples, 0.03%)</title><rect x="28.1" y="515.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="31.1" y="526.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (5 samples, 0.14%)</title><rect x="28.4" y="755.0" width="1.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="31.4" y="766.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$HandleTable.assign (1 samples, 0.03%)</title><rect x="28.4" y="739.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="31.4" y="750.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$HandleTable.insert (1 samples, 0.03%)</title><rect x="28.4" y="723.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="31.4" y="734.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$HandleTable.hash (1 samples, 0.03%)</title><rect x="28.4" y="707.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="31.4" y="718.0"></text>
</g>
<g>
<title>java/lang/System.identityHashCode (1 samples, 0.03%)</title><rect x="28.4" y="691.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="31.4" y="702.0"></text>
</g>
<g>
<title>JVM_IHashCode (1 samples, 0.03%)</title><rect x="28.4" y="675.0" width="0.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="31.4" y="686.0"></text>
</g>
<g>
<title>ObjectSynchronizer::FastHashCode(Thread*, oopDesc*) (1 samples, 0.03%)</title><rect x="28.4" y="659.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="31.4" y="670.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeClassDesc (3 samples, 0.08%)</title><rect x="28.7" y="739.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="31.7" y="750.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeNonProxyDesc (3 samples, 0.08%)</title><rect x="28.7" y="723.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="31.7" y="734.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeClassDesc (1 samples, 0.03%)</title><rect x="28.7" y="707.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="31.7" y="718.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeNonProxyDesc (1 samples, 0.03%)</title><rect x="28.7" y="691.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="31.7" y="702.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$BlockDataOutputStream.setBlockDataMode (1 samples, 0.03%)</title><rect x="28.7" y="675.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="31.7" y="686.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$BlockDataOutputStream.drain (1 samples, 0.03%)</title><rect x="28.7" y="659.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="31.7" y="670.0"></text>
</g>
<g>
<title>java/io/BufferedOutputStream.write (1 samples, 0.03%)</title><rect x="28.7" y="643.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="31.7" y="654.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="28.7" y="627.0" width="0.4" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="31.7" y="638.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.writeNonProxy (2 samples, 0.06%)</title><rect x="29.1" y="707.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="32.1" y="718.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeLong (1 samples, 0.03%)</title><rect x="29.1" y="691.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="32.1" y="702.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$BlockDataOutputStream.writeLong (1 samples, 0.03%)</title><rect x="29.1" y="675.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="32.1" y="686.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeUTF (1 samples, 0.03%)</title><rect x="29.4" y="691.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="32.4" y="702.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (1 samples, 0.03%)</title><rect x="29.7" y="739.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="32.7" y="750.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.getClassDataLayout (1 samples, 0.03%)</title><rect x="29.7" y="723.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="32.7" y="734.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.getClassDataLayout0 (1 samples, 0.03%)</title><rect x="29.7" y="707.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="32.7" y="718.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.03%)</title><rect x="29.7" y="691.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="32.7" y="702.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.03%)</title><rect x="29.7" y="675.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="32.7" y="686.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.lookup (1 samples, 0.03%)</title><rect x="30.1" y="755.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="33.1" y="766.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass$WeakClassKey.&lt;init&gt; (1 samples, 0.03%)</title><rect x="30.1" y="739.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="33.1" y="750.0"></text>
</g>
<g>
<title>java/lang/ref/WeakReference.&lt;init&gt; (1 samples, 0.03%)</title><rect x="30.1" y="723.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="33.1" y="734.0"></text>
</g>
<g>
<title>java/lang/ref/Reference.&lt;init&gt; (1 samples, 0.03%)</title><rect x="30.1" y="707.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="33.1" y="718.0"></text>
</g>
<g>
<title>sun/rmi/server/UnicastRef.unmarshalValue (3 samples, 0.08%)</title><rect x="30.4" y="803.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="33.4" y="814.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject (3 samples, 0.08%)</title><rect x="30.4" y="787.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="33.4" y="798.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject (3 samples, 0.08%)</title><rect x="30.4" y="771.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="33.4" y="782.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject0 (3 samples, 0.08%)</title><rect x="30.4" y="755.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="33.4" y="766.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readOrdinaryObject (3 samples, 0.08%)</title><rect x="30.4" y="739.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="33.4" y="750.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readClassDesc (2 samples, 0.06%)</title><rect x="30.4" y="723.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="33.4" y="734.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readNonProxyDesc (2 samples, 0.06%)</title><rect x="30.4" y="707.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="33.4" y="718.0"></text>
</g>
<g>
<title>sun/rmi/server/MarshalInputStream.resolveClass (2 samples, 0.06%)</title><rect x="30.4" y="691.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="33.4" y="702.0"></text>
</g>
<g>
<title>java/rmi/server/RMIClassLoader.loadClass (2 samples, 0.06%)</title><rect x="30.4" y="675.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="33.4" y="686.0"></text>
</g>
<g>
<title>java/rmi/server/RMIClassLoader$2.loadClass (2 samples, 0.06%)</title><rect x="30.4" y="659.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="33.4" y="670.0"></text>
</g>
<g>
<title>sun/rmi/server/LoaderHandler.loadClass (2 samples, 0.06%)</title><rect x="30.4" y="643.0" width="0.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="33.4" y="654.0"></text>
</g>
<g>
<title>sun/rmi/server/LoaderHandler.loadClass (2 samples, 0.06%)</title><rect x="30.4" y="627.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="33.4" y="638.0"></text>
</g>
<g>
<title>java/lang/Class.forName (2 samples, 0.06%)</title><rect x="30.4" y="611.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="33.4" y="622.0"></text>
</g>
<g>
<title>java/lang/Class.forName0 (2 samples, 0.06%)</title><rect x="30.4" y="595.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="33.4" y="606.0"></text>
</g>
<g>
<title>Java_java_lang_Class_forName0 (2 samples, 0.06%)</title><rect x="30.4" y="579.0" width="0.7" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="33.4" y="590.0"></text>
</g>
<g>
<title>JVM_FindClassFromCaller (1 samples, 0.03%)</title><rect x="30.4" y="563.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="33.4" y="574.0"></text>
</g>
<g>
<title>find_class_from_class_loader(JNIEnv_*, Symbol*, unsigned char, Handle, Handle, unsigned char, Thread*) (1 samples, 0.03%)</title><rect x="30.4" y="547.0" width="0.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="33.4" y="558.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_or_fail(Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.03%)</title><rect x="30.4" y="531.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="33.4" y="542.0"></text>
</g>
<g>
<title>Dictionary::find(unsigned int, Symbol*, Handle) (1 samples, 0.03%)</title><rect x="30.4" y="515.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="33.4" y="526.0"></text>
</g>
<g>
<title>jni_GetStringUTFRegion (1 samples, 0.03%)</title><rect x="30.7" y="563.0" width="0.4" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="33.7" y="574.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;573558ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)3, 573558ul&gt;::oop_access_barrier(oopDesc*, long) (1 samples, 0.03%)</title><rect x="30.7" y="547.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="33.7" y="558.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readSerialData (1 samples, 0.03%)</title><rect x="31.1" y="723.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="34.1" y="734.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.getClassDataLayout (1 samples, 0.03%)</title><rect x="31.1" y="707.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="34.1" y="718.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.getClassDataLayout0 (1 samples, 0.03%)</title><rect x="31.1" y="691.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="34.1" y="702.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.03%)</title><rect x="31.1" y="675.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="34.1" y="686.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.03%)</title><rect x="31.1" y="659.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="34.1" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.03%)</title><rect x="31.1" y="643.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="34.1" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (1 samples, 0.03%)</title><rect x="31.1" y="627.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="34.1" y="638.0"></text>
</g>
<g>
<title>sun/rmi/transport/StreamRemoteCall.releaseInputStream (1 samples, 0.03%)</title><rect x="31.4" y="803.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="34.4" y="814.0"></text>
</g>
<g>
<title>sun/rmi/server/MarshalInputStream.done (1 samples, 0.03%)</title><rect x="31.4" y="787.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="34.4" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.hasNext (1 samples, 0.03%)</title><rect x="31.4" y="771.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="34.4" y="782.0"></text>
</g>
<g>
<title>sun/rmi/transport/StreamRemoteCall.releaseOutputStream (4 samples, 0.11%)</title><rect x="31.7" y="803.0" width="1.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="34.7" y="814.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.flush (4 samples, 0.11%)</title><rect x="31.7" y="787.0" width="1.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="34.7" y="798.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$BlockDataOutputStream.flush (4 samples, 0.11%)</title><rect x="31.7" y="771.0" width="1.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="34.7" y="782.0"></text>
</g>
<g>
<title>java/io/BufferedOutputStream.flush (4 samples, 0.11%)</title><rect x="31.7" y="755.0" width="1.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="34.7" y="766.0"></text>
</g>
<g>
<title>java/io/BufferedOutputStream.flushBuffer (4 samples, 0.11%)</title><rect x="31.7" y="739.0" width="1.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="34.7" y="750.0"></text>
</g>
<g>
<title>java/net/SocketOutputStream.write (4 samples, 0.11%)</title><rect x="31.7" y="723.0" width="1.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="34.7" y="734.0"></text>
</g>
<g>
<title>java/net/SocketOutputStream.socketWrite (4 samples, 0.11%)</title><rect x="31.7" y="707.0" width="1.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="34.7" y="718.0"></text>
</g>
<g>
<title>java/net/SocketOutputStream.socketWrite0 (4 samples, 0.11%)</title><rect x="31.7" y="691.0" width="1.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="34.7" y="702.0"></text>
</g>
<g>
<title>__send (4 samples, 0.11%)</title><rect x="31.7" y="675.0" width="1.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="34.7" y="686.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (4 samples, 0.11%)</title><rect x="31.7" y="659.0" width="1.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="34.7" y="670.0"></text>
</g>
<g>
<title>do_syscall_64 (4 samples, 0.11%)</title><rect x="31.7" y="643.0" width="1.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="34.7" y="654.0"></text>
</g>
<g>
<title>__x64_sys_sendto (4 samples, 0.11%)</title><rect x="31.7" y="627.0" width="1.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="34.7" y="638.0"></text>
</g>
<g>
<title>__sys_sendto (4 samples, 0.11%)</title><rect x="31.7" y="611.0" width="1.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="34.7" y="622.0"></text>
</g>
<g>
<title>sock_sendmsg (4 samples, 0.11%)</title><rect x="31.7" y="595.0" width="1.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="34.7" y="606.0"></text>
</g>
<g>
<title>inet6_sendmsg (4 samples, 0.11%)</title><rect x="31.7" y="579.0" width="1.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="34.7" y="590.0"></text>
</g>
<g>
<title>tcp_sendmsg (3 samples, 0.08%)</title><rect x="32.1" y="563.0" width="1.0" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="35.1" y="574.0"></text>
</g>
<g>
<title>tcp_sendmsg_locked (3 samples, 0.08%)</title><rect x="32.1" y="547.0" width="1.0" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="35.1" y="558.0"></text>
</g>
<g>
<title>tcp_push (2 samples, 0.06%)</title><rect x="32.4" y="531.0" width="0.7" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="35.4" y="542.0"></text>
</g>
<g>
<title>__tcp_push_pending_frames (2 samples, 0.06%)</title><rect x="32.4" y="515.0" width="0.7" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="35.4" y="526.0"></text>
</g>
<g>
<title>tcp_write_xmit (2 samples, 0.06%)</title><rect x="32.4" y="499.0" width="0.7" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="35.4" y="510.0"></text>
</g>
<g>
<title>__tcp_transmit_skb (2 samples, 0.06%)</title><rect x="32.4" y="483.0" width="0.7" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="35.4" y="494.0"></text>
</g>
<g>
<title>ip_queue_xmit (2 samples, 0.06%)</title><rect x="32.4" y="467.0" width="0.7" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="35.4" y="478.0"></text>
</g>
<g>
<title>__ip_queue_xmit (2 samples, 0.06%)</title><rect x="32.4" y="451.0" width="0.7" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="35.4" y="462.0"></text>
</g>
<g>
<title>ip_local_out (2 samples, 0.06%)</title><rect x="32.4" y="435.0" width="0.7" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="35.4" y="446.0"></text>
</g>
<g>
<title>ip_output (2 samples, 0.06%)</title><rect x="32.4" y="419.0" width="0.7" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="35.4" y="430.0"></text>
</g>
<g>
<title>ip_finish_output (2 samples, 0.06%)</title><rect x="32.4" y="403.0" width="0.7" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="35.4" y="414.0"></text>
</g>
<g>
<title>__ip_finish_output (2 samples, 0.06%)</title><rect x="32.4" y="387.0" width="0.7" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="35.4" y="398.0"></text>
</g>
<g>
<title>ip_finish_output2 (2 samples, 0.06%)</title><rect x="32.4" y="371.0" width="0.7" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="35.4" y="382.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (2 samples, 0.06%)</title><rect x="32.4" y="355.0" width="0.7" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="35.4" y="366.0"></text>
</g>
<g>
<title>do_softirq.part.0 (2 samples, 0.06%)</title><rect x="32.4" y="339.0" width="0.7" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="35.4" y="350.0"></text>
</g>
<g>
<title>do_softirq_own_stack (2 samples, 0.06%)</title><rect x="32.4" y="323.0" width="0.7" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="35.4" y="334.0"></text>
</g>
<g>
<title>__softirqentry_text_start (2 samples, 0.06%)</title><rect x="32.4" y="307.0" width="0.7" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="35.4" y="318.0"></text>
</g>
<g>
<title>net_rx_action (2 samples, 0.06%)</title><rect x="32.4" y="291.0" width="0.7" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="35.4" y="302.0"></text>
</g>
<g>
<title>process_backlog (2 samples, 0.06%)</title><rect x="32.4" y="275.0" width="0.7" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="35.4" y="286.0"></text>
</g>
<g>
<title>__netif_receive_skb (2 samples, 0.06%)</title><rect x="32.4" y="259.0" width="0.7" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="35.4" y="270.0"></text>
</g>
<g>
<title>__netif_receive_skb_one_core (2 samples, 0.06%)</title><rect x="32.4" y="243.0" width="0.7" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="35.4" y="254.0"></text>
</g>
<g>
<title>ip_rcv (2 samples, 0.06%)</title><rect x="32.4" y="227.0" width="0.7" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="35.4" y="238.0"></text>
</g>
<g>
<title>ip_rcv_finish (2 samples, 0.06%)</title><rect x="32.4" y="211.0" width="0.7" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="35.4" y="222.0"></text>
</g>
<g>
<title>ip_local_deliver (2 samples, 0.06%)</title><rect x="32.4" y="195.0" width="0.7" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="35.4" y="206.0"></text>
</g>
<g>
<title>ip_local_deliver_finish (2 samples, 0.06%)</title><rect x="32.4" y="179.0" width="0.7" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="35.4" y="190.0"></text>
</g>
<g>
<title>ip_protocol_deliver_rcu (2 samples, 0.06%)</title><rect x="32.4" y="163.0" width="0.7" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="35.4" y="174.0"></text>
</g>
<g>
<title>tcp_v4_rcv (2 samples, 0.06%)</title><rect x="32.4" y="147.0" width="0.7" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="35.4" y="158.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (1 samples, 0.03%)</title><rect x="32.7" y="131.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="35.7" y="142.0"></text>
</g>
<g>
<title>tcp_rcv_established (1 samples, 0.03%)</title><rect x="32.7" y="115.0" width="0.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="35.7" y="126.0"></text>
</g>
<g>
<title>tcp_data_ready (1 samples, 0.03%)</title><rect x="32.7" y="99.0" width="0.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="35.7" y="110.0"></text>
</g>
<g>
<title>sock_def_readable (1 samples, 0.03%)</title><rect x="32.7" y="83.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="35.7" y="94.0"></text>
</g>
<g>
<title>__wake_up_sync_key (1 samples, 0.03%)</title><rect x="32.7" y="67.0" width="0.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="35.7" y="78.0"></text>
</g>
<g>
<title>__wake_up_common_lock (1 samples, 0.03%)</title><rect x="32.7" y="51.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="35.7" y="62.0"></text>
</g>
<g>
<title>__lock_text_start (1 samples, 0.03%)</title><rect x="32.7" y="35.0" width="0.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="35.7" y="46.0"></text>
</g>
<g>
<title>sun/rmi/transport/Transport.setContextClassLoader (2 samples, 0.06%)</title><rect x="33.1" y="867.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="36.1" y="878.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (2 samples, 0.06%)</title><rect x="33.1" y="851.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="36.1" y="862.0"></text>
</g>
<g>
<title>JVM_DoPrivileged (2 samples, 0.06%)</title><rect x="33.1" y="835.0" width="0.6" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="36.1" y="846.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.03%)</title><rect x="33.1" y="819.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="36.1" y="830.0"></text>
</g>
<g>
<title>ThreadShadow::clear_pending_exception() (1 samples, 0.03%)</title><rect x="33.1" y="803.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="36.1" y="814.0"></text>
</g>
<g>
<title>vframeStreamCommon::security_get_caller_frame(int) (1 samples, 0.03%)</title><rect x="33.4" y="819.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="36.4" y="830.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPConnection.releaseOutputStream (2 samples, 0.06%)</title><rect x="33.7" y="883.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="36.7" y="894.0"></text>
</g>
<g>
<title>java/io/BufferedOutputStream.flush (2 samples, 0.06%)</title><rect x="33.7" y="867.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="36.7" y="878.0"></text>
</g>
<g>
<title>java/io/BufferedOutputStream.flushBuffer (2 samples, 0.06%)</title><rect x="33.7" y="851.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="36.7" y="862.0"></text>
</g>
<g>
<title>java/net/SocketOutputStream.write (2 samples, 0.06%)</title><rect x="33.7" y="835.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="36.7" y="846.0"></text>
</g>
<g>
<title>java/net/SocketOutputStream.socketWrite (2 samples, 0.06%)</title><rect x="33.7" y="819.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="36.7" y="830.0"></text>
</g>
<g>
<title>java/net/SocketOutputStream.socketWrite0 (2 samples, 0.06%)</title><rect x="33.7" y="803.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="36.7" y="814.0"></text>
</g>
<g>
<title>__send (2 samples, 0.06%)</title><rect x="33.7" y="787.0" width="0.7" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="36.7" y="798.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (2 samples, 0.06%)</title><rect x="33.7" y="771.0" width="0.7" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="36.7" y="782.0"></text>
</g>
<g>
<title>do_syscall_64 (2 samples, 0.06%)</title><rect x="33.7" y="755.0" width="0.7" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="36.7" y="766.0"></text>
</g>
<g>
<title>__x64_sys_sendto (2 samples, 0.06%)</title><rect x="33.7" y="739.0" width="0.7" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="36.7" y="750.0"></text>
</g>
<g>
<title>__sys_sendto (2 samples, 0.06%)</title><rect x="33.7" y="723.0" width="0.7" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="36.7" y="734.0"></text>
</g>
<g>
<title>sock_sendmsg (2 samples, 0.06%)</title><rect x="33.7" y="707.0" width="0.7" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="36.7" y="718.0"></text>
</g>
<g>
<title>inet6_sendmsg (2 samples, 0.06%)</title><rect x="33.7" y="691.0" width="0.7" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="36.7" y="702.0"></text>
</g>
<g>
<title>tcp_sendmsg (2 samples, 0.06%)</title><rect x="33.7" y="675.0" width="0.7" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="36.7" y="686.0"></text>
</g>
<g>
<title>tcp_sendmsg_locked (2 samples, 0.06%)</title><rect x="33.7" y="659.0" width="0.7" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="36.7" y="670.0"></text>
</g>
<g>
<title>tcp_push (2 samples, 0.06%)</title><rect x="33.7" y="643.0" width="0.7" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="36.7" y="654.0"></text>
</g>
<g>
<title>__tcp_push_pending_frames (2 samples, 0.06%)</title><rect x="33.7" y="627.0" width="0.7" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="36.7" y="638.0"></text>
</g>
<g>
<title>__tcp_transmit_skb (1 samples, 0.03%)</title><rect x="33.7" y="611.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="36.7" y="622.0"></text>
</g>
<g>
<title>tcp_write_xmit (1 samples, 0.03%)</title><rect x="34.1" y="611.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="37.1" y="622.0"></text>
</g>
<g>
<title>__tcp_transmit_skb (1 samples, 0.03%)</title><rect x="34.1" y="595.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="37.1" y="606.0"></text>
</g>
<g>
<title>ip_queue_xmit (1 samples, 0.03%)</title><rect x="34.1" y="579.0" width="0.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="37.1" y="590.0"></text>
</g>
<g>
<title>__ip_queue_xmit (1 samples, 0.03%)</title><rect x="34.1" y="563.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="37.1" y="574.0"></text>
</g>
<g>
<title>ip_local_out (1 samples, 0.03%)</title><rect x="34.1" y="547.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="37.1" y="558.0"></text>
</g>
<g>
<title>ip_output (1 samples, 0.03%)</title><rect x="34.1" y="531.0" width="0.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="37.1" y="542.0"></text>
</g>
<g>
<title>ip_finish_output (1 samples, 0.03%)</title><rect x="34.1" y="515.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="37.1" y="526.0"></text>
</g>
<g>
<title>__ip_finish_output (1 samples, 0.03%)</title><rect x="34.1" y="499.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="37.1" y="510.0"></text>
</g>
<g>
<title>ip_finish_output2 (1 samples, 0.03%)</title><rect x="34.1" y="483.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="37.1" y="494.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (1 samples, 0.03%)</title><rect x="34.1" y="467.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="37.1" y="478.0"></text>
</g>
<g>
<title>do_softirq.part.0 (1 samples, 0.03%)</title><rect x="34.1" y="451.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="37.1" y="462.0"></text>
</g>
<g>
<title>do_softirq_own_stack (1 samples, 0.03%)</title><rect x="34.1" y="435.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="37.1" y="446.0"></text>
</g>
<g>
<title>__softirqentry_text_start (1 samples, 0.03%)</title><rect x="34.1" y="419.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="37.1" y="430.0"></text>
</g>
<g>
<title>net_rx_action (1 samples, 0.03%)</title><rect x="34.1" y="403.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="37.1" y="414.0"></text>
</g>
<g>
<title>process_backlog (1 samples, 0.03%)</title><rect x="34.1" y="387.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="37.1" y="398.0"></text>
</g>
<g>
<title>__netif_receive_skb (1 samples, 0.03%)</title><rect x="34.1" y="371.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="37.1" y="382.0"></text>
</g>
<g>
<title>__netif_receive_skb_one_core (1 samples, 0.03%)</title><rect x="34.1" y="355.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="37.1" y="366.0"></text>
</g>
<g>
<title>ip_rcv (1 samples, 0.03%)</title><rect x="34.1" y="339.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="37.1" y="350.0"></text>
</g>
<g>
<title>ip_rcv_finish (1 samples, 0.03%)</title><rect x="34.1" y="323.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="37.1" y="334.0"></text>
</g>
<g>
<title>ip_local_deliver (1 samples, 0.03%)</title><rect x="34.1" y="307.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="37.1" y="318.0"></text>
</g>
<g>
<title>ip_local_deliver_finish (1 samples, 0.03%)</title><rect x="34.1" y="291.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="37.1" y="302.0"></text>
</g>
<g>
<title>ip_protocol_deliver_rcu (1 samples, 0.03%)</title><rect x="34.1" y="275.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="37.1" y="286.0"></text>
</g>
<g>
<title>tcp_v4_rcv (1 samples, 0.03%)</title><rect x="34.1" y="259.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="37.1" y="270.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (1 samples, 0.03%)</title><rect x="34.1" y="243.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="37.1" y="254.0"></text>
</g>
<g>
<title>tcp_rcv_established (1 samples, 0.03%)</title><rect x="34.1" y="227.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="37.1" y="238.0"></text>
</g>
<g>
<title>tcp_data_ready (1 samples, 0.03%)</title><rect x="34.1" y="211.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="37.1" y="222.0"></text>
</g>
<g>
<title>sock_def_readable (1 samples, 0.03%)</title><rect x="34.1" y="195.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="37.1" y="206.0"></text>
</g>
<g>
<title>__wake_up_sync_key (1 samples, 0.03%)</title><rect x="34.1" y="179.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="37.1" y="190.0"></text>
</g>
<g>
<title>__wake_up_common_lock (1 samples, 0.03%)</title><rect x="34.1" y="163.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="37.1" y="174.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (3,416 samples, 96.77%)</title><rect x="34.4" y="1027.0" width="1141.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="37.4" y="1038.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.hasNext (2 samples, 0.06%)</title><rect x="35.7" y="1011.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="38.7" y="1022.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (26 samples, 0.74%)</title><rect x="36.4" y="1011.0" width="8.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="39.4" y="1022.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (26 samples, 0.74%)</title><rect x="36.4" y="995.0" width="8.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="39.4" y="1006.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.findNext (1 samples, 0.03%)</title><rect x="44.1" y="979.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="47.1" y="990.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (2 samples, 0.06%)</title><rect x="44.4" y="979.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="47.4" y="990.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.isOpen (1 samples, 0.03%)</title><rect x="45.1" y="1011.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="48.1" y="1022.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (520 samples, 14.73%)</title><rect x="45.4" y="1011.0" width="173.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="48.4" y="1022.0">one/nio/net/NativeSele..</text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.&lt;init&gt; (10 samples, 0.28%)</title><rect x="49.1" y="995.0" width="3.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="52.1" y="1006.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.findNext (9 samples, 0.25%)</title><rect x="49.1" y="979.0" width="3.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="52.1" y="990.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.access$100 (1 samples, 0.03%)</title><rect x="52.1" y="979.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="55.1" y="990.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (499 samples, 14.14%)</title><rect x="52.5" y="995.0" width="166.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="55.5" y="1006.0">one/nio/net/NativeSel..</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (7 samples, 0.20%)</title><rect x="57.5" y="979.0" width="2.3" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="60.5" y="990.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSelector_epollWait (13 samples, 0.37%)</title><rect x="59.8" y="979.0" width="4.4" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="62.8" y="990.0"></text>
</g>
<g>
<title>clock_gettime (46 samples, 1.30%)</title><rect x="64.2" y="979.0" width="15.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="67.2" y="990.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.11%)</title><rect x="76.2" y="963.0" width="1.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="79.2" y="974.0"></text>
</g>
<g>
<title>clock_gettime (6 samples, 0.17%)</title><rect x="77.5" y="963.0" width="2.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="80.5" y="974.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.14%)</title><rect x="77.9" y="947.0" width="1.6" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="80.9" y="958.0"></text>
</g>
<g>
<title>epoll_wait (418 samples, 11.84%)</title><rect x="79.5" y="979.0" width="139.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="82.5" y="990.0">epoll_wait</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (344 samples, 9.75%)</title><rect x="104.3" y="963.0" width="115.0" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="107.3" y="974.0">entry_SYSCALL_..</text>
</g>
<g>
<title>__x64_sys_epoll_wait (3 samples, 0.08%)</title><rect x="104.3" y="947.0" width="1.0" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="107.3" y="958.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_rax (1 samples, 0.03%)</title><rect x="105.3" y="947.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="108.3" y="958.0"></text>
</g>
<g>
<title>do_syscall_64 (340 samples, 9.63%)</title><rect x="105.6" y="947.0" width="113.7" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="108.6" y="958.0">do_syscall_64</text>
</g>
<g>
<title>__x64_sys_epoll_wait (307 samples, 8.70%)</title><rect x="116.0" y="931.0" width="102.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="119.0" y="942.0">__x64_sys_ep..</text>
</g>
<g>
<title>__fdget (2 samples, 0.06%)</title><rect x="116.0" y="915.0" width="0.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="119.0" y="926.0"></text>
</g>
<g>
<title>do_epoll_wait (304 samples, 8.61%)</title><rect x="116.6" y="915.0" width="101.7" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="119.6" y="926.0">do_epoll_wait</text>
</g>
<g>
<title>__fdget (4 samples, 0.11%)</title><rect x="118.0" y="899.0" width="1.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="121.0" y="910.0"></text>
</g>
<g>
<title>__fget_light (4 samples, 0.11%)</title><rect x="118.0" y="883.0" width="1.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="121.0" y="894.0"></text>
</g>
<g>
<title>__fget (4 samples, 0.11%)</title><rect x="118.0" y="867.0" width="1.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="121.0" y="878.0"></text>
</g>
<g>
<title>__fget_light (3 samples, 0.08%)</title><rect x="119.3" y="899.0" width="1.0" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="122.3" y="910.0"></text>
</g>
<g>
<title>ep_poll (283 samples, 8.02%)</title><rect x="120.3" y="899.0" width="94.6" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="123.3" y="910.0">ep_poll</text>
</g>
<g>
<title>_raw_write_lock_irq (1 samples, 0.03%)</title><rect x="126.3" y="883.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="129.3" y="894.0"></text>
</g>
<g>
<title>ep_scan_ready_list.constprop.0 (112 samples, 3.17%)</title><rect x="126.7" y="883.0" width="37.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="129.7" y="894.0">ep_..</text>
</g>
<g>
<title>_cond_resched (2 samples, 0.06%)</title><rect x="133.0" y="867.0" width="0.7" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="136.0" y="878.0"></text>
</g>
<g>
<title>ep_item_poll.isra.0 (1 samples, 0.03%)</title><rect x="133.7" y="867.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="136.7" y="878.0"></text>
</g>
<g>
<title>ep_send_events_proc (71 samples, 2.01%)</title><rect x="134.0" y="867.0" width="23.8" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="137.0" y="878.0">e..</text>
</g>
<g>
<title>ep_item_poll.isra.0 (54 samples, 1.53%)</title><rect x="137.7" y="851.0" width="18.0" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="140.7" y="862.0"></text>
</g>
<g>
<title>sock_poll (38 samples, 1.08%)</title><rect x="142.4" y="835.0" width="12.7" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="145.4" y="846.0"></text>
</g>
<g>
<title>tcp_poll (13 samples, 0.37%)</title><rect x="149.1" y="819.0" width="4.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="152.1" y="830.0"></text>
</g>
<g>
<title>tcp_stream_memory_free (5 samples, 0.14%)</title><rect x="153.4" y="819.0" width="1.7" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="156.4" y="830.0"></text>
</g>
<g>
<title>tcp_poll (2 samples, 0.06%)</title><rect x="155.1" y="835.0" width="0.6" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="158.1" y="846.0"></text>
</g>
<g>
<title>sock_poll (6 samples, 0.17%)</title><rect x="155.7" y="851.0" width="2.1" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="158.7" y="862.0"></text>
</g>
<g>
<title>mutex_lock (19 samples, 0.54%)</title><rect x="157.8" y="867.0" width="6.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="160.8" y="878.0"></text>
</g>
<g>
<title>rcu_all_qs (3 samples, 0.08%)</title><rect x="163.1" y="851.0" width="1.0" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="166.1" y="862.0"></text>
</g>
<g>
<title>ep_send_events_proc (2 samples, 0.06%)</title><rect x="164.1" y="883.0" width="0.7" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="167.1" y="894.0"></text>
</g>
<g>
<title>mutex_lock (1 samples, 0.03%)</title><rect x="164.8" y="883.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="167.8" y="894.0"></text>
</g>
<g>
<title>mutex_unlock (6 samples, 0.17%)</title><rect x="165.1" y="883.0" width="2.0" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="168.1" y="894.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range (141 samples, 3.99%)</title><rect x="167.1" y="883.0" width="47.1" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="170.1" y="894.0">sche..</text>
</g>
<g>
<title>schedule (2 samples, 0.06%)</title><rect x="168.1" y="867.0" width="0.7" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="171.1" y="878.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range_clock (136 samples, 3.85%)</title><rect x="168.8" y="867.0" width="45.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="171.8" y="878.0">sche..</text>
</g>
<g>
<title>__schedule (1 samples, 0.03%)</title><rect x="172.5" y="851.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="175.5" y="862.0"></text>
</g>
<g>
<title>schedule (124 samples, 3.51%)</title><rect x="172.8" y="851.0" width="41.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="175.8" y="862.0">sch..</text>
</g>
<g>
<title>__schedule (120 samples, 3.40%)</title><rect x="174.1" y="835.0" width="40.1" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="177.1" y="846.0">__s..</text>
</g>
<g>
<title>finish_task_switch (111 samples, 3.14%)</title><rect x="177.1" y="819.0" width="37.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="180.1" y="830.0">fin..</text>
</g>
<g>
<title>ret_from_intr (1 samples, 0.03%)</title><rect x="213.9" y="803.0" width="0.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="216.9" y="814.0"></text>
</g>
<g>
<title>do_IRQ (1 samples, 0.03%)</title><rect x="213.9" y="787.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="216.9" y="798.0"></text>
</g>
<g>
<title>irq_exit (1 samples, 0.03%)</title><rect x="213.9" y="771.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="216.9" y="782.0"></text>
</g>
<g>
<title>__softirqentry_text_start (1 samples, 0.03%)</title><rect x="213.9" y="755.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="216.9" y="766.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range_clock (2 samples, 0.06%)</title><rect x="214.2" y="883.0" width="0.7" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="217.2" y="894.0"></text>
</g>
<g>
<title>fput_many (8 samples, 0.23%)</title><rect x="214.9" y="899.0" width="2.7" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="217.9" y="910.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range (2 samples, 0.06%)</title><rect x="217.6" y="899.0" width="0.7" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="220.6" y="910.0"></text>
</g>
<g>
<title>fput (1 samples, 0.03%)</title><rect x="218.3" y="915.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="221.3" y="926.0"></text>
</g>
<g>
<title>do_epoll_wait (2 samples, 0.06%)</title><rect x="218.6" y="931.0" width="0.7" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="221.6" y="942.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (2,863 samples, 81.10%)</title><rect x="219.3" y="1011.0" width="957.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="222.3" y="1022.0">one/nio/net/Session.process</text>
</g>
<g>
<title>[unknown] (2 samples, 0.06%)</title><rect x="220.9" y="995.0" width="0.7" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="223.9" y="1006.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.06%)</title><rect x="220.9" y="979.0" width="0.7" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="223.9" y="990.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.06%)</title><rect x="220.9" y="963.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="223.9" y="974.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (2,853 samples, 80.82%)</title><rect x="221.6" y="995.0" width="953.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="224.6" y="1006.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (2,246 samples, 63.63%)</title><rect x="222.9" y="979.0" width="750.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="225.9" y="990.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (2,023 samples, 57.31%)</title><rect x="231.6" y="963.0" width="676.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="234.6" y="974.0">one/nio/http/HttpSession.handleParsedRequest</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (2,018 samples, 57.17%)</title><rect x="233.3" y="947.0" width="674.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="236.3" y="958.0">one/nio/http/HttpServer.handleRequest</text>
</g>
<g>
<title>RequestHandler1_put.handleRequest (1,976 samples, 55.98%)</title><rect x="234.6" y="931.0" width="660.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="237.6" y="942.0">RequestHandler1_put.handleRequest</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (1,663 samples, 47.11%)</title><rect x="235.3" y="915.0" width="555.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="238.3" y="926.0">one/nio/http/HttpSession.sendResponse</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (7 samples, 0.20%)</title><rect x="236.6" y="899.0" width="2.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="239.6" y="910.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (7 samples, 0.20%)</title><rect x="236.6" y="883.0" width="2.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="239.6" y="894.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (7 samples, 0.20%)</title><rect x="236.6" y="867.0" width="2.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="239.6" y="878.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (3 samples, 0.08%)</title><rect x="238.0" y="851.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="241.0" y="862.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (1,637 samples, 46.37%)</title><rect x="239.0" y="899.0" width="547.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="242.0" y="910.0">one/nio/http/HttpSession.writeResponse</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (48 samples, 1.36%)</title><rect x="239.0" y="883.0" width="16.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="242.0" y="894.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.08%)</title><rect x="241.7" y="867.0" width="1.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="244.7" y="878.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (2 samples, 0.06%)</title><rect x="242.7" y="867.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="245.7" y="878.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (35 samples, 0.99%)</title><rect x="243.3" y="867.0" width="11.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="246.3" y="878.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (2 samples, 0.06%)</title><rect x="243.3" y="851.0" width="0.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="246.3" y="862.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.ensureCapacity (1 samples, 0.03%)</title><rect x="243.7" y="835.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="246.7" y="846.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (17 samples, 0.48%)</title><rect x="244.0" y="851.0" width="5.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="247.0" y="862.0"></text>
</g>
<g>
<title>java/lang/String.charAt (5 samples, 0.14%)</title><rect x="247.7" y="835.0" width="1.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="250.7" y="846.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (3 samples, 0.08%)</title><rect x="248.3" y="819.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="251.3" y="830.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.03%)</title><rect x="249.3" y="835.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="252.3" y="846.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (16 samples, 0.45%)</title><rect x="249.7" y="851.0" width="5.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="252.7" y="862.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (16 samples, 0.45%)</title><rect x="249.7" y="835.0" width="5.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="252.7" y="846.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (16 samples, 0.45%)</title><rect x="249.7" y="819.0" width="5.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="252.7" y="830.0"></text>
</g>
<g>
<title>java/lang/String.charAt (2 samples, 0.06%)</title><rect x="253.7" y="803.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="256.7" y="814.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (2 samples, 0.06%)</title><rect x="253.7" y="787.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="256.7" y="798.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.putByte (2 samples, 0.06%)</title><rect x="254.4" y="803.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="257.4" y="814.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (1,589 samples, 45.01%)</title><rect x="255.0" y="883.0" width="531.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="258.0" y="894.0">one/nio/net/Session.write</text>
</g>
<g>
<title>one/nio/net/Session.write (1,589 samples, 45.01%)</title><rect x="255.0" y="867.0" width="531.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="258.0" y="878.0">one/nio/net/Session.write</text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="255.4" y="851.0" width="0.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="258.4" y="862.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.03%)</title><rect x="255.4" y="835.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="258.4" y="846.0"></text>
</g>
<g>
<title>gettimeofday (7 samples, 0.20%)</title><rect x="255.7" y="851.0" width="2.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="258.7" y="862.0"></text>
</g>
<g>
<title>gettimeofday@plt (1 samples, 0.03%)</title><rect x="258.0" y="851.0" width="0.4" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="261.0" y="862.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (1,571 samples, 44.50%)</title><rect x="258.4" y="851.0" width="525.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="261.4" y="862.0">one/nio/net/Session$ArrayQueueItem.write</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (1,569 samples, 44.45%)</title><rect x="259.0" y="835.0" width="524.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="262.0" y="846.0">one/nio/net/NativeSocket.write</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (37 samples, 1.05%)</title><rect x="263.0" y="819.0" width="12.4" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="266.0" y="830.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (3 samples, 0.08%)</title><rect x="265.7" y="803.0" width="1.0" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="268.7" y="814.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (4 samples, 0.11%)</title><rect x="266.7" y="803.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="269.7" y="814.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (2 samples, 0.06%)</title><rect x="268.1" y="803.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="271.1" y="814.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (18 samples, 0.51%)</title><rect x="268.7" y="803.0" width="6.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="271.7" y="814.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.03%)</title><rect x="270.1" y="787.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="273.1" y="798.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.03%)</title><rect x="270.4" y="787.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="273.4" y="798.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (4 samples, 0.11%)</title><rect x="270.7" y="787.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="273.7" y="798.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (3 samples, 0.08%)</title><rect x="272.1" y="787.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="275.1" y="798.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (5 samples, 0.14%)</title><rect x="273.1" y="787.0" width="1.6" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="276.1" y="798.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (3 samples, 0.08%)</title><rect x="273.7" y="771.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="276.7" y="782.0"></text>
</g>
<g>
<title>memmove@plt (1 samples, 0.03%)</title><rect x="274.7" y="803.0" width="0.4" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="277.7" y="814.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (1 samples, 0.03%)</title><rect x="275.1" y="803.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="278.1" y="814.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.03%)</title><rect x="275.4" y="819.0" width="0.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="278.4" y="830.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (2 samples, 0.06%)</title><rect x="275.8" y="819.0" width="0.6" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="278.8" y="830.0"></text>
</g>
<g>
<title>__send (1,511 samples, 42.80%)</title><rect x="276.4" y="819.0" width="505.1" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="279.4" y="830.0">__send</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1,459 samples, 41.33%)</title><rect x="293.8" y="803.0" width="487.7" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="296.8" y="814.0">entry_SYSCALL_64_after_hwframe</text>
</g>
<g>
<title>__x64_sys_sendto (5 samples, 0.14%)</title><rect x="293.8" y="787.0" width="1.7" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="296.8" y="798.0"></text>
</g>
<g>
<title>do_syscall_64 (1,454 samples, 41.19%)</title><rect x="295.5" y="787.0" width="486.0" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="298.5" y="798.0">do_syscall_64</text>
</g>
<g>
<title>__sys_sendto (1 samples, 0.03%)</title><rect x="305.8" y="771.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="308.8" y="782.0"></text>
</g>
<g>
<title>__x64_sys_sendto (1,422 samples, 40.28%)</title><rect x="306.2" y="771.0" width="475.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="309.2" y="782.0">__x64_sys_sendto</text>
</g>
<g>
<title>__sys_sendto (1,419 samples, 40.20%)</title><rect x="306.2" y="755.0" width="474.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="309.2" y="766.0">__sys_sendto</text>
</g>
<g>
<title>__fdget (2 samples, 0.06%)</title><rect x="307.2" y="739.0" width="0.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="310.2" y="750.0"></text>
</g>
<g>
<title>fput_many (6 samples, 0.17%)</title><rect x="307.8" y="739.0" width="2.0" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="310.8" y="750.0"></text>
</g>
<g>
<title>inet6_sendmsg (1 samples, 0.03%)</title><rect x="309.8" y="739.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="312.8" y="750.0"></text>
</g>
<g>
<title>security_socket_sendmsg (1 samples, 0.03%)</title><rect x="310.2" y="739.0" width="0.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="313.2" y="750.0"></text>
</g>
<g>
<title>sock_sendmsg (1,395 samples, 39.52%)</title><rect x="310.5" y="739.0" width="466.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="313.5" y="750.0">sock_sendmsg</text>
</g>
<g>
<title>apparmor_socket_sendmsg (5 samples, 0.14%)</title><rect x="312.5" y="723.0" width="1.7" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="315.5" y="734.0"></text>
</g>
<g>
<title>inet6_sendmsg (1,372 samples, 38.87%)</title><rect x="314.2" y="723.0" width="458.6" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="317.2" y="734.0">inet6_sendmsg</text>
</g>
<g>
<title>lock_sock_nested (2 samples, 0.06%)</title><rect x="315.5" y="707.0" width="0.7" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="318.5" y="718.0"></text>
</g>
<g>
<title>tcp_sendmsg (1,361 samples, 38.56%)</title><rect x="316.2" y="707.0" width="455.0" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="319.2" y="718.0">tcp_sendmsg</text>
</g>
<g>
<title>__x86_indirect_thunk_rax (2 samples, 0.06%)</title><rect x="316.9" y="691.0" width="0.6" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="319.9" y="702.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (4 samples, 0.11%)</title><rect x="317.5" y="691.0" width="1.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="320.5" y="702.0"></text>
</g>
<g>
<title>_raw_spin_unlock_bh (1 samples, 0.03%)</title><rect x="318.9" y="691.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="321.9" y="702.0"></text>
</g>
<g>
<title>lock_sock_nested (4 samples, 0.11%)</title><rect x="319.2" y="691.0" width="1.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="322.2" y="702.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (2 samples, 0.06%)</title><rect x="319.5" y="675.0" width="0.7" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="322.5" y="686.0"></text>
</g>
<g>
<title>do_softirq.part.0 (1 samples, 0.03%)</title><rect x="319.9" y="659.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="322.9" y="670.0"></text>
</g>
<g>
<title>rcu_all_qs (1 samples, 0.03%)</title><rect x="320.2" y="675.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="323.2" y="686.0"></text>
</g>
<g>
<title>release_sock (6 samples, 0.17%)</title><rect x="320.5" y="691.0" width="2.0" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="323.5" y="702.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (2 samples, 0.06%)</title><rect x="320.9" y="675.0" width="0.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="323.9" y="686.0"></text>
</g>
<g>
<title>_raw_spin_unlock_bh (2 samples, 0.06%)</title><rect x="321.5" y="675.0" width="0.7" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="324.5" y="686.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (2 samples, 0.06%)</title><rect x="321.5" y="659.0" width="0.7" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="324.5" y="670.0"></text>
</g>
<g>
<title>tcp_release_cb (1 samples, 0.03%)</title><rect x="322.2" y="675.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="325.2" y="686.0"></text>
</g>
<g>
<title>sk_page_frag_refill (2 samples, 0.06%)</title><rect x="322.5" y="691.0" width="0.7" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="325.5" y="702.0"></text>
</g>
<g>
<title>sk_stream_alloc_skb (3 samples, 0.08%)</title><rect x="323.2" y="691.0" width="1.0" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="326.2" y="702.0"></text>
</g>
<g>
<title>skb_entail (1 samples, 0.03%)</title><rect x="324.2" y="691.0" width="0.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="327.2" y="702.0"></text>
</g>
<g>
<title>sock_zerocopy_put (3 samples, 0.08%)</title><rect x="324.6" y="691.0" width="1.0" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="327.6" y="702.0"></text>
</g>
<g>
<title>tcp_push (6 samples, 0.17%)</title><rect x="325.6" y="691.0" width="2.0" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="328.6" y="702.0"></text>
</g>
<g>
<title>tcp_release_cb (4 samples, 0.11%)</title><rect x="327.6" y="691.0" width="1.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="330.6" y="702.0"></text>
</g>
<g>
<title>tcp_send_mss (1 samples, 0.03%)</title><rect x="328.9" y="691.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="331.9" y="702.0"></text>
</g>
<g>
<title>tcp_sendmsg_locked (1,312 samples, 37.17%)</title><rect x="329.2" y="691.0" width="438.6" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="332.2" y="702.0">tcp_sendmsg_locked</text>
</g>
<g>
<title>__check_object_size (9 samples, 0.25%)</title><rect x="341.3" y="675.0" width="3.0" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="344.3" y="686.0"></text>
</g>
<g>
<title>__virt_addr_valid (6 samples, 0.17%)</title><rect x="342.3" y="659.0" width="2.0" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="345.3" y="670.0"></text>
</g>
<g>
<title>__tcp_push_pending_frames (3 samples, 0.08%)</title><rect x="344.3" y="675.0" width="1.0" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="347.3" y="686.0"></text>
</g>
<g>
<title>_copy_from_iter_full (9 samples, 0.25%)</title><rect x="345.3" y="675.0" width="3.0" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="348.3" y="686.0"></text>
</g>
<g>
<title>copy_user_enhanced_fast_string (6 samples, 0.17%)</title><rect x="345.3" y="659.0" width="2.0" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="348.3" y="670.0"></text>
</g>
<g>
<title>iov_iter_advance (3 samples, 0.08%)</title><rect x="347.3" y="659.0" width="1.0" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="350.3" y="670.0"></text>
</g>
<g>
<title>copyin (2 samples, 0.06%)</title><rect x="348.3" y="675.0" width="0.7" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="351.3" y="686.0"></text>
</g>
<g>
<title>sk_forced_mem_schedule (5 samples, 0.14%)</title><rect x="349.0" y="675.0" width="1.6" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="352.0" y="686.0"></text>
</g>
<g>
<title>sk_page_frag_refill (7 samples, 0.20%)</title><rect x="350.6" y="675.0" width="2.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="353.6" y="686.0"></text>
</g>
<g>
<title>skb_page_frag_refill (6 samples, 0.17%)</title><rect x="351.0" y="659.0" width="2.0" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="354.0" y="670.0"></text>
</g>
<g>
<title>sk_stream_alloc_skb (97 samples, 2.75%)</title><rect x="353.0" y="675.0" width="32.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="356.0" y="686.0">sk..</text>
</g>
<g>
<title>__alloc_skb (86 samples, 2.44%)</title><rect x="356.0" y="659.0" width="28.7" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="359.0" y="670.0">__..</text>
</g>
<g>
<title>__kmalloc_node_track_caller (5 samples, 0.14%)</title><rect x="357.3" y="643.0" width="1.7" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="360.3" y="654.0"></text>
</g>
<g>
<title>__kmalloc_reserve.isra.0 (31 samples, 0.88%)</title><rect x="359.0" y="643.0" width="10.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="362.0" y="654.0"></text>
</g>
<g>
<title>__kmalloc_node_track_caller (21 samples, 0.59%)</title><rect x="359.0" y="627.0" width="7.0" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="362.0" y="638.0"></text>
</g>
<g>
<title>__slab_alloc (4 samples, 0.11%)</title><rect x="364.0" y="611.0" width="1.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="367.0" y="622.0"></text>
</g>
<g>
<title>kmalloc_slab (1 samples, 0.03%)</title><rect x="365.3" y="611.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="368.3" y="622.0"></text>
</g>
<g>
<title>rcu_all_qs (1 samples, 0.03%)</title><rect x="365.7" y="611.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="368.7" y="622.0"></text>
</g>
<g>
<title>kmalloc_slab (1 samples, 0.03%)</title><rect x="366.0" y="627.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="369.0" y="638.0"></text>
</g>
<g>
<title>memcg_kmem_put_cache (1 samples, 0.03%)</title><rect x="366.3" y="627.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="369.3" y="638.0"></text>
</g>
<g>
<title>memset_erms (6 samples, 0.17%)</title><rect x="366.7" y="627.0" width="2.0" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="369.7" y="638.0"></text>
</g>
<g>
<title>should_failslab (2 samples, 0.06%)</title><rect x="368.7" y="627.0" width="0.6" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="371.7" y="638.0"></text>
</g>
<g>
<title>__ksize (2 samples, 0.06%)</title><rect x="369.3" y="643.0" width="0.7" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="372.3" y="654.0"></text>
</g>
<g>
<title>_cond_resched (1 samples, 0.03%)</title><rect x="370.0" y="643.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="373.0" y="654.0"></text>
</g>
<g>
<title>kmem_cache_alloc_node (28 samples, 0.79%)</title><rect x="370.4" y="643.0" width="9.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="373.4" y="654.0"></text>
</g>
<g>
<title>__slab_alloc (4 samples, 0.11%)</title><rect x="378.0" y="627.0" width="1.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="381.0" y="638.0"></text>
</g>
<g>
<title>___slab_alloc (1 samples, 0.03%)</title><rect x="379.0" y="611.0" width="0.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="382.0" y="622.0"></text>
</g>
<g>
<title>new_slab (1 samples, 0.03%)</title><rect x="379.0" y="595.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="382.0" y="606.0"></text>
</g>
<g>
<title>allocate_slab (1 samples, 0.03%)</title><rect x="379.0" y="579.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="382.0" y="590.0"></text>
</g>
<g>
<title>alloc_slab_page (1 samples, 0.03%)</title><rect x="379.0" y="563.0" width="0.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="382.0" y="574.0"></text>
</g>
<g>
<title>alloc_pages_current (1 samples, 0.03%)</title><rect x="379.0" y="547.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="382.0" y="558.0"></text>
</g>
<g>
<title>__alloc_pages_nodemask (1 samples, 0.03%)</title><rect x="379.0" y="531.0" width="0.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="382.0" y="542.0"></text>
</g>
<g>
<title>get_page_from_freelist (1 samples, 0.03%)</title><rect x="379.0" y="515.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="382.0" y="526.0"></text>
</g>
<g>
<title>_cond_resched (1 samples, 0.03%)</title><rect x="379.4" y="627.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="382.4" y="638.0"></text>
</g>
<g>
<title>ksize (8 samples, 0.23%)</title><rect x="379.7" y="643.0" width="2.7" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="382.7" y="654.0"></text>
</g>
<g>
<title>__ksize (8 samples, 0.23%)</title><rect x="379.7" y="627.0" width="2.7" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="382.7" y="638.0"></text>
</g>
<g>
<title>memcg_kmem_put_cache (2 samples, 0.06%)</title><rect x="382.4" y="643.0" width="0.7" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="385.4" y="654.0"></text>
</g>
<g>
<title>memset_erms (4 samples, 0.11%)</title><rect x="383.1" y="643.0" width="1.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="386.1" y="654.0"></text>
</g>
<g>
<title>should_failslab (1 samples, 0.03%)</title><rect x="384.4" y="643.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="387.4" y="654.0"></text>
</g>
<g>
<title>__kmalloc_reserve.isra.0 (1 samples, 0.03%)</title><rect x="384.7" y="659.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="387.7" y="670.0"></text>
</g>
<g>
<title>ksize (1 samples, 0.03%)</title><rect x="385.1" y="659.0" width="0.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="388.1" y="670.0"></text>
</g>
<g>
<title>skb_entail (9 samples, 0.25%)</title><rect x="385.4" y="675.0" width="3.0" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="388.4" y="686.0"></text>
</g>
<g>
<title>skb_page_frag_refill (5 samples, 0.14%)</title><rect x="388.4" y="675.0" width="1.7" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="391.4" y="686.0"></text>
</g>
<g>
<title>tcp_chrono_start (2 samples, 0.06%)</title><rect x="390.1" y="675.0" width="0.6" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="393.1" y="686.0"></text>
</g>
<g>
<title>tcp_push (1,109 samples, 31.42%)</title><rect x="390.7" y="675.0" width="370.8" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="393.7" y="686.0">tcp_push</text>
</g>
<g>
<title>__tcp_push_pending_frames (1,107 samples, 31.36%)</title><rect x="391.4" y="659.0" width="370.1" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="394.4" y="670.0">__tcp_push_pending_frames</text>
</g>
<g>
<title>__tcp_transmit_skb (1 samples, 0.03%)</title><rect x="391.7" y="643.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="394.7" y="654.0"></text>
</g>
<g>
<title>ktime_get (3 samples, 0.08%)</title><rect x="392.1" y="643.0" width="1.0" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="395.1" y="654.0"></text>
</g>
<g>
<title>tcp_chrono_stop (3 samples, 0.08%)</title><rect x="393.1" y="643.0" width="1.0" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="396.1" y="654.0"></text>
</g>
<g>
<title>tcp_mtu_probe (1 samples, 0.03%)</title><rect x="394.1" y="643.0" width="0.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="397.1" y="654.0"></text>
</g>
<g>
<title>tcp_schedule_loss_probe (3 samples, 0.08%)</title><rect x="394.4" y="643.0" width="1.0" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="397.4" y="654.0"></text>
</g>
<g>
<title>tcp_small_queue_check.isra.0 (2 samples, 0.06%)</title><rect x="395.4" y="643.0" width="0.7" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="398.4" y="654.0"></text>
</g>
<g>
<title>tcp_write_xmit (1,093 samples, 30.96%)</title><rect x="396.1" y="643.0" width="365.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="399.1" y="654.0">tcp_write_xmit</text>
</g>
<g>
<title>__tcp_select_window (3 samples, 0.08%)</title><rect x="402.4" y="627.0" width="1.0" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="405.4" y="638.0"></text>
</g>
<g>
<title>__tcp_transmit_skb (1,001 samples, 28.36%)</title><rect x="403.4" y="627.0" width="334.7" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="406.4" y="638.0">__tcp_transmit_skb</text>
</g>
<g>
<title>__ip_queue_xmit (4 samples, 0.11%)</title><rect x="409.5" y="611.0" width="1.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="412.5" y="622.0"></text>
</g>
<g>
<title>__skb_clone (2 samples, 0.06%)</title><rect x="410.8" y="611.0" width="0.7" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="413.8" y="622.0"></text>
</g>
<g>
<title>ip_queue_xmit (958 samples, 27.14%)</title><rect x="411.5" y="611.0" width="320.2" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="414.5" y="622.0">ip_queue_xmit</text>
</g>
<g>
<title>__ip_queue_xmit (943 samples, 26.71%)</title><rect x="412.8" y="595.0" width="315.2" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="415.8" y="606.0">__ip_queue_xmit</text>
</g>
<g>
<title>__ip_local_out (1 samples, 0.03%)</title><rect x="414.8" y="579.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="417.8" y="590.0"></text>
</g>
<g>
<title>__sk_dst_check (2 samples, 0.06%)</title><rect x="415.1" y="579.0" width="0.7" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="418.1" y="590.0"></text>
</g>
<g>
<title>ipv4_dst_check (2 samples, 0.06%)</title><rect x="415.1" y="563.0" width="0.7" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="418.1" y="574.0"></text>
</g>
<g>
<title>ip_local_out (929 samples, 26.32%)</title><rect x="415.8" y="579.0" width="310.6" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="418.8" y="590.0">ip_local_out</text>
</g>
<g>
<title>__ip_local_out (6 samples, 0.17%)</title><rect x="416.8" y="563.0" width="2.0" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="419.8" y="574.0"></text>
</g>
<g>
<title>ip_send_check (4 samples, 0.11%)</title><rect x="417.5" y="547.0" width="1.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="420.5" y="558.0"></text>
</g>
<g>
<title>ip_finish_output (2 samples, 0.06%)</title><rect x="418.8" y="563.0" width="0.7" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="421.8" y="574.0"></text>
</g>
<g>
<title>ip_output (913 samples, 25.86%)</title><rect x="419.5" y="563.0" width="305.2" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="422.5" y="574.0">ip_output</text>
</g>
<g>
<title>ip_finish_output (908 samples, 25.72%)</title><rect x="421.2" y="547.0" width="303.5" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="424.2" y="558.0">ip_finish_output</text>
</g>
<g>
<title>__cgroup_bpf_run_filter_skb (8 samples, 0.23%)</title><rect x="423.5" y="531.0" width="2.7" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="426.5" y="542.0"></text>
</g>
<g>
<title>__ip_finish_output (892 samples, 25.27%)</title><rect x="426.2" y="531.0" width="298.2" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="429.2" y="542.0">__ip_finish_output</text>
</g>
<g>
<title>__local_bh_enable_ip (2 samples, 0.06%)</title><rect x="429.5" y="515.0" width="0.7" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="432.5" y="526.0"></text>
</g>
<g>
<title>ip_finish_output2 (880 samples, 24.93%)</title><rect x="430.2" y="515.0" width="294.2" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="433.2" y="526.0">ip_finish_output2</text>
</g>
<g>
<title>__dev_queue_xmit (1 samples, 0.03%)</title><rect x="439.2" y="499.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="442.2" y="510.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (753 samples, 21.33%)</title><rect x="439.5" y="499.0" width="251.8" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="442.5" y="510.0">__local_bh_enable_ip</text>
</g>
<g>
<title>do_softirq.part.0 (753 samples, 21.33%)</title><rect x="439.5" y="483.0" width="251.8" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="442.5" y="494.0">do_softirq.part.0</text>
</g>
<g>
<title>do_softirq_own_stack (744 samples, 21.08%)</title><rect x="442.6" y="467.0" width="248.7" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="445.6" y="478.0">do_softirq_own_stack</text>
</g>
<g>
<title>__softirqentry_text_start (742 samples, 21.02%)</title><rect x="442.6" y="451.0" width="248.0" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="445.6" y="462.0">__softirqentry_text_start</text>
</g>
<g>
<title>__kfree_skb_flush (1 samples, 0.03%)</title><rect x="447.9" y="435.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="450.9" y="446.0"></text>
</g>
<g>
<title>__usecs_to_jiffies (1 samples, 0.03%)</title><rect x="448.2" y="435.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="451.2" y="446.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_rax (1 samples, 0.03%)</title><rect x="448.6" y="435.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="451.6" y="446.0"></text>
</g>
<g>
<title>net_rx_action (720 samples, 20.40%)</title><rect x="448.9" y="435.0" width="240.7" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="451.9" y="446.0">net_rx_action</text>
</g>
<g>
<title>__netif_receive_skb (1 samples, 0.03%)</title><rect x="451.2" y="419.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="454.2" y="430.0"></text>
</g>
<g>
<title>process_backlog (712 samples, 20.17%)</title><rect x="451.6" y="419.0" width="238.0" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="454.6" y="430.0">process_backlog</text>
</g>
<g>
<title>__netif_receive_skb (702 samples, 19.89%)</title><rect x="454.9" y="403.0" width="234.7" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="457.9" y="414.0">__netif_receive_skb</text>
</g>
<g>
<title>__netif_receive_skb_core (1 samples, 0.03%)</title><rect x="455.9" y="387.0" width="0.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="458.9" y="398.0"></text>
</g>
<g>
<title>__netif_receive_skb_one_core (697 samples, 19.75%)</title><rect x="456.3" y="387.0" width="233.0" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="459.3" y="398.0">__netif_receive_skb_one_core</text>
</g>
<g>
<title>__netif_receive_skb_core (15 samples, 0.42%)</title><rect x="457.6" y="371.0" width="5.0" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="460.6" y="382.0"></text>
</g>
<g>
<title>ip_rcv (676 samples, 19.15%)</title><rect x="462.6" y="371.0" width="226.0" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="465.6" y="382.0">ip_rcv</text>
</g>
<g>
<title>ip_local_deliver (2 samples, 0.06%)</title><rect x="463.6" y="355.0" width="0.7" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="466.6" y="366.0"></text>
</g>
<g>
<title>ip_rcv_core.isra.0 (10 samples, 0.28%)</title><rect x="464.3" y="355.0" width="3.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="467.3" y="366.0"></text>
</g>
<g>
<title>ip_rcv_finish (661 samples, 18.73%)</title><rect x="467.6" y="355.0" width="221.0" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="470.6" y="366.0">ip_rcv_finish</text>
</g>
<g>
<title>ip_local_deliver (652 samples, 18.47%)</title><rect x="468.3" y="339.0" width="217.9" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="471.3" y="350.0">ip_local_deliver</text>
</g>
<g>
<title>ip_local_deliver_finish (652 samples, 18.47%)</title><rect x="468.3" y="323.0" width="217.9" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="471.3" y="334.0">ip_local_deliver_finish</text>
</g>
<g>
<title>ip_protocol_deliver_rcu (650 samples, 18.41%)</title><rect x="468.6" y="307.0" width="217.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="471.6" y="318.0">ip_protocol_deliver_rcu</text>
</g>
<g>
<title>__inet_lookup_established (3 samples, 0.08%)</title><rect x="473.0" y="291.0" width="1.0" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="476.0" y="302.0"></text>
</g>
<g>
<title>_raw_spin_lock (1 samples, 0.03%)</title><rect x="474.0" y="291.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="477.0" y="302.0"></text>
</g>
<g>
<title>raw_local_deliver (3 samples, 0.08%)</title><rect x="474.3" y="291.0" width="1.0" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="477.3" y="302.0"></text>
</g>
<g>
<title>sock_put (3 samples, 0.08%)</title><rect x="475.3" y="291.0" width="1.0" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="478.3" y="302.0"></text>
</g>
<g>
<title>tcp_v4_fill_cb (3 samples, 0.08%)</title><rect x="476.3" y="291.0" width="1.0" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="479.3" y="302.0"></text>
</g>
<g>
<title>tcp_v4_rcv (624 samples, 17.68%)</title><rect x="477.3" y="291.0" width="208.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="480.3" y="302.0">tcp_v4_rcv</text>
</g>
<g>
<title>__cgroup_bpf_run_filter_skb (3 samples, 0.08%)</title><rect x="484.7" y="275.0" width="1.0" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="487.7" y="286.0"></text>
</g>
<g>
<title>__inet_lookup_established (13 samples, 0.37%)</title><rect x="485.7" y="275.0" width="4.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="488.7" y="286.0"></text>
</g>
<g>
<title>inet_ehashfn (2 samples, 0.06%)</title><rect x="489.4" y="259.0" width="0.6" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="492.4" y="270.0"></text>
</g>
<g>
<title>inet_ehashfn (1 samples, 0.03%)</title><rect x="490.0" y="275.0" width="0.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="493.0" y="286.0"></text>
</g>
<g>
<title>ipv4_dst_check (1 samples, 0.03%)</title><rect x="490.4" y="275.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="493.4" y="286.0"></text>
</g>
<g>
<title>sk_filter_trim_cap (11 samples, 0.31%)</title><rect x="490.7" y="275.0" width="3.7" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="493.7" y="286.0"></text>
</g>
<g>
<title>__cgroup_bpf_run_filter_skb (6 samples, 0.17%)</title><rect x="491.0" y="259.0" width="2.0" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="494.0" y="270.0"></text>
</g>
<g>
<title>apparmor_socket_sock_rcv_skb (1 samples, 0.03%)</title><rect x="493.0" y="259.0" width="0.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="496.0" y="270.0"></text>
</g>
<g>
<title>security_sock_rcv_skb (3 samples, 0.08%)</title><rect x="493.4" y="259.0" width="1.0" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="496.4" y="270.0"></text>
</g>
<g>
<title>tcp_rcv_established (2 samples, 0.06%)</title><rect x="494.4" y="275.0" width="0.6" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="497.4" y="286.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (566 samples, 16.03%)</title><rect x="495.0" y="275.0" width="189.2" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="498.0" y="286.0">tcp_v4_do_rcv</text>
</g>
<g>
<title>ktime_get_seconds (2 samples, 0.06%)</title><rect x="497.4" y="259.0" width="0.6" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="500.4" y="270.0"></text>
</g>
<g>
<title>tcp_check_space (14 samples, 0.40%)</title><rect x="498.0" y="259.0" width="4.7" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="501.0" y="270.0"></text>
</g>
<g>
<title>tcp_data_ready (3 samples, 0.08%)</title><rect x="502.7" y="259.0" width="1.0" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="505.7" y="270.0"></text>
</g>
<g>
<title>tcp_event_data_recv (2 samples, 0.06%)</title><rect x="503.7" y="259.0" width="0.7" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="506.7" y="270.0"></text>
</g>
<g>
<title>tcp_rcv_established (538 samples, 15.24%)</title><rect x="504.4" y="259.0" width="179.8" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="507.4" y="270.0">tcp_rcv_established</text>
</g>
<g>
<title>__tcp_ack_snd_check (41 samples, 1.16%)</title><rect x="510.7" y="243.0" width="13.8" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="513.7" y="254.0"></text>
</g>
<g>
<title>__usecs_to_jiffies (1 samples, 0.03%)</title><rect x="511.8" y="227.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="514.8" y="238.0"></text>
</g>
<g>
<title>tcp_send_delayed_ack (37 samples, 1.05%)</title><rect x="512.1" y="227.0" width="12.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="515.1" y="238.0"></text>
</g>
<g>
<title>mod_timer (1 samples, 0.03%)</title><rect x="512.4" y="211.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="515.4" y="222.0"></text>
</g>
<g>
<title>sk_reset_timer (35 samples, 0.99%)</title><rect x="512.8" y="211.0" width="11.7" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="515.8" y="222.0"></text>
</g>
<g>
<title>lock_timer_base (2 samples, 0.06%)</title><rect x="512.8" y="195.0" width="0.6" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="515.8" y="206.0"></text>
</g>
<g>
<title>mod_timer (33 samples, 0.93%)</title><rect x="513.4" y="195.0" width="11.1" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="516.4" y="206.0"></text>
</g>
<g>
<title>__lock_text_start (27 samples, 0.76%)</title><rect x="514.4" y="179.0" width="9.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="517.4" y="190.0"></text>
</g>
<g>
<title>_raw_spin_lock_irqsave (1 samples, 0.03%)</title><rect x="523.5" y="179.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="526.5" y="190.0"></text>
</g>
<g>
<title>lock_timer_base (2 samples, 0.06%)</title><rect x="523.8" y="179.0" width="0.7" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="526.8" y="190.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_rax (2 samples, 0.06%)</title><rect x="524.5" y="243.0" width="0.6" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="527.5" y="254.0"></text>
</g>
<g>
<title>bictcp_cong_avoid (1 samples, 0.03%)</title><rect x="525.1" y="243.0" width="0.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="528.1" y="254.0"></text>
</g>
<g>
<title>ktime_get (1 samples, 0.03%)</title><rect x="525.5" y="243.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="528.5" y="254.0"></text>
</g>
<g>
<title>ktime_get_seconds (4 samples, 0.11%)</title><rect x="525.8" y="243.0" width="1.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="528.8" y="254.0"></text>
</g>
<g>
<title>sock_def_readable (4 samples, 0.11%)</title><rect x="527.1" y="243.0" width="1.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="530.1" y="254.0"></text>
</g>
<g>
<title>tcp_ack (151 samples, 4.28%)</title><rect x="528.5" y="243.0" width="50.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="531.5" y="254.0">tcp_ack</text>
</g>
<g>
<title>__kfree_skb (2 samples, 0.06%)</title><rect x="539.2" y="227.0" width="0.6" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="542.2" y="238.0"></text>
</g>
<g>
<title>bictcp_acked (2 samples, 0.06%)</title><rect x="539.8" y="227.0" width="0.7" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="542.8" y="238.0"></text>
</g>
<g>
<title>bictcp_cong_avoid (1 samples, 0.03%)</title><rect x="540.5" y="227.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="543.5" y="238.0"></text>
</g>
<g>
<title>rb_first (3 samples, 0.08%)</title><rect x="540.8" y="227.0" width="1.0" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="543.8" y="238.0"></text>
</g>
<g>
<title>rb_next (5 samples, 0.14%)</title><rect x="541.8" y="227.0" width="1.7" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="544.8" y="238.0"></text>
</g>
<g>
<title>tcp_chrono_stop (1 samples, 0.03%)</title><rect x="543.5" y="227.0" width="0.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="546.5" y="238.0"></text>
</g>
<g>
<title>tcp_clean_rtx_queue (79 samples, 2.24%)</title><rect x="543.8" y="227.0" width="26.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="546.8" y="238.0">t..</text>
</g>
<g>
<title>__kfree_skb (34 samples, 0.96%)</title><rect x="552.5" y="211.0" width="11.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="555.5" y="222.0"></text>
</g>
<g>
<title>kfree_skbmem (16 samples, 0.45%)</title><rect x="552.9" y="195.0" width="5.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="555.9" y="206.0"></text>
</g>
<g>
<title>kmem_cache_free (10 samples, 0.28%)</title><rect x="554.9" y="179.0" width="3.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="557.9" y="190.0"></text>
</g>
<g>
<title>__slab_free (4 samples, 0.11%)</title><rect x="556.9" y="163.0" width="1.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="559.9" y="174.0"></text>
</g>
<g>
<title>skb_release_all (14 samples, 0.40%)</title><rect x="558.2" y="195.0" width="4.7" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="561.2" y="206.0"></text>
</g>
<g>
<title>skb_release_data (13 samples, 0.37%)</title><rect x="558.2" y="179.0" width="4.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="561.2" y="190.0"></text>
</g>
<g>
<title>kfree (1 samples, 0.03%)</title><rect x="559.2" y="163.0" width="0.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="562.2" y="174.0"></text>
</g>
<g>
<title>skb_free_head (9 samples, 0.25%)</title><rect x="559.6" y="163.0" width="3.0" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="562.6" y="174.0"></text>
</g>
<g>
<title>kfree (9 samples, 0.25%)</title><rect x="559.6" y="147.0" width="3.0" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="562.6" y="158.0"></text>
</g>
<g>
<title>__slab_free (6 samples, 0.17%)</title><rect x="560.6" y="131.0" width="2.0" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="563.6" y="142.0"></text>
</g>
<g>
<title>skb_release_head_state (1 samples, 0.03%)</title><rect x="562.6" y="179.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="565.6" y="190.0"></text>
</g>
<g>
<title>skb_release_head_state (3 samples, 0.08%)</title><rect x="562.9" y="195.0" width="1.0" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="565.9" y="206.0"></text>
</g>
<g>
<title>__usecs_to_jiffies (2 samples, 0.06%)</title><rect x="563.9" y="211.0" width="0.7" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="566.9" y="222.0"></text>
</g>
<g>
<title>bictcp_acked (4 samples, 0.11%)</title><rect x="564.6" y="211.0" width="1.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="567.6" y="222.0"></text>
</g>
<g>
<title>jiffies_to_usecs (1 samples, 0.03%)</title><rect x="565.9" y="211.0" width="0.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="568.9" y="222.0"></text>
</g>
<g>
<title>kfree_skbmem (2 samples, 0.06%)</title><rect x="566.2" y="211.0" width="0.7" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="569.2" y="222.0"></text>
</g>
<g>
<title>tcp_ack_update_rtt.isra.0 (6 samples, 0.17%)</title><rect x="566.9" y="211.0" width="2.0" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="569.9" y="222.0"></text>
</g>
<g>
<title>tcp_chrono_stop (2 samples, 0.06%)</title><rect x="568.9" y="211.0" width="0.7" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="571.9" y="222.0"></text>
</g>
<g>
<title>tcp_rate_skb_delivered (2 samples, 0.06%)</title><rect x="569.6" y="211.0" width="0.6" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="572.6" y="222.0"></text>
</g>
<g>
<title>tcp_newly_delivered (6 samples, 0.17%)</title><rect x="570.2" y="227.0" width="2.1" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="573.2" y="238.0"></text>
</g>
<g>
<title>tcp_rack_advance (1 samples, 0.03%)</title><rect x="572.3" y="227.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="575.3" y="238.0"></text>
</g>
<g>
<title>tcp_rack_update_reo_wnd (2 samples, 0.06%)</title><rect x="572.6" y="227.0" width="0.7" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="575.6" y="238.0"></text>
</g>
<g>
<title>tcp_rate_gen (6 samples, 0.17%)</title><rect x="573.3" y="227.0" width="2.0" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="576.3" y="238.0"></text>
</g>
<g>
<title>tcp_rate_skb_delivered (2 samples, 0.06%)</title><rect x="575.3" y="227.0" width="0.6" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="578.3" y="238.0"></text>
</g>
<g>
<title>tcp_rearm_rto (3 samples, 0.08%)</title><rect x="575.9" y="227.0" width="1.0" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="578.9" y="238.0"></text>
</g>
<g>
<title>tcp_schedule_loss_probe (3 samples, 0.08%)</title><rect x="576.9" y="227.0" width="1.0" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="579.9" y="238.0"></text>
</g>
<g>
<title>tcp_update_pacing_rate (3 samples, 0.08%)</title><rect x="577.9" y="227.0" width="1.0" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="580.9" y="238.0"></text>
</g>
<g>
<title>tcp_clean_rtx_queue (1 samples, 0.03%)</title><rect x="578.9" y="243.0" width="0.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="581.9" y="254.0"></text>
</g>
<g>
<title>tcp_data_ready (283 samples, 8.02%)</title><rect x="579.3" y="243.0" width="94.6" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="582.3" y="254.0">tcp_data_re..</text>
</g>
<g>
<title>sock_def_readable (282 samples, 7.99%)</title><rect x="579.6" y="227.0" width="94.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="582.6" y="238.0">sock_def_re..</text>
</g>
<g>
<title>__wake_up_common_lock (1 samples, 0.03%)</title><rect x="582.3" y="211.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="585.3" y="222.0"></text>
</g>
<g>
<title>__wake_up_sync_key (273 samples, 7.73%)</title><rect x="582.6" y="211.0" width="91.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="585.6" y="222.0">__wake_up_s..</text>
</g>
<g>
<title>__lock_text_start (1 samples, 0.03%)</title><rect x="582.6" y="195.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="585.6" y="206.0"></text>
</g>
<g>
<title>__wake_up_common_lock (272 samples, 7.71%)</title><rect x="583.0" y="195.0" width="90.9" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="586.0" y="206.0">__wake_up_..</text>
</g>
<g>
<title>__lock_text_start (271 samples, 7.68%)</title><rect x="583.3" y="179.0" width="90.6" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="586.3" y="190.0">__lock_tex..</text>
</g>
<g>
<title>tcp_event_data_recv (14 samples, 0.40%)</title><rect x="673.9" y="243.0" width="4.7" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="676.9" y="254.0"></text>
</g>
<g>
<title>tcp_mstamp_refresh (3 samples, 0.08%)</title><rect x="678.6" y="243.0" width="1.0" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="681.6" y="254.0"></text>
</g>
<g>
<title>read_tsc (1 samples, 0.03%)</title><rect x="679.2" y="227.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="682.2" y="238.0"></text>
</g>
<g>
<title>tcp_newly_delivered (1 samples, 0.03%)</title><rect x="679.6" y="243.0" width="0.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="682.6" y="254.0"></text>
</g>
<g>
<title>tcp_queue_rcv (4 samples, 0.11%)</title><rect x="679.9" y="243.0" width="1.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="682.9" y="254.0"></text>
</g>
<g>
<title>tcp_rack_update_reo_wnd (1 samples, 0.03%)</title><rect x="681.2" y="243.0" width="0.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="684.2" y="254.0"></text>
</g>
<g>
<title>tcp_rearm_rto (3 samples, 0.08%)</title><rect x="681.6" y="243.0" width="1.0" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="684.6" y="254.0"></text>
</g>
<g>
<title>tcp_schedule_loss_probe (2 samples, 0.06%)</title><rect x="682.6" y="243.0" width="0.6" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="685.6" y="254.0"></text>
</g>
<g>
<title>tcp_send_delayed_ack (3 samples, 0.08%)</title><rect x="683.2" y="243.0" width="1.0" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="686.2" y="254.0"></text>
</g>
<g>
<title>tcp_v4_fill_cb (3 samples, 0.08%)</title><rect x="684.2" y="275.0" width="1.0" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="687.2" y="286.0"></text>
</g>
<g>
<title>tcp_v4_inbound_md5_hash (2 samples, 0.06%)</title><rect x="685.2" y="275.0" width="0.7" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="688.2" y="286.0"></text>
</g>
<g>
<title>raw_local_deliver (1 samples, 0.03%)</title><rect x="685.9" y="307.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="688.9" y="318.0"></text>
</g>
<g>
<title>ip_local_deliver_finish (3 samples, 0.08%)</title><rect x="686.2" y="339.0" width="1.0" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="689.2" y="350.0"></text>
</g>
<g>
<title>ip_rcv_finish_core.isra.0 (4 samples, 0.11%)</title><rect x="687.2" y="339.0" width="1.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="690.2" y="350.0"></text>
</g>
<g>
<title>ip_rcv_finish (2 samples, 0.06%)</title><rect x="688.6" y="371.0" width="0.7" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="691.6" y="382.0"></text>
</g>
<g>
<title>ip_rcv (1 samples, 0.03%)</title><rect x="689.3" y="387.0" width="0.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="692.3" y="398.0"></text>
</g>
<g>
<title>process_backlog (3 samples, 0.08%)</title><rect x="689.6" y="435.0" width="1.0" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="692.6" y="446.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_rax (1 samples, 0.03%)</title><rect x="690.6" y="451.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="693.6" y="462.0"></text>
</g>
<g>
<title>net_rx_action (1 samples, 0.03%)</title><rect x="690.9" y="451.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="693.9" y="462.0"></text>
</g>
<g>
<title>dev_queue_xmit (99 samples, 2.80%)</title><rect x="691.3" y="499.0" width="33.1" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="694.3" y="510.0">de..</text>
</g>
<g>
<title>__dev_queue_xmit (96 samples, 2.72%)</title><rect x="691.3" y="483.0" width="32.0" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="694.3" y="494.0">__..</text>
</g>
<g>
<title>dev_hard_start_xmit (46 samples, 1.30%)</title><rect x="698.3" y="467.0" width="15.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="701.3" y="478.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_rax (2 samples, 0.06%)</title><rect x="699.3" y="451.0" width="0.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="702.3" y="462.0"></text>
</g>
<g>
<title>eth_type_trans (5 samples, 0.14%)</title><rect x="699.9" y="451.0" width="1.7" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="702.9" y="462.0"></text>
</g>
<g>
<title>loopback_xmit (27 samples, 0.76%)</title><rect x="701.6" y="451.0" width="9.0" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="704.6" y="462.0"></text>
</g>
<g>
<title>eth_type_trans (2 samples, 0.06%)</title><rect x="703.0" y="435.0" width="0.6" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="706.0" y="446.0"></text>
</g>
<g>
<title>netif_rx (12 samples, 0.34%)</title><rect x="703.6" y="435.0" width="4.0" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="706.6" y="446.0"></text>
</g>
<g>
<title>enqueue_to_backlog (1 samples, 0.03%)</title><rect x="703.6" y="419.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="706.6" y="430.0"></text>
</g>
<g>
<title>netif_rx_internal (11 samples, 0.31%)</title><rect x="704.0" y="419.0" width="3.6" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="707.0" y="430.0"></text>
</g>
<g>
<title>enqueue_to_backlog (11 samples, 0.31%)</title><rect x="704.0" y="403.0" width="3.6" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="707.0" y="414.0"></text>
</g>
<g>
<title>netif_rx_internal (3 samples, 0.08%)</title><rect x="707.6" y="435.0" width="1.0" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="710.6" y="446.0"></text>
</g>
<g>
<title>sk_free (4 samples, 0.11%)</title><rect x="708.6" y="435.0" width="1.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="711.6" y="446.0"></text>
</g>
<g>
<title>tcp_wfree (2 samples, 0.06%)</title><rect x="710.0" y="435.0" width="0.6" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="713.0" y="446.0"></text>
</g>
<g>
<title>netif_rx (1 samples, 0.03%)</title><rect x="710.6" y="451.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="713.6" y="462.0"></text>
</g>
<g>
<title>skb_clone_tx_timestamp (4 samples, 0.11%)</title><rect x="711.0" y="451.0" width="1.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="714.0" y="462.0"></text>
</g>
<g>
<title>tcp_wfree (4 samples, 0.11%)</title><rect x="712.3" y="451.0" width="1.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="715.3" y="462.0"></text>
</g>
<g>
<title>loopback_xmit (4 samples, 0.11%)</title><rect x="713.7" y="467.0" width="1.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="716.7" y="478.0"></text>
</g>
<g>
<title>netdev_core_pick_tx (4 samples, 0.11%)</title><rect x="715.0" y="467.0" width="1.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="718.0" y="478.0"></text>
</g>
<g>
<title>skb_csum_hwoffload_help (1 samples, 0.03%)</title><rect x="716.3" y="467.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="719.3" y="478.0"></text>
</g>
<g>
<title>validate_xmit_skb (20 samples, 0.57%)</title><rect x="716.7" y="467.0" width="6.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="719.7" y="478.0"></text>
</g>
<g>
<title>netif_skb_features (7 samples, 0.20%)</title><rect x="719.0" y="451.0" width="2.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="722.0" y="462.0"></text>
</g>
<g>
<title>skb_network_protocol (2 samples, 0.06%)</title><rect x="720.7" y="435.0" width="0.6" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="723.7" y="446.0"></text>
</g>
<g>
<title>skb_network_protocol (2 samples, 0.06%)</title><rect x="721.3" y="451.0" width="0.7" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="724.3" y="462.0"></text>
</g>
<g>
<title>validate_xmit_xfrm (4 samples, 0.11%)</title><rect x="722.0" y="451.0" width="1.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="725.0" y="462.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (3 samples, 0.08%)</title><rect x="723.3" y="483.0" width="1.1" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="726.3" y="494.0"></text>
</g>
<g>
<title>ipv4_mtu (1 samples, 0.03%)</title><rect x="724.4" y="531.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="727.4" y="542.0"></text>
</g>
<g>
<title>ip_send_check (5 samples, 0.14%)</title><rect x="724.7" y="563.0" width="1.7" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="727.7" y="574.0"></text>
</g>
<g>
<title>ip_output (1 samples, 0.03%)</title><rect x="726.4" y="579.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="729.4" y="590.0"></text>
</g>
<g>
<title>ipv4_dst_check (3 samples, 0.08%)</title><rect x="726.7" y="579.0" width="1.0" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="729.7" y="590.0"></text>
</g>
<g>
<title>skb_push (1 samples, 0.03%)</title><rect x="727.7" y="579.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="730.7" y="590.0"></text>
</g>
<g>
<title>__sk_dst_check (3 samples, 0.08%)</title><rect x="728.0" y="595.0" width="1.0" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="731.0" y="606.0"></text>
</g>
<g>
<title>ip_copy_addrs (8 samples, 0.23%)</title><rect x="729.0" y="595.0" width="2.7" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="732.0" y="606.0"></text>
</g>
<g>
<title>skb_clone (12 samples, 0.34%)</title><rect x="731.7" y="611.0" width="4.0" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="734.7" y="622.0"></text>
</g>
<g>
<title>__copy_skb_header (4 samples, 0.11%)</title><rect x="732.7" y="595.0" width="1.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="735.7" y="606.0"></text>
</g>
<g>
<title>__skb_clone (5 samples, 0.14%)</title><rect x="734.0" y="595.0" width="1.7" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="737.0" y="606.0"></text>
</g>
<g>
<title>tcp_options_write (2 samples, 0.06%)</title><rect x="735.7" y="611.0" width="0.7" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="738.7" y="622.0"></text>
</g>
<g>
<title>tcp_rate_skb_sent (3 samples, 0.08%)</title><rect x="736.4" y="611.0" width="1.0" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="739.4" y="622.0"></text>
</g>
<g>
<title>tcp_update_skb_after_send (1 samples, 0.03%)</title><rect x="737.4" y="611.0" width="0.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="740.4" y="622.0"></text>
</g>
<g>
<title>tcp_v4_send_check (1 samples, 0.03%)</title><rect x="737.7" y="611.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="740.7" y="622.0"></text>
</g>
<g>
<title>__tcp_v4_send_check (1 samples, 0.03%)</title><rect x="737.7" y="595.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="740.7" y="606.0"></text>
</g>
<g>
<title>__usecs_to_jiffies (2 samples, 0.06%)</title><rect x="738.1" y="627.0" width="0.6" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="741.1" y="638.0"></text>
</g>
<g>
<title>bictcp_cwnd_event (3 samples, 0.08%)</title><rect x="738.7" y="627.0" width="1.0" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="741.7" y="638.0"></text>
</g>
<g>
<title>ip_queue_xmit (2 samples, 0.06%)</title><rect x="739.7" y="627.0" width="0.7" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="742.7" y="638.0"></text>
</g>
<g>
<title>ktime_get (4 samples, 0.11%)</title><rect x="740.4" y="627.0" width="1.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="743.4" y="638.0"></text>
</g>
<g>
<title>read_tsc (4 samples, 0.11%)</title><rect x="741.7" y="627.0" width="1.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="744.7" y="638.0"></text>
</g>
<g>
<title>skb_clone (2 samples, 0.06%)</title><rect x="743.1" y="627.0" width="0.6" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="746.1" y="638.0"></text>
</g>
<g>
<title>tcp_event_new_data_sent (23 samples, 0.65%)</title><rect x="743.7" y="627.0" width="7.7" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="746.7" y="638.0"></text>
</g>
<g>
<title>tcp_rbtree_insert (1 samples, 0.03%)</title><rect x="745.4" y="611.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="748.4" y="622.0"></text>
</g>
<g>
<title>tcp_rearm_rto (17 samples, 0.48%)</title><rect x="745.7" y="611.0" width="5.7" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="748.7" y="622.0"></text>
</g>
<g>
<title>sk_reset_timer (15 samples, 0.42%)</title><rect x="746.4" y="595.0" width="5.0" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="749.4" y="606.0"></text>
</g>
<g>
<title>mod_timer (15 samples, 0.42%)</title><rect x="746.4" y="579.0" width="5.0" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="749.4" y="590.0"></text>
</g>
<g>
<title>__lock_text_start (10 samples, 0.28%)</title><rect x="747.4" y="563.0" width="3.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="750.4" y="574.0"></text>
</g>
<g>
<title>_raw_spin_lock_irqsave (1 samples, 0.03%)</title><rect x="750.8" y="563.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="753.8" y="574.0"></text>
</g>
<g>
<title>lock_timer_base (1 samples, 0.03%)</title><rect x="751.1" y="563.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="754.1" y="574.0"></text>
</g>
<g>
<title>_raw_spin_lock_irqsave (1 samples, 0.03%)</title><rect x="751.1" y="547.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="754.1" y="558.0"></text>
</g>
<g>
<title>tcp_mtu_probe (3 samples, 0.08%)</title><rect x="751.4" y="627.0" width="1.0" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="754.4" y="638.0"></text>
</g>
<g>
<title>apic_timer_interrupt (1 samples, 0.03%)</title><rect x="752.1" y="611.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="755.1" y="622.0"></text>
</g>
<g>
<title>smp_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="752.1" y="595.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="755.1" y="606.0"></text>
</g>
<g>
<title>irq_exit (1 samples, 0.03%)</title><rect x="752.1" y="579.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="755.1" y="590.0"></text>
</g>
<g>
<title>__softirqentry_text_start (1 samples, 0.03%)</title><rect x="752.1" y="563.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="755.1" y="574.0"></text>
</g>
<g>
<title>run_rebalance_domains (1 samples, 0.03%)</title><rect x="752.1" y="547.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="755.1" y="558.0"></text>
</g>
<g>
<title>update_blocked_averages (1 samples, 0.03%)</title><rect x="752.1" y="531.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="755.1" y="542.0"></text>
</g>
<g>
<title>__lock_text_start (1 samples, 0.03%)</title><rect x="752.1" y="515.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="755.1" y="526.0"></text>
</g>
<g>
<title>tcp_options_write (3 samples, 0.08%)</title><rect x="752.4" y="627.0" width="1.0" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="755.4" y="638.0"></text>
</g>
<g>
<title>tcp_rearm_rto (3 samples, 0.08%)</title><rect x="753.4" y="627.0" width="1.0" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="756.4" y="638.0"></text>
</g>
<g>
<title>tcp_schedule_loss_probe (11 samples, 0.31%)</title><rect x="754.4" y="627.0" width="3.7" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="757.4" y="638.0"></text>
</g>
<g>
<title>mod_timer (1 samples, 0.03%)</title><rect x="756.4" y="611.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="759.4" y="622.0"></text>
</g>
<g>
<title>sk_reset_timer (4 samples, 0.11%)</title><rect x="756.8" y="611.0" width="1.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="759.8" y="622.0"></text>
</g>
<g>
<title>mod_timer (2 samples, 0.06%)</title><rect x="757.4" y="595.0" width="0.7" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="760.4" y="606.0"></text>
</g>
<g>
<title>tcp_small_queue_check.isra.0 (1 samples, 0.03%)</title><rect x="758.1" y="627.0" width="0.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="761.1" y="638.0"></text>
</g>
<g>
<title>tcp_update_skb_after_send (2 samples, 0.06%)</title><rect x="758.4" y="627.0" width="0.7" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="761.4" y="638.0"></text>
</g>
<g>
<title>tcp_v4_send_check (7 samples, 0.20%)</title><rect x="759.1" y="627.0" width="2.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="762.1" y="638.0"></text>
</g>
<g>
<title>tcp_rate_check_app_limited (1 samples, 0.03%)</title><rect x="761.5" y="675.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="764.5" y="686.0"></text>
</g>
<g>
<title>tcp_send_mss (17 samples, 0.48%)</title><rect x="761.8" y="675.0" width="5.7" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="764.8" y="686.0"></text>
</g>
<g>
<title>ipv4_mtu (6 samples, 0.17%)</title><rect x="763.1" y="659.0" width="2.0" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="766.1" y="670.0"></text>
</g>
<g>
<title>tcp_current_mss (7 samples, 0.20%)</title><rect x="765.1" y="659.0" width="2.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="768.1" y="670.0"></text>
</g>
<g>
<title>ipv4_mtu (2 samples, 0.06%)</title><rect x="766.5" y="643.0" width="0.6" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="769.5" y="654.0"></text>
</g>
<g>
<title>tcp_established_options (1 samples, 0.03%)</title><rect x="767.1" y="643.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="770.1" y="654.0"></text>
</g>
<g>
<title>tcp_tx_timestamp (1 samples, 0.03%)</title><rect x="767.5" y="675.0" width="0.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="770.5" y="686.0"></text>
</g>
<g>
<title>tcp_stream_memory_free (7 samples, 0.20%)</title><rect x="767.8" y="691.0" width="2.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="770.8" y="702.0"></text>
</g>
<g>
<title>tcp_tx_timestamp (3 samples, 0.08%)</title><rect x="770.1" y="691.0" width="1.1" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="773.1" y="702.0"></text>
</g>
<g>
<title>tcp_sendmsg_locked (5 samples, 0.14%)</title><rect x="771.2" y="707.0" width="1.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="774.2" y="718.0"></text>
</g>
<g>
<title>security_socket_sendmsg (12 samples, 0.34%)</title><rect x="772.8" y="723.0" width="4.0" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="775.8" y="734.0"></text>
</g>
<g>
<title>apparmor_socket_sendmsg (8 samples, 0.23%)</title><rect x="774.2" y="707.0" width="2.6" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="777.2" y="718.0"></text>
</g>
<g>
<title>_cond_resched (1 samples, 0.03%)</title><rect x="774.2" y="691.0" width="0.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="777.2" y="702.0"></text>
</g>
<g>
<title>aa_sk_perm (7 samples, 0.20%)</title><rect x="774.5" y="691.0" width="2.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="777.5" y="702.0"></text>
</g>
<g>
<title>rcu_all_qs (1 samples, 0.03%)</title><rect x="776.5" y="675.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="779.5" y="686.0"></text>
</g>
<g>
<title>sockfd_lookup_light (11 samples, 0.31%)</title><rect x="776.8" y="739.0" width="3.7" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="779.8" y="750.0"></text>
</g>
<g>
<title>__fdget (4 samples, 0.11%)</title><rect x="777.5" y="723.0" width="1.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="780.5" y="734.0"></text>
</g>
<g>
<title>__fget_light (4 samples, 0.11%)</title><rect x="777.5" y="707.0" width="1.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="780.5" y="718.0"></text>
</g>
<g>
<title>__fget (4 samples, 0.11%)</title><rect x="777.5" y="691.0" width="1.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="780.5" y="702.0"></text>
</g>
<g>
<title>__fget_light (5 samples, 0.14%)</title><rect x="778.8" y="723.0" width="1.7" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="781.8" y="734.0"></text>
</g>
<g>
<title>fput (2 samples, 0.06%)</title><rect x="780.5" y="755.0" width="0.7" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="783.5" y="766.0"></text>
</g>
<g>
<title>import_single_range (1 samples, 0.03%)</title><rect x="781.2" y="755.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="784.2" y="766.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (6 samples, 0.17%)</title><rect x="781.5" y="819.0" width="2.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="784.5" y="830.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (8 samples, 0.23%)</title><rect x="783.5" y="851.0" width="2.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="786.5" y="862.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.06%)</title><rect x="783.5" y="835.0" width="0.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="786.5" y="846.0"></text>
</g>
<g>
<title>gettimeofday (6 samples, 0.17%)</title><rect x="784.2" y="835.0" width="2.0" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="787.2" y="846.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.06%)</title><rect x="785.5" y="819.0" width="0.7" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="788.5" y="830.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (14 samples, 0.40%)</title><rect x="786.2" y="899.0" width="4.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="789.2" y="910.0"></text>
</g>
<g>
<title>java/lang/String.length (2 samples, 0.06%)</title><rect x="786.5" y="883.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="789.5" y="894.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (11 samples, 0.31%)</title><rect x="787.2" y="883.0" width="3.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="790.2" y="894.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (11 samples, 0.31%)</title><rect x="787.2" y="867.0" width="3.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="790.2" y="878.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (3 samples, 0.08%)</title><rect x="789.2" y="851.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="792.2" y="862.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (3 samples, 0.08%)</title><rect x="789.2" y="835.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="792.2" y="846.0"></text>
</g>
<g>
<title>java/lang/CharacterData.of (1 samples, 0.03%)</title><rect x="789.2" y="819.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="792.2" y="830.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toLowerCase (2 samples, 0.06%)</title><rect x="789.5" y="819.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="792.5" y="830.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (2 samples, 0.06%)</title><rect x="790.2" y="851.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="793.2" y="862.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (2 samples, 0.06%)</title><rect x="790.2" y="835.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="793.2" y="846.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toUpperCase (2 samples, 0.06%)</title><rect x="790.2" y="819.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="793.2" y="830.0"></text>
</g>
<g>
<title>one/nio/http/Request.getMethod (1 samples, 0.03%)</title><rect x="790.9" y="899.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="793.9" y="910.0"></text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (31 samples, 0.88%)</title><rect x="791.2" y="915.0" width="10.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="794.2" y="926.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (31 samples, 0.88%)</title><rect x="791.2" y="899.0" width="10.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="794.2" y="910.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (14 samples, 0.40%)</title><rect x="791.2" y="883.0" width="4.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="794.2" y="894.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (14 samples, 0.40%)</title><rect x="791.2" y="867.0" width="4.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="794.2" y="878.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (5 samples, 0.14%)</title><rect x="794.2" y="851.0" width="1.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="797.2" y="862.0"></text>
</g>
<g>
<title>java/lang/String.startsWith (10 samples, 0.28%)</title><rect x="795.9" y="883.0" width="3.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="798.9" y="894.0"></text>
</g>
<g>
<title>java/lang/String.length (3 samples, 0.08%)</title><rect x="798.2" y="867.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="801.2" y="878.0"></text>
</g>
<g>
<title>java/lang/String.coder (3 samples, 0.08%)</title><rect x="798.2" y="851.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="801.2" y="862.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (7 samples, 0.20%)</title><rect x="799.2" y="883.0" width="2.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="802.2" y="894.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (7 samples, 0.20%)</title><rect x="799.2" y="867.0" width="2.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="802.2" y="878.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (7 samples, 0.20%)</title><rect x="799.2" y="851.0" width="2.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="802.2" y="862.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (7 samples, 0.20%)</title><rect x="799.2" y="835.0" width="2.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="802.2" y="846.0"></text>
</g>
<g>
<title>ru/mail/polis/service/valaubr/HttpService.put (280 samples, 7.93%)</title><rect x="801.6" y="915.0" width="93.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="804.6" y="926.0">ru/mail/pol..</text>
</g>
<g>
<title>java/lang/String.getBytes (9 samples, 0.25%)</title><rect x="803.9" y="899.0" width="3.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="806.9" y="910.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (7 samples, 0.20%)</title><rect x="804.6" y="883.0" width="2.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="807.6" y="894.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (3 samples, 0.08%)</title><rect x="805.9" y="867.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="808.9" y="878.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (3 samples, 0.08%)</title><rect x="805.9" y="851.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="808.9" y="862.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.03%)</title><rect x="806.6" y="835.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="809.6" y="846.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="806.6" y="819.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="809.6" y="830.0"></text>
</g>
<g>
<title>java/lang/String.strip (4 samples, 0.11%)</title><rect x="806.9" y="899.0" width="1.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="809.9" y="910.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.strip (4 samples, 0.11%)</title><rect x="806.9" y="883.0" width="1.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="809.9" y="894.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.lastIndexOfNonWhitespace (3 samples, 0.08%)</title><rect x="807.3" y="867.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="810.3" y="878.0"></text>
</g>
<g>
<title>java/lang/Character.isWhitespace (3 samples, 0.08%)</title><rect x="807.3" y="851.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="810.3" y="862.0"></text>
</g>
<g>
<title>java/lang/Character.isWhitespace (3 samples, 0.08%)</title><rect x="807.3" y="835.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="810.3" y="846.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.isWhitespace (3 samples, 0.08%)</title><rect x="807.3" y="819.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="810.3" y="830.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (31 samples, 0.88%)</title><rect x="808.3" y="899.0" width="10.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="811.3" y="910.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (31 samples, 0.88%)</title><rect x="808.3" y="883.0" width="10.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="811.3" y="894.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (26 samples, 0.74%)</title><rect x="809.9" y="867.0" width="8.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="812.9" y="878.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (25 samples, 0.71%)</title><rect x="810.3" y="851.0" width="8.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="813.3" y="862.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.06%)</title><rect x="812.9" y="835.0" width="0.7" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="815.9" y="846.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.06%)</title><rect x="812.9" y="819.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="815.9" y="830.0"></text>
</g>
<g>
<title>gettimeofday (4 samples, 0.11%)</title><rect x="813.6" y="835.0" width="1.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="816.6" y="846.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (9 samples, 0.25%)</title><rect x="814.9" y="835.0" width="3.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="817.9" y="846.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (4 samples, 0.11%)</title><rect x="815.3" y="819.0" width="1.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="818.3" y="830.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (4 samples, 0.11%)</title><rect x="816.6" y="819.0" width="1.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="819.6" y="830.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (3 samples, 0.08%)</title><rect x="816.9" y="803.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="819.9" y="814.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (3 samples, 0.08%)</title><rect x="816.9" y="787.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="819.9" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryAcquireShared (3 samples, 0.08%)</title><rect x="816.9" y="771.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="819.9" y="782.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.06%)</title><rect x="817.9" y="835.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="820.9" y="846.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.03%)</title><rect x="817.9" y="819.0" width="0.4" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="820.9" y="830.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.03%)</title><rect x="818.3" y="819.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="821.3" y="830.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.03%)</title><rect x="818.3" y="803.0" width="0.3" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="821.3" y="814.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (1 samples, 0.03%)</title><rect x="818.6" y="899.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="821.6" y="910.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/valaubr/LsmDAO.upsert (228 samples, 6.46%)</title><rect x="819.0" y="899.0" width="76.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="822.0" y="910.0">ru/mail/..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (8 samples, 0.23%)</title><rect x="819.0" y="883.0" width="2.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="822.0" y="894.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (1 samples, 0.03%)</title><rect x="819.0" y="867.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="822.0" y="878.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (7 samples, 0.20%)</title><rect x="819.3" y="867.0" width="2.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="822.3" y="878.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.06%)</title><rect x="819.3" y="851.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="822.3" y="862.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.06%)</title><rect x="819.3" y="835.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="822.3" y="846.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.06%)</title><rect x="819.3" y="819.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="822.3" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.doPut (5 samples, 0.14%)</title><rect x="820.0" y="851.0" width="1.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="823.0" y="862.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/valaubr/TablesPool.upsert (220 samples, 6.23%)</title><rect x="821.6" y="883.0" width="73.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="824.6" y="894.0">ru/mail/..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.lock (11 samples, 0.31%)</title><rect x="823.0" y="867.0" width="3.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="826.0" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireShared (11 samples, 0.31%)</title><rect x="823.0" y="851.0" width="3.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="826.0" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireShared (1 samples, 0.03%)</title><rect x="823.0" y="835.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="826.0" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (1 samples, 0.03%)</title><rect x="823.0" y="819.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="826.0" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.03%)</title><rect x="823.0" y="803.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="826.0" y="814.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.03%)</title><rect x="823.0" y="787.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="826.0" y="798.0"></text>
</g>
<g>
<title>Unsafe_Park (1 samples, 0.03%)</title><rect x="823.0" y="771.0" width="0.3" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="826.0" y="782.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.03%)</title><rect x="823.0" y="755.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="826.0" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryAcquireShared (10 samples, 0.28%)</title><rect x="823.3" y="835.0" width="3.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="826.3" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.getExclusiveOwnerThread (1 samples, 0.03%)</title><rect x="824.6" y="819.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="827.6" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.fullTryAcquireShared (1 samples, 0.03%)</title><rect x="824.6" y="803.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="827.6" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (3 samples, 0.08%)</title><rect x="825.0" y="819.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="828.0" y="830.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (3 samples, 0.08%)</title><rect x="825.0" y="803.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="828.0" y="814.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (3 samples, 0.08%)</title><rect x="825.0" y="787.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="828.0" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$NonfairSync.readerShouldBlock (2 samples, 0.06%)</title><rect x="826.0" y="819.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="829.0" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.apparentlyFirstQueuedIsExclusive (2 samples, 0.06%)</title><rect x="826.0" y="803.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="829.0" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.unlock (25 samples, 0.71%)</title><rect x="826.6" y="867.0" width="8.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="829.6" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.releaseShared (25 samples, 0.71%)</title><rect x="826.6" y="851.0" width="8.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="829.6" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doReleaseShared (10 samples, 0.28%)</title><rect x="827.0" y="835.0" width="3.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="830.0" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (10 samples, 0.28%)</title><rect x="827.0" y="819.0" width="3.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="830.0" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (10 samples, 0.28%)</title><rect x="827.0" y="803.0" width="3.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="830.0" y="814.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (10 samples, 0.28%)</title><rect x="827.0" y="787.0" width="3.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="830.0" y="798.0"></text>
</g>
<g>
<title>Unsafe_Unpark (3 samples, 0.08%)</title><rect x="827.0" y="771.0" width="1.0" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="830.0" y="782.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (1 samples, 0.03%)</title><rect x="827.0" y="755.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="830.0" y="766.0"></text>
</g>
<g>
<title>java_lang_Thread::thread(oopDesc*) (1 samples, 0.03%)</title><rect x="827.3" y="755.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="830.3" y="766.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.03%)</title><rect x="827.6" y="755.0" width="0.4" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="830.6" y="766.0"></text>
</g>
<g>
<title>__pthread_cond_signal (7 samples, 0.20%)</title><rect x="828.0" y="771.0" width="2.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="831.0" y="782.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (6 samples, 0.17%)</title><rect x="828.3" y="755.0" width="2.0" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="831.3" y="766.0"></text>
</g>
<g>
<title>do_syscall_64 (6 samples, 0.17%)</title><rect x="828.3" y="739.0" width="2.0" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="831.3" y="750.0"></text>
</g>
<g>
<title>__x64_sys_futex (5 samples, 0.14%)</title><rect x="828.6" y="723.0" width="1.7" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="831.6" y="734.0"></text>
</g>
<g>
<title>do_futex (5 samples, 0.14%)</title><rect x="828.6" y="707.0" width="1.7" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="831.6" y="718.0"></text>
</g>
<g>
<title>futex_wake (5 samples, 0.14%)</title><rect x="828.6" y="691.0" width="1.7" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="831.6" y="702.0"></text>
</g>
<g>
<title>wake_up_q (4 samples, 0.11%)</title><rect x="829.0" y="675.0" width="1.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="832.0" y="686.0"></text>
</g>
<g>
<title>try_to_wake_up (4 samples, 0.11%)</title><rect x="829.0" y="659.0" width="1.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="832.0" y="670.0"></text>
</g>
<g>
<title>__lock_text_start (4 samples, 0.11%)</title><rect x="829.0" y="643.0" width="1.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="832.0" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryReleaseShared (9 samples, 0.25%)</title><rect x="830.3" y="835.0" width="3.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="833.3" y="846.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.remove (1 samples, 0.03%)</title><rect x="832.7" y="819.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="835.7" y="830.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.remove (1 samples, 0.03%)</title><rect x="832.7" y="803.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="835.7" y="814.0"></text>
</g>
<g>
<title>java/lang/ref/Reference.clear (1 samples, 0.03%)</title><rect x="832.7" y="787.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="835.7" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.03%)</title><rect x="833.0" y="819.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="836.0" y="830.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (1 samples, 0.03%)</title><rect x="833.0" y="803.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="836.0" y="814.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/valaubr/TablesPool.putIntoFlushQueue (5 samples, 0.14%)</title><rect x="833.3" y="835.0" width="1.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="836.3" y="846.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/valaubr/MemTable.upsert (158 samples, 4.48%)</title><rect x="835.0" y="867.0" width="52.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="838.0" y="878.0">ru/ma..</text>
</g>
<g>
<title>java/nio/HeapByteBufferR.duplicate (1 samples, 0.03%)</title><rect x="835.3" y="851.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="838.3" y="862.0"></text>
</g>
<g>
<title>InstanceKlass::klass_holder() const (1 samples, 0.03%)</title><rect x="835.3" y="835.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="838.3" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.put (154 samples, 4.36%)</title><rect x="835.7" y="851.0" width="51.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="838.7" y="862.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.doPut (154 samples, 4.36%)</title><rect x="835.7" y="835.0" width="51.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="838.7" y="846.0">java/..</text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (25 samples, 0.71%)</title><rect x="837.7" y="819.0" width="8.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="840.7" y="830.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.compareAndSet (10 samples, 0.28%)</title><rect x="842.7" y="803.0" width="3.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="845.7" y="814.0"></text>
</g>
<g>
<title>java/util/Objects.requireNonNull (4 samples, 0.11%)</title><rect x="844.7" y="787.0" width="1.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="847.7" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$Index.&lt;init&gt; (42 samples, 1.19%)</title><rect x="846.0" y="819.0" width="14.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="849.0" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$Node.&lt;init&gt; (2 samples, 0.06%)</title><rect x="860.1" y="819.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="863.1" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.addIndices (4 samples, 0.11%)</title><rect x="860.7" y="819.0" width="1.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="863.7" y="830.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (2 samples, 0.06%)</title><rect x="860.7" y="803.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="863.7" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.addIndices (1 samples, 0.03%)</title><rect x="861.4" y="803.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="864.4" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (1 samples, 0.03%)</title><rect x="861.4" y="787.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="864.4" y="798.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (1 samples, 0.03%)</title><rect x="861.4" y="771.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="864.4" y="782.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (1 samples, 0.03%)</title><rect x="861.4" y="755.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="864.4" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (1 samples, 0.03%)</title><rect x="861.7" y="803.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="864.7" y="814.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (1 samples, 0.03%)</title><rect x="861.7" y="787.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="864.7" y="798.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (1 samples, 0.03%)</title><rect x="861.7" y="771.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="864.7" y="782.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (1 samples, 0.03%)</title><rect x="861.7" y="755.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="864.7" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (69 samples, 1.95%)</title><rect x="862.1" y="819.0" width="23.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="865.1" y="830.0">j..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (65 samples, 1.84%)</title><rect x="863.4" y="803.0" width="21.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="866.4" y="814.0">j..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (45 samples, 1.27%)</title><rect x="870.1" y="787.0" width="15.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="873.1" y="798.0"></text>
</g>
<g>
<title>java/nio/Buffer.remaining (3 samples, 0.08%)</title><rect x="872.8" y="771.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="875.8" y="782.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (18 samples, 0.51%)</title><rect x="873.8" y="771.0" width="6.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="876.8" y="782.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (12 samples, 0.34%)</title><rect x="875.8" y="755.0" width="4.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="878.8" y="766.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.ix (2 samples, 0.06%)</title><rect x="879.1" y="739.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="882.1" y="750.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (16 samples, 0.45%)</title><rect x="879.8" y="771.0" width="5.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="882.8" y="782.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (16 samples, 0.45%)</title><rect x="879.8" y="755.0" width="5.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="882.8" y="766.0"></text>
</g>
<g>
<title>vectorizedMismatch (13 samples, 0.37%)</title><rect x="880.8" y="739.0" width="4.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="883.8" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadLocalRandom.nextSecondarySeed (6 samples, 0.17%)</title><rect x="885.1" y="819.0" width="2.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="888.1" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLong.addAndGet (2 samples, 0.06%)</title><rect x="887.1" y="851.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="890.1" y="862.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.06%)</title><rect x="887.1" y="835.0" width="0.7" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="890.1" y="846.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/valaubr/TablesPool.putIntoFlushQueue (22 samples, 0.62%)</title><rect x="887.8" y="867.0" width="7.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="890.8" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$WriteLock.lock (19 samples, 0.54%)</title><rect x="888.1" y="851.0" width="6.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="891.1" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (19 samples, 0.54%)</title><rect x="888.1" y="835.0" width="6.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="891.1" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (9 samples, 0.25%)</title><rect x="888.1" y="819.0" width="3.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="891.1" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (9 samples, 0.25%)</title><rect x="888.1" y="803.0" width="3.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="891.1" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (9 samples, 0.25%)</title><rect x="888.1" y="787.0" width="3.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="891.1" y="798.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (9 samples, 0.25%)</title><rect x="888.1" y="771.0" width="3.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="891.1" y="782.0"></text>
</g>
<g>
<title>Unsafe_Park (4 samples, 0.11%)</title><rect x="888.1" y="755.0" width="1.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="891.1" y="766.0"></text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (1 samples, 0.03%)</title><rect x="888.1" y="739.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="891.1" y="750.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.03%)</title><rect x="888.5" y="739.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="891.5" y="750.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.03%)</title><rect x="888.5" y="723.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="891.5" y="734.0"></text>
</g>
<g>
<title>__GI___pthread_mutex_trylock (1 samples, 0.03%)</title><rect x="888.8" y="739.0" width="0.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="891.8" y="750.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.03%)</title><rect x="889.2" y="739.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="892.2" y="750.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.03%)</title><rect x="889.2" y="723.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="892.2" y="734.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.03%)</title><rect x="889.2" y="707.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="892.2" y="718.0"></text>
</g>
<g>
<title>__x64_sys_futex (1 samples, 0.03%)</title><rect x="889.2" y="691.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="892.2" y="702.0"></text>
</g>
<g>
<title>do_futex (1 samples, 0.03%)</title><rect x="889.2" y="675.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="892.2" y="686.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.14%)</title><rect x="889.5" y="755.0" width="1.7" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="892.5" y="766.0"></text>
</g>
<g>
<title>__pthread_cond_wait (5 samples, 0.14%)</title><rect x="889.5" y="739.0" width="1.7" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="892.5" y="750.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (4 samples, 0.11%)</title><rect x="889.8" y="723.0" width="1.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="892.8" y="734.0"></text>
</g>
<g>
<title>do_syscall_64 (4 samples, 0.11%)</title><rect x="889.8" y="707.0" width="1.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="892.8" y="718.0"></text>
</g>
<g>
<title>__x64_sys_futex (3 samples, 0.08%)</title><rect x="889.8" y="691.0" width="1.0" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="892.8" y="702.0"></text>
</g>
<g>
<title>do_futex (3 samples, 0.08%)</title><rect x="889.8" y="675.0" width="1.0" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="892.8" y="686.0"></text>
</g>
<g>
<title>futex_wait (3 samples, 0.08%)</title><rect x="889.8" y="659.0" width="1.0" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="892.8" y="670.0"></text>
</g>
<g>
<title>futex_wait_queue_me (2 samples, 0.06%)</title><rect x="889.8" y="643.0" width="0.7" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="892.8" y="654.0"></text>
</g>
<g>
<title>rcu_all_qs (1 samples, 0.03%)</title><rect x="889.8" y="627.0" width="0.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="892.8" y="638.0"></text>
</g>
<g>
<title>schedule (1 samples, 0.03%)</title><rect x="890.2" y="627.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="893.2" y="638.0"></text>
</g>
<g>
<title>__schedule (1 samples, 0.03%)</title><rect x="890.2" y="611.0" width="0.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="893.2" y="622.0"></text>
</g>
<g>
<title>finish_task_switch (1 samples, 0.03%)</title><rect x="890.2" y="595.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="893.2" y="606.0"></text>
</g>
<g>
<title>get_futex_key (1 samples, 0.03%)</title><rect x="890.5" y="643.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="893.5" y="654.0"></text>
</g>
<g>
<title>do_futex (1 samples, 0.03%)</title><rect x="890.8" y="691.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="893.8" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (4 samples, 0.11%)</title><rect x="891.2" y="819.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="894.2" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.&lt;init&gt; (2 samples, 0.06%)</title><rect x="891.2" y="803.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="894.2" y="814.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (1 samples, 0.03%)</title><rect x="891.5" y="787.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="894.5" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetTail (2 samples, 0.06%)</title><rect x="891.8" y="803.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="894.8" y="814.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (1 samples, 0.03%)</title><rect x="892.2" y="787.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="895.2" y="798.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.compareAndSet (1 samples, 0.03%)</title><rect x="892.2" y="771.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="895.2" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryAcquire (6 samples, 0.17%)</title><rect x="892.5" y="819.0" width="2.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="895.5" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (2 samples, 0.06%)</title><rect x="893.8" y="803.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="896.8" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$WriteLock.unlock (2 samples, 0.06%)</title><rect x="894.5" y="851.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="897.5" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.06%)</title><rect x="894.5" y="835.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="897.5" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.06%)</title><rect x="894.5" y="819.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="897.5" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.06%)</title><rect x="894.5" y="803.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="897.5" y="814.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (2 samples, 0.06%)</title><rect x="894.5" y="787.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="897.5" y="798.0"></text>
</g>
<g>
<title>__pthread_cond_signal (2 samples, 0.06%)</title><rect x="894.5" y="771.0" width="0.7" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="897.5" y="782.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.03%)</title><rect x="894.8" y="755.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="897.8" y="766.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.03%)</title><rect x="894.8" y="739.0" width="0.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="897.8" y="750.0"></text>
</g>
<g>
<title>__x64_sys_futex (1 samples, 0.03%)</title><rect x="894.8" y="723.0" width="0.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="897.8" y="734.0"></text>
</g>
<g>
<title>do_futex (1 samples, 0.03%)</title><rect x="894.8" y="707.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="897.8" y="718.0"></text>
</g>
<g>
<title>futex_wake (1 samples, 0.03%)</title><rect x="894.8" y="691.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="897.8" y="702.0"></text>
</g>
<g>
<title>wake_up_q (1 samples, 0.03%)</title><rect x="894.8" y="675.0" width="0.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="897.8" y="686.0"></text>
</g>
<g>
<title>try_to_wake_up (1 samples, 0.03%)</title><rect x="894.8" y="659.0" width="0.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="897.8" y="670.0"></text>
</g>
<g>
<title>__lock_text_start (1 samples, 0.03%)</title><rect x="894.8" y="643.0" width="0.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="897.8" y="654.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.findHandlerByHost (1 samples, 0.03%)</title><rect x="895.2" y="931.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="898.2" y="942.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (26 samples, 0.74%)</title><rect x="895.5" y="931.0" width="8.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="898.5" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap.get (19 samples, 0.54%)</title><rect x="897.8" y="915.0" width="6.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="900.8" y="926.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (8 samples, 0.23%)</title><rect x="898.2" y="899.0" width="2.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="901.2" y="910.0"></text>
</g>
<g>
<title>java/lang/String.equals (4 samples, 0.11%)</title><rect x="899.5" y="883.0" width="1.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="902.5" y="894.0"></text>
</g>
<g>
<title>java/lang/String.coder (1 samples, 0.03%)</title><rect x="899.5" y="867.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="902.5" y="878.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (3 samples, 0.08%)</title><rect x="899.8" y="867.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="902.8" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (10 samples, 0.28%)</title><rect x="900.8" y="899.0" width="3.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="903.8" y="910.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (8 samples, 0.23%)</title><rect x="901.5" y="883.0" width="2.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="904.5" y="894.0"></text>
</g>
<g>
<title>one/nio/http/Request.getMethod (1 samples, 0.03%)</title><rect x="904.2" y="931.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="907.2" y="942.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (10 samples, 0.28%)</title><rect x="904.5" y="931.0" width="3.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="907.5" y="942.0"></text>
</g>
<g>
<title>java/lang/String.substring (10 samples, 0.28%)</title><rect x="904.5" y="915.0" width="3.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="907.5" y="926.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.03%)</title><rect x="905.9" y="899.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="908.9" y="910.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (5 samples, 0.14%)</title><rect x="906.2" y="899.0" width="1.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="909.2" y="910.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (5 samples, 0.14%)</title><rect x="906.2" y="883.0" width="1.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="909.2" y="894.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (108 samples, 3.06%)</title><rect x="907.9" y="963.0" width="36.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="910.9" y="974.0">one..</text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (32 samples, 0.91%)</title><rect x="917.2" y="947.0" width="10.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="920.2" y="958.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.03%)</title><rect x="921.9" y="931.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="924.9" y="942.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_objArray(int, int, Thread*) (1 samples, 0.03%)</title><rect x="921.9" y="915.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="924.9" y="926.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="921.9" y="899.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="924.9" y="910.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="921.9" y="883.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="924.9" y="894.0"></text>
</g>
<g>
<title>ThreadHeapSampler::enabled() (1 samples, 0.03%)</title><rect x="921.9" y="867.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="924.9" y="878.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (17 samples, 0.48%)</title><rect x="922.2" y="931.0" width="5.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="925.2" y="942.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (17 samples, 0.48%)</title><rect x="922.2" y="915.0" width="5.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="925.2" y="926.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (1 samples, 0.03%)</title><rect x="922.9" y="899.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="925.9" y="910.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (14 samples, 0.40%)</title><rect x="923.2" y="899.0" width="4.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="926.2" y="910.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (6 samples, 0.17%)</title><rect x="925.9" y="883.0" width="2.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="928.9" y="894.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (6 samples, 0.17%)</title><rect x="927.9" y="947.0" width="2.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="930.9" y="958.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (36 samples, 1.02%)</title><rect x="929.9" y="947.0" width="12.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="932.9" y="958.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (36 samples, 1.02%)</title><rect x="929.9" y="931.0" width="12.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="932.9" y="942.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (21 samples, 0.59%)</title><rect x="934.9" y="915.0" width="7.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="937.9" y="926.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (20 samples, 0.57%)</title><rect x="934.9" y="899.0" width="6.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="937.9" y="910.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (16 samples, 0.45%)</title><rect x="936.3" y="883.0" width="5.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="939.3" y="894.0"></text>
</g>
<g>
<title>java/lang/String.rangeCheck (1 samples, 0.03%)</title><rect x="941.6" y="899.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="944.6" y="910.0"></text>
</g>
<g>
<title>java/lang/String.checkBoundsOffCount (1 samples, 0.03%)</title><rect x="941.6" y="883.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="944.6" y="894.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (6 samples, 0.17%)</title><rect x="942.0" y="947.0" width="2.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="945.0" y="958.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (15 samples, 0.42%)</title><rect x="944.0" y="963.0" width="5.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="947.0" y="974.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (6 samples, 0.17%)</title><rect x="947.0" y="947.0" width="2.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="950.0" y="958.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (5 samples, 0.14%)</title><rect x="947.3" y="931.0" width="1.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="950.3" y="942.0"></text>
</g>
<g>
<title>java/lang/Character.digit (2 samples, 0.06%)</title><rect x="947.3" y="915.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="950.3" y="926.0"></text>
</g>
<g>
<title>java/lang/Character.digit (2 samples, 0.06%)</title><rect x="947.3" y="899.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="950.3" y="910.0"></text>
</g>
<g>
<title>java/lang/String.charAt (3 samples, 0.08%)</title><rect x="948.0" y="915.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="951.0" y="926.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.charAt (3 samples, 0.08%)</title><rect x="948.0" y="899.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="951.0" y="910.0"></text>
</g>
<g>
<title>one/nio/http/Request.addHeader (9 samples, 0.25%)</title><rect x="949.0" y="963.0" width="3.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="952.0" y="974.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.06%)</title><rect x="951.3" y="947.0" width="0.7" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="954.3" y="958.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (51 samples, 1.44%)</title><rect x="952.0" y="963.0" width="17.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="955.0" y="974.0"></text>
</g>
<g>
<title>java/lang/String.length (2 samples, 0.06%)</title><rect x="954.3" y="947.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="957.3" y="958.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (39 samples, 1.10%)</title><rect x="955.0" y="947.0" width="13.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="958.0" y="958.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.03%)</title><rect x="955.0" y="931.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="958.0" y="942.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (38 samples, 1.08%)</title><rect x="955.3" y="931.0" width="12.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="958.3" y="942.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (5 samples, 0.14%)</title><rect x="962.7" y="915.0" width="1.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="965.7" y="926.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (4 samples, 0.11%)</title><rect x="963.0" y="899.0" width="1.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="966.0" y="910.0"></text>
</g>
<g>
<title>java/lang/CharacterData.of (1 samples, 0.03%)</title><rect x="963.0" y="883.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="966.0" y="894.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toLowerCase (3 samples, 0.08%)</title><rect x="963.4" y="883.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="966.4" y="894.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.getProperties (1 samples, 0.03%)</title><rect x="964.0" y="867.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="967.0" y="878.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (1 samples, 0.03%)</title><rect x="964.4" y="915.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="967.4" y="926.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (1 samples, 0.03%)</title><rect x="964.4" y="899.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="967.4" y="910.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toUpperCase (1 samples, 0.03%)</title><rect x="964.4" y="883.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="967.4" y="894.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.getProperties (1 samples, 0.03%)</title><rect x="964.4" y="867.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="967.4" y="878.0"></text>
</g>
<g>
<title>jbyte_arraycopy (3 samples, 0.08%)</title><rect x="964.7" y="915.0" width="1.0" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="967.7" y="926.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (7 samples, 0.20%)</title><rect x="965.7" y="915.0" width="2.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="968.7" y="926.0"></text>
</g>
<g>
<title>java/lang/String.substring (3 samples, 0.08%)</title><rect x="968.0" y="947.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="971.0" y="958.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (3 samples, 0.08%)</title><rect x="968.0" y="931.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="971.0" y="942.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (2 samples, 0.06%)</title><rect x="968.4" y="915.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="971.4" y="926.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (14 samples, 0.40%)</title><rect x="969.0" y="963.0" width="4.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="972.0" y="974.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (1 samples, 0.03%)</title><rect x="969.4" y="947.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="972.4" y="958.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (12 samples, 0.34%)</title><rect x="969.7" y="947.0" width="4.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="972.7" y="958.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.03%)</title><rect x="971.0" y="931.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="974.0" y="942.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.03%)</title><rect x="971.0" y="915.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="974.0" y="926.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="971.0" y="899.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="974.0" y="910.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="971.0" y="883.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="974.0" y="894.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="971.0" y="867.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="974.0" y="878.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (1 samples, 0.03%)</title><rect x="971.0" y="851.0" width="0.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="974.0" y="862.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (5 samples, 0.14%)</title><rect x="971.4" y="931.0" width="1.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="974.4" y="942.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (5 samples, 0.14%)</title><rect x="971.4" y="915.0" width="1.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="974.4" y="926.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (3 samples, 0.08%)</title><rect x="972.1" y="899.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="975.1" y="910.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.06%)</title><rect x="973.1" y="931.0" width="0.6" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="976.1" y="942.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (603 samples, 17.08%)</title><rect x="973.7" y="979.0" width="201.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="976.7" y="990.0">one/nio/net/Session.read</text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (603 samples, 17.08%)</title><rect x="973.7" y="963.0" width="201.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="976.7" y="974.0">one/nio/net/NativeSocket.r..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (90 samples, 2.55%)</title><rect x="986.8" y="947.0" width="30.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="989.8" y="958.0">Ja..</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (17 samples, 0.48%)</title><rect x="990.8" y="931.0" width="5.7" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="993.8" y="942.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (7 samples, 0.20%)</title><rect x="996.5" y="931.0" width="2.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="999.5" y="942.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (7 samples, 0.20%)</title><rect x="998.8" y="931.0" width="2.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1001.8" y="942.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (5 samples, 0.14%)</title><rect x="1001.1" y="931.0" width="1.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1004.1" y="942.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (2 samples, 0.06%)</title><rect x="1002.8" y="931.0" width="0.7" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1005.8" y="942.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (39 samples, 1.10%)</title><rect x="1003.5" y="931.0" width="13.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1006.5" y="942.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (4 samples, 0.11%)</title><rect x="1005.8" y="915.0" width="1.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1008.8" y="926.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (6 samples, 0.17%)</title><rect x="1007.2" y="915.0" width="2.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1010.2" y="926.0"></text>
</g>
<g>
<title>apic_timer_interrupt (1 samples, 0.03%)</title><rect x="1008.8" y="899.0" width="0.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1011.8" y="910.0"></text>
</g>
<g>
<title>smp_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="1008.8" y="883.0" width="0.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1011.8" y="894.0"></text>
</g>
<g>
<title>irq_exit (1 samples, 0.03%)</title><rect x="1008.8" y="867.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1011.8" y="878.0"></text>
</g>
<g>
<title>__softirqentry_text_start (1 samples, 0.03%)</title><rect x="1008.8" y="851.0" width="0.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1011.8" y="862.0"></text>
</g>
<g>
<title>run_rebalance_domains (1 samples, 0.03%)</title><rect x="1008.8" y="835.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1011.8" y="846.0"></text>
</g>
<g>
<title>update_blocked_averages (1 samples, 0.03%)</title><rect x="1008.8" y="819.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1011.8" y="830.0"></text>
</g>
<g>
<title>__lock_text_start (1 samples, 0.03%)</title><rect x="1008.8" y="803.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1011.8" y="814.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (2 samples, 0.06%)</title><rect x="1009.2" y="915.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1012.2" y="926.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (9 samples, 0.25%)</title><rect x="1009.8" y="915.0" width="3.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1012.8" y="926.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (11 samples, 0.31%)</title><rect x="1012.8" y="915.0" width="3.7" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1015.8" y="926.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (6 samples, 0.17%)</title><rect x="1014.5" y="899.0" width="2.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1017.5" y="910.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (1 samples, 0.03%)</title><rect x="1016.5" y="931.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1019.5" y="942.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (2 samples, 0.06%)</title><rect x="1016.8" y="947.0" width="0.7" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1019.8" y="958.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (18 samples, 0.51%)</title><rect x="1017.5" y="947.0" width="6.0" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1020.5" y="958.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (6 samples, 0.17%)</title><rect x="1023.5" y="947.0" width="2.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1026.5" y="958.0"></text>
</g>
<g>
<title>recv (448 samples, 12.69%)</title><rect x="1025.5" y="947.0" width="149.8" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="1028.5" y="958.0">recv</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (376 samples, 10.65%)</title><rect x="1049.6" y="931.0" width="125.7" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1052.6" y="942.0">entry_SYSCALL_6..</text>
</g>
<g>
<title>__x64_sys_recvfrom (9 samples, 0.25%)</title><rect x="1049.6" y="915.0" width="3.0" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1052.6" y="926.0"></text>
</g>
<g>
<title>do_syscall_64 (367 samples, 10.40%)</title><rect x="1052.6" y="915.0" width="122.7" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1055.6" y="926.0">do_syscall_64</text>
</g>
<g>
<title>__sys_recvfrom (4 samples, 0.11%)</title><rect x="1067.3" y="899.0" width="1.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1070.3" y="910.0"></text>
</g>
<g>
<title>__x64_sys_recvfrom (319 samples, 9.04%)</title><rect x="1068.7" y="899.0" width="106.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1071.7" y="910.0">__x64_sys_rec..</text>
</g>
<g>
<title>__sys_recvfrom (305 samples, 8.64%)</title><rect x="1068.7" y="883.0" width="101.9" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1071.7" y="894.0">__sys_recvfrom</text>
</g>
<g>
<title>__fdget (3 samples, 0.08%)</title><rect x="1072.0" y="867.0" width="1.0" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1075.0" y="878.0"></text>
</g>
<g>
<title>fput_many (2 samples, 0.06%)</title><rect x="1073.0" y="867.0" width="0.7" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1076.0" y="878.0"></text>
</g>
<g>
<title>inet6_recvmsg (1 samples, 0.03%)</title><rect x="1073.7" y="867.0" width="0.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1076.7" y="878.0"></text>
</g>
<g>
<title>security_socket_recvmsg (1 samples, 0.03%)</title><rect x="1074.0" y="867.0" width="0.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1077.0" y="878.0"></text>
</g>
<g>
<title>sock_recvmsg (257 samples, 7.28%)</title><rect x="1074.3" y="867.0" width="85.9" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1077.3" y="878.0">sock_recvmsg</text>
</g>
<g>
<title>apparmor_socket_recvmsg (8 samples, 0.23%)</title><rect x="1075.3" y="851.0" width="2.7" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1078.3" y="862.0"></text>
</g>
<g>
<title>inet6_recvmsg (203 samples, 5.75%)</title><rect x="1078.0" y="851.0" width="67.9" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1081.0" y="862.0">inet6_r..</text>
</g>
<g>
<title>lock_sock_nested (1 samples, 0.03%)</title><rect x="1079.4" y="835.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1082.4" y="846.0"></text>
</g>
<g>
<title>release_sock (2 samples, 0.06%)</title><rect x="1079.7" y="835.0" width="0.7" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1082.7" y="846.0"></text>
</g>
<g>
<title>tcp_cleanup_rbuf (2 samples, 0.06%)</title><rect x="1080.4" y="835.0" width="0.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1083.4" y="846.0"></text>
</g>
<g>
<title>tcp_rcv_space_adjust (2 samples, 0.06%)</title><rect x="1081.0" y="835.0" width="0.7" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1084.0" y="846.0"></text>
</g>
<g>
<title>tcp_recvmsg (192 samples, 5.44%)</title><rect x="1081.7" y="835.0" width="64.2" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1084.7" y="846.0">tcp_rec..</text>
</g>
<g>
<title>__kfree_skb (32 samples, 0.91%)</title><rect x="1094.7" y="819.0" width="10.7" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1097.7" y="830.0"></text>
</g>
<g>
<title>kfree_skbmem (3 samples, 0.08%)</title><rect x="1094.7" y="803.0" width="1.0" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1097.7" y="814.0"></text>
</g>
<g>
<title>skb_release_all (27 samples, 0.76%)</title><rect x="1095.7" y="803.0" width="9.1" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1098.7" y="814.0"></text>
</g>
<g>
<title>dst_release (1 samples, 0.03%)</title><rect x="1096.1" y="787.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1099.1" y="798.0"></text>
</g>
<g>
<title>skb_release_data (6 samples, 0.17%)</title><rect x="1096.4" y="787.0" width="2.0" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1099.4" y="798.0"></text>
</g>
<g>
<title>skb_release_head_state (14 samples, 0.40%)</title><rect x="1098.4" y="787.0" width="4.7" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1101.4" y="798.0"></text>
</g>
<g>
<title>dst_release (14 samples, 0.40%)</title><rect x="1098.4" y="771.0" width="4.7" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1101.4" y="782.0"></text>
</g>
<g>
<title>sock_rfree (5 samples, 0.14%)</title><rect x="1103.1" y="787.0" width="1.7" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1106.1" y="798.0"></text>
</g>
<g>
<title>skb_release_data (1 samples, 0.03%)</title><rect x="1104.8" y="803.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1107.8" y="814.0"></text>
</g>
<g>
<title>skb_release_head_state (1 samples, 0.03%)</title><rect x="1105.1" y="803.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1108.1" y="814.0"></text>
</g>
<g>
<title>__skb_datagram_iter (4 samples, 0.11%)</title><rect x="1105.4" y="819.0" width="1.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1108.4" y="830.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (6 samples, 0.17%)</title><rect x="1106.8" y="819.0" width="2.0" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1109.8" y="830.0"></text>
</g>
<g>
<title>_raw_spin_unlock_bh (3 samples, 0.08%)</title><rect x="1108.8" y="819.0" width="1.0" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1111.8" y="830.0"></text>
</g>
<g>
<title>apic_timer_interrupt (1 samples, 0.03%)</title><rect x="1109.8" y="819.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1112.8" y="830.0"></text>
</g>
<g>
<title>smp_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="1109.8" y="803.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1112.8" y="814.0"></text>
</g>
<g>
<title>irq_exit (1 samples, 0.03%)</title><rect x="1109.8" y="787.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1112.8" y="798.0"></text>
</g>
<g>
<title>__softirqentry_text_start (1 samples, 0.03%)</title><rect x="1109.8" y="771.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1112.8" y="782.0"></text>
</g>
<g>
<title>run_rebalance_domains (1 samples, 0.03%)</title><rect x="1109.8" y="755.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1112.8" y="766.0"></text>
</g>
<g>
<title>update_blocked_averages (1 samples, 0.03%)</title><rect x="1109.8" y="739.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1112.8" y="750.0"></text>
</g>
<g>
<title>__lock_text_start (1 samples, 0.03%)</title><rect x="1109.8" y="723.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1112.8" y="734.0"></text>
</g>
<g>
<title>kfree_skbmem (2 samples, 0.06%)</title><rect x="1110.1" y="819.0" width="0.7" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1113.1" y="830.0"></text>
</g>
<g>
<title>lock_sock_nested (1 samples, 0.03%)</title><rect x="1110.8" y="819.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1113.8" y="830.0"></text>
</g>
<g>
<title>rcu_all_qs (1 samples, 0.03%)</title><rect x="1110.8" y="803.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1113.8" y="814.0"></text>
</g>
<g>
<title>release_sock (5 samples, 0.14%)</title><rect x="1111.1" y="819.0" width="1.7" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1114.1" y="830.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (1 samples, 0.03%)</title><rect x="1111.4" y="803.0" width="0.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1114.4" y="814.0"></text>
</g>
<g>
<title>_raw_spin_unlock_bh (1 samples, 0.03%)</title><rect x="1111.8" y="803.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1114.8" y="814.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (1 samples, 0.03%)</title><rect x="1111.8" y="787.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1114.8" y="798.0"></text>
</g>
<g>
<title>tcp_release_cb (2 samples, 0.06%)</title><rect x="1112.1" y="803.0" width="0.7" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1115.1" y="814.0"></text>
</g>
<g>
<title>skb_copy_datagram_iter (69 samples, 1.95%)</title><rect x="1112.8" y="819.0" width="23.0" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1115.8" y="830.0">s..</text>
</g>
<g>
<title>__skb_datagram_iter (67 samples, 1.90%)</title><rect x="1113.1" y="803.0" width="22.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1116.1" y="814.0">_..</text>
</g>
<g>
<title>simple_copy_to_iter (52 samples, 1.47%)</title><rect x="1118.1" y="787.0" width="17.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1121.1" y="798.0"></text>
</g>
<g>
<title>__check_object_size (22 samples, 0.62%)</title><rect x="1118.5" y="771.0" width="7.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1121.5" y="782.0"></text>
</g>
<g>
<title>__virt_addr_valid (17 samples, 0.48%)</title><rect x="1120.1" y="755.0" width="5.7" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1123.1" y="766.0"></text>
</g>
<g>
<title>__virt_addr_valid (2 samples, 0.06%)</title><rect x="1125.8" y="771.0" width="0.7" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1128.8" y="782.0"></text>
</g>
<g>
<title>_copy_to_iter (22 samples, 0.62%)</title><rect x="1126.5" y="771.0" width="7.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1129.5" y="782.0"></text>
</g>
<g>
<title>copy_user_enhanced_fast_string (19 samples, 0.54%)</title><rect x="1127.5" y="755.0" width="6.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1130.5" y="766.0"></text>
</g>
<g>
<title>check_stack_object (2 samples, 0.06%)</title><rect x="1133.8" y="771.0" width="0.7" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1136.8" y="782.0"></text>
</g>
<g>
<title>copyout (3 samples, 0.08%)</title><rect x="1134.5" y="771.0" width="1.0" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1137.5" y="782.0"></text>
</g>
<g>
<title>simple_copy_to_iter (1 samples, 0.03%)</title><rect x="1135.5" y="803.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1138.5" y="814.0"></text>
</g>
<g>
<title>skb_release_all (1 samples, 0.03%)</title><rect x="1135.8" y="819.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1138.8" y="830.0"></text>
</g>
<g>
<title>tcp_cleanup_rbuf (9 samples, 0.25%)</title><rect x="1136.2" y="819.0" width="3.0" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1139.2" y="830.0"></text>
</g>
<g>
<title>__tcp_select_window (1 samples, 0.03%)</title><rect x="1138.9" y="803.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1141.9" y="814.0"></text>
</g>
<g>
<title>tcp_mstamp_refresh (3 samples, 0.08%)</title><rect x="1139.2" y="819.0" width="1.0" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1142.2" y="830.0"></text>
</g>
<g>
<title>tcp_rcv_space_adjust (16 samples, 0.45%)</title><rect x="1140.2" y="819.0" width="5.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1143.2" y="830.0"></text>
</g>
<g>
<title>ktime_get (2 samples, 0.06%)</title><rect x="1141.2" y="803.0" width="0.7" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1144.2" y="814.0"></text>
</g>
<g>
<title>tcp_mstamp_refresh (11 samples, 0.31%)</title><rect x="1141.9" y="803.0" width="3.6" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1144.9" y="814.0"></text>
</g>
<g>
<title>ktime_get (3 samples, 0.08%)</title><rect x="1142.2" y="787.0" width="1.0" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1145.2" y="798.0"></text>
</g>
<g>
<title>read_tsc (7 samples, 0.20%)</title><rect x="1143.2" y="787.0" width="2.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1146.2" y="798.0"></text>
</g>
<g>
<title>apic_timer_interrupt (1 samples, 0.03%)</title><rect x="1145.2" y="771.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1148.2" y="782.0"></text>
</g>
<g>
<title>smp_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="1145.2" y="755.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1148.2" y="766.0"></text>
</g>
<g>
<title>irq_exit (1 samples, 0.03%)</title><rect x="1145.2" y="739.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1148.2" y="750.0"></text>
</g>
<g>
<title>__softirqentry_text_start (1 samples, 0.03%)</title><rect x="1145.2" y="723.0" width="0.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1148.2" y="734.0"></text>
</g>
<g>
<title>run_rebalance_domains (1 samples, 0.03%)</title><rect x="1145.2" y="707.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1148.2" y="718.0"></text>
</g>
<g>
<title>update_blocked_averages (1 samples, 0.03%)</title><rect x="1145.2" y="691.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1148.2" y="702.0"></text>
</g>
<g>
<title>__lock_text_start (1 samples, 0.03%)</title><rect x="1145.2" y="675.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1148.2" y="686.0"></text>
</g>
<g>
<title>tcp_release_cb (1 samples, 0.03%)</title><rect x="1145.5" y="819.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1148.5" y="830.0"></text>
</g>
<g>
<title>security_socket_recvmsg (43 samples, 1.22%)</title><rect x="1145.9" y="851.0" width="14.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1148.9" y="862.0"></text>
</g>
<g>
<title>aa_sk_perm (2 samples, 0.06%)</title><rect x="1149.9" y="835.0" width="0.7" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1152.9" y="846.0"></text>
</g>
<g>
<title>apparmor_socket_recvmsg (29 samples, 0.82%)</title><rect x="1150.6" y="835.0" width="9.6" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1153.6" y="846.0"></text>
</g>
<g>
<title>_cond_resched (3 samples, 0.08%)</title><rect x="1150.6" y="819.0" width="1.0" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1153.6" y="830.0"></text>
</g>
<g>
<title>aa_sk_perm (26 samples, 0.74%)</title><rect x="1151.6" y="819.0" width="8.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1154.6" y="830.0"></text>
</g>
<g>
<title>rcu_all_qs (2 samples, 0.06%)</title><rect x="1159.6" y="803.0" width="0.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1162.6" y="814.0"></text>
</g>
<g>
<title>sockfd_lookup_light (31 samples, 0.88%)</title><rect x="1160.2" y="867.0" width="10.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1163.2" y="878.0"></text>
</g>
<g>
<title>__fdget (20 samples, 0.57%)</title><rect x="1160.6" y="851.0" width="6.7" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1163.6" y="862.0"></text>
</g>
<g>
<title>__fget_light (20 samples, 0.57%)</title><rect x="1160.6" y="835.0" width="6.7" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1163.6" y="846.0"></text>
</g>
<g>
<title>__fget (20 samples, 0.57%)</title><rect x="1160.6" y="819.0" width="6.7" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1163.6" y="830.0"></text>
</g>
<g>
<title>__fget_light (10 samples, 0.28%)</title><rect x="1167.3" y="851.0" width="3.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1170.3" y="862.0"></text>
</g>
<g>
<title>fput (3 samples, 0.08%)</title><rect x="1170.6" y="883.0" width="1.0" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1173.6" y="894.0"></text>
</g>
<g>
<title>import_single_range (8 samples, 0.23%)</title><rect x="1171.6" y="883.0" width="2.7" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1174.6" y="894.0"></text>
</g>
<g>
<title>sockfd_lookup_light (3 samples, 0.08%)</title><rect x="1174.3" y="883.0" width="1.0" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1177.3" y="894.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.08%)</title><rect x="1175.3" y="995.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1178.3" y="1006.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.06%)</title><rect x="1175.6" y="979.0" width="0.7" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1178.6" y="990.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.06%)</title><rect x="1175.6" y="963.0" width="0.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1178.6" y="974.0"></text>
</g>
<g>
<title>start_thread (41 samples, 1.16%)</title><rect x="1176.3" y="1027.0" width="13.7" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1179.3" y="1038.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (41 samples, 1.16%)</title><rect x="1176.3" y="1011.0" width="13.7" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="1179.3" y="1022.0"></text>
</g>
<g>
<title>Thread::call_run() (41 samples, 1.16%)</title><rect x="1176.3" y="995.0" width="13.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1179.3" y="1006.0"></text>
</g>
<g>
<title>GangWorker::loop() (3 samples, 0.08%)</title><rect x="1176.3" y="979.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1179.3" y="990.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (1 samples, 0.03%)</title><rect x="1176.3" y="963.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1179.3" y="974.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (1 samples, 0.03%)</title><rect x="1176.3" y="947.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1179.3" y="958.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (1 samples, 0.03%)</title><rect x="1176.3" y="931.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.3" y="942.0"></text>
</g>
<g>
<title>ParallelSPCleanupTask::work(unsigned int) (1 samples, 0.03%)</title><rect x="1176.6" y="963.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1179.6" y="974.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_threads_do(bool, ThreadClosure*) (1 samples, 0.03%)</title><rect x="1176.6" y="947.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1179.6" y="958.0"></text>
</g>
<g>
<title>ParallelSPCleanupThreadClosure::do_thread(Thread*) (1 samples, 0.03%)</title><rect x="1176.6" y="931.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1179.6" y="942.0"></text>
</g>
<g>
<title>Thread::muxAcquire(long volatile*, char const*) (1 samples, 0.03%)</title><rect x="1176.6" y="915.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1179.6" y="926.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.03%)</title><rect x="1177.0" y="963.0" width="0.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1180.0" y="974.0"></text>
</g>
<g>
<title>JavaThread::run() (31 samples, 0.88%)</title><rect x="1177.3" y="979.0" width="10.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.3" y="990.0"></text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (30 samples, 0.85%)</title><rect x="1177.3" y="963.0" width="10.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.3" y="974.0"></text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (30 samples, 0.85%)</title><rect x="1177.3" y="947.0" width="10.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1180.3" y="958.0"></text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (30 samples, 0.85%)</title><rect x="1177.3" y="931.0" width="10.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.3" y="942.0"></text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (30 samples, 0.85%)</title><rect x="1177.3" y="915.0" width="10.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.3" y="926.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (19 samples, 0.54%)</title><rect x="1177.3" y="899.0" width="6.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.3" y="910.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.03%)</title><rect x="1177.3" y="883.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1180.3" y="894.0"></text>
</g>
<g>
<title>Matcher::match() (2 samples, 0.06%)</title><rect x="1177.6" y="883.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.6" y="894.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (2 samples, 0.06%)</title><rect x="1177.6" y="867.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1180.6" y="878.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.03%)</title><rect x="1177.6" y="851.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.6" y="862.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node*&amp;) (1 samples, 0.03%)</title><rect x="1177.6" y="835.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1180.6" y="846.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node*&amp;) (1 samples, 0.03%)</title><rect x="1177.6" y="819.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.6" y="830.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="1177.6" y="803.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.6" y="814.0"></text>
</g>
<g>
<title>ChunkPool::allocate(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="1177.6" y="787.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.6" y="798.0"></text>
</g>
<g>
<title>ThreadCritical::ThreadCritical() (1 samples, 0.03%)</title><rect x="1177.6" y="771.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.6" y="782.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.03%)</title><rect x="1178.0" y="851.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1181.0" y="862.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (1 samples, 0.03%)</title><rect x="1178.0" y="835.0" width="0.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1181.0" y="846.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (1 samples, 0.03%)</title><rect x="1178.3" y="883.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.3" y="894.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (1 samples, 0.03%)</title><rect x="1178.3" y="867.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.3" y="878.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (1 samples, 0.03%)</title><rect x="1178.3" y="851.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1181.3" y="862.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (15 samples, 0.42%)</title><rect x="1178.6" y="883.0" width="5.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.6" y="894.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.03%)</title><rect x="1178.6" y="867.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.6" y="878.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 0.03%)</title><rect x="1179.0" y="867.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.0" y="878.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.03%)</title><rect x="1179.0" y="851.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.0" y="862.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (1 samples, 0.03%)</title><rect x="1179.3" y="867.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1182.3" y="878.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (4 samples, 0.11%)</title><rect x="1179.6" y="867.0" width="1.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1182.6" y="878.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.03%)</title><rect x="1180.0" y="851.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.0" y="862.0"></text>
</g>
<g>
<title>MachNode::ideal_reg() const (1 samples, 0.03%)</title><rect x="1180.0" y="835.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.0" y="846.0"></text>
</g>
<g>
<title>PhaseChaitin::add_input_to_liveout(Block*, Node*, IndexSet*, double, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (1 samples, 0.03%)</title><rect x="1180.3" y="851.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.3" y="862.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.03%)</title><rect x="1180.6" y="851.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1183.6" y="862.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (1 samples, 0.03%)</title><rect x="1181.0" y="867.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.0" y="878.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (4 samples, 0.11%)</title><rect x="1181.3" y="867.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.3" y="878.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (2 samples, 0.06%)</title><rect x="1181.6" y="851.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1184.6" y="862.0"></text>
</g>
<g>
<title>PhaseChaitin::use_prior_register(Node*, unsigned int, Node*, Block*, Node_List&amp;, Node_List&amp;) (1 samples, 0.03%)</title><rect x="1182.0" y="835.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1185.0" y="846.0"></text>
</g>
<g>
<title>MachCallJavaNode::in_RegMask(unsigned int) const (1 samples, 0.03%)</title><rect x="1182.0" y="819.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.0" y="830.0"></text>
</g>
<g>
<title>find_lowest_bit(unsigned int) (1 samples, 0.03%)</title><rect x="1182.3" y="851.0" width="0.3" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="1185.3" y="862.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (1 samples, 0.03%)</title><rect x="1182.6" y="867.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1185.6" y="878.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (1 samples, 0.03%)</title><rect x="1182.6" y="851.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1185.6" y="862.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.03%)</title><rect x="1182.6" y="835.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1185.6" y="846.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.03%)</title><rect x="1183.0" y="867.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1186.0" y="878.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (1 samples, 0.03%)</title><rect x="1183.3" y="867.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1186.3" y="878.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.03%)</title><rect x="1183.3" y="851.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1186.3" y="862.0"></text>
</g>
<g>
<title>Compile::Optimize() (7 samples, 0.20%)</title><rect x="1183.6" y="899.0" width="2.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.6" y="910.0"></text>
</g>
<g>
<title>Compile::optimize_loops(int&amp;, PhaseIterGVN&amp;, LoopOptsMode) [clone .part.341] (2 samples, 0.06%)</title><rect x="1183.6" y="883.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.6" y="894.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (2 samples, 0.06%)</title><rect x="1183.6" y="867.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1186.6" y="878.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.03%)</title><rect x="1183.6" y="851.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1186.6" y="862.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (1 samples, 0.03%)</title><rect x="1183.6" y="835.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.6" y="846.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.03%)</title><rect x="1184.0" y="851.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1187.0" y="862.0"></text>
</g>
<g>
<title>Node::Value(PhaseGVN*) const (1 samples, 0.03%)</title><rect x="1184.0" y="835.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1187.0" y="846.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (1 samples, 0.03%)</title><rect x="1184.3" y="883.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1187.3" y="894.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.03%)</title><rect x="1184.3" y="867.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1187.3" y="878.0"></text>
</g>
<g>
<title>Node::is_CFG() const (1 samples, 0.03%)</title><rect x="1184.3" y="851.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1187.3" y="862.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.06%)</title><rect x="1184.7" y="883.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1187.7" y="894.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.06%)</title><rect x="1184.7" y="867.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1187.7" y="878.0"></text>
</g>
<g>
<title>LoadNode::Value(PhaseGVN*) const (1 samples, 0.03%)</title><rect x="1184.7" y="851.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1187.7" y="862.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.03%)</title><rect x="1184.7" y="835.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1187.7" y="846.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.03%)</title><rect x="1184.7" y="819.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1187.7" y="830.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.03%)</title><rect x="1185.0" y="851.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1188.0" y="862.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.03%)</title><rect x="1185.0" y="835.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1188.0" y="846.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.03%)</title><rect x="1185.3" y="883.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1188.3" y="894.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_arraycopy_node(ArrayCopyNode*) (1 samples, 0.03%)</title><rect x="1185.3" y="867.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1188.3" y="878.0"></text>
</g>
<g>
<title>PhaseMacroExpand::generate_arraycopy(ArrayCopyNode*, AllocateArrayNode*, Node**, MergeMemNode*, Node**, TypePtr const*, BasicType, Node*, Node*, Node*, Node*, Node*, bool, bool, RegionNode*) (1 samples, 0.03%)</title><rect x="1185.3" y="851.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1188.3" y="862.0"></text>
</g>
<g>
<title>PhaseMacroExpand::generate_slow_arraycopy(ArrayCopyNode*, Node**, Node*, Node**, TypePtr const*, Node*, Node*, Node*, Node*, Node*, bool) (1 samples, 0.03%)</title><rect x="1185.3" y="835.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1188.3" y="846.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.03%)</title><rect x="1185.3" y="819.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1188.3" y="830.0"></text>
</g>
<g>
<title>TypeNode::bottom_type() const (1 samples, 0.03%)</title><rect x="1185.7" y="883.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1188.7" y="894.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.11%)</title><rect x="1186.0" y="899.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1189.0" y="910.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.11%)</title><rect x="1186.0" y="883.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1189.0" y="894.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.11%)</title><rect x="1186.0" y="867.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1189.0" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.11%)</title><rect x="1186.0" y="851.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1189.0" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.11%)</title><rect x="1186.0" y="835.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1189.0" y="846.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.11%)</title><rect x="1186.0" y="819.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1189.0" y="830.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.03%)</title><rect x="1186.0" y="803.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1189.0" y="814.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.03%)</title><rect x="1186.0" y="787.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1189.0" y="798.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.03%)</title><rect x="1186.0" y="771.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1189.0" y="782.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.03%)</title><rect x="1186.0" y="755.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1189.0" y="766.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.03%)</title><rect x="1186.0" y="739.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1189.0" y="750.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.03%)</title><rect x="1186.0" y="723.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1189.0" y="734.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.03%)</title><rect x="1186.0" y="707.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1189.0" y="718.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.03%)</title><rect x="1186.0" y="691.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1189.0" y="702.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.03%)</title><rect x="1186.0" y="675.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1189.0" y="686.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.03%)</title><rect x="1186.0" y="659.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1189.0" y="670.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.03%)</title><rect x="1186.0" y="643.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1189.0" y="654.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.03%)</title><rect x="1186.0" y="627.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1189.0" y="638.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle const&amp;, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.03%)</title><rect x="1186.0" y="611.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1189.0" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.06%)</title><rect x="1186.3" y="803.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1189.3" y="814.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.06%)</title><rect x="1186.3" y="787.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1189.3" y="798.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.06%)</title><rect x="1186.3" y="771.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1189.3" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.06%)</title><rect x="1186.3" y="755.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1189.3" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.06%)</title><rect x="1186.3" y="739.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1189.3" y="750.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.06%)</title><rect x="1186.3" y="723.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1189.3" y="734.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.03%)</title><rect x="1186.3" y="707.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1189.3" y="718.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.03%)</title><rect x="1186.3" y="691.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1189.3" y="702.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.03%)</title><rect x="1186.3" y="675.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1189.3" y="686.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.03%)</title><rect x="1186.3" y="659.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1189.3" y="670.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.03%)</title><rect x="1186.3" y="643.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1189.3" y="654.0"></text>
</g>
<g>
<title>ciTypeFlow::clone_loop_heads(ciTypeFlow::Loop*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.03%)</title><rect x="1186.3" y="627.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1189.3" y="638.0"></text>
</g>
<g>
<title>ciTypeFlow::clone_loop_head(ciTypeFlow::Loop*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.03%)</title><rect x="1186.3" y="611.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1189.3" y="622.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.03%)</title><rect x="1186.3" y="595.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1189.3" y="606.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.03%)</title><rect x="1186.3" y="579.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1189.3" y="590.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="1186.7" y="707.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1189.7" y="718.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="1186.7" y="691.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1189.7" y="702.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.03%)</title><rect x="1186.7" y="675.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1189.7" y="686.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.03%)</title><rect x="1186.7" y="659.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1189.7" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.03%)</title><rect x="1186.7" y="643.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1189.7" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.03%)</title><rect x="1186.7" y="627.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1189.7" y="638.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.03%)</title><rect x="1186.7" y="611.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1189.7" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="1186.7" y="595.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1189.7" y="606.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.03%)</title><rect x="1186.7" y="579.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1189.7" y="590.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.03%)</title><rect x="1186.7" y="563.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1189.7" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.03%)</title><rect x="1186.7" y="547.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1189.7" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.03%)</title><rect x="1186.7" y="531.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1189.7" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.03%)</title><rect x="1186.7" y="515.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1189.7" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="1186.7" y="499.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1189.7" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.03%)</title><rect x="1186.7" y="483.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1189.7" y="494.0"></text>
</g>
<g>
<title>Parse::do_method_entry() (1 samples, 0.03%)</title><rect x="1186.7" y="467.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1189.7" y="478.0"></text>
</g>
<g>
<title>GraphKit::record_profiled_parameters_for_speculation() (1 samples, 0.03%)</title><rect x="1186.7" y="451.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1189.7" y="462.0"></text>
</g>
<g>
<title>MethodData::profile_parameters() (1 samples, 0.03%)</title><rect x="1186.7" y="435.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1189.7" y="446.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="1187.0" y="803.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1190.0" y="814.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="1187.0" y="787.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1190.0" y="798.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.03%)</title><rect x="1187.0" y="771.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1190.0" y="782.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.03%)</title><rect x="1187.0" y="755.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1190.0" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.03%)</title><rect x="1187.0" y="739.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1190.0" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.03%)</title><rect x="1187.0" y="723.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1190.0" y="734.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.03%)</title><rect x="1187.0" y="707.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1190.0" y="718.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="1187.0" y="691.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1190.0" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="1187.0" y="675.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1190.0" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.03%)</title><rect x="1187.0" y="659.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1190.0" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.03%)</title><rect x="1187.0" y="643.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1190.0" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.03%)</title><rect x="1187.0" y="627.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1190.0" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.03%)</title><rect x="1187.0" y="611.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1190.0" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.03%)</title><rect x="1187.0" y="595.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1190.0" y="606.0"></text>
</g>
<g>
<title>DirectCallGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="1187.0" y="579.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1190.0" y="590.0"></text>
</g>
<g>
<title>GraphKit::set_results_for_java_call(CallJavaNode*, bool, bool) (1 samples, 0.03%)</title><rect x="1187.0" y="563.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1190.0" y="574.0"></text>
</g>
<g>
<title>GraphKit::make_slow_call_ex(Node*, ciInstanceKlass*, bool, bool) [clone .part.180] (1 samples, 0.03%)</title><rect x="1187.0" y="547.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1190.0" y="558.0"></text>
</g>
<g>
<title>Node::Node(unsigned int) (1 samples, 0.03%)</title><rect x="1187.0" y="531.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1190.0" y="542.0"></text>
</g>
<g>
<title>Compile::grow_node_notes(GrowableArray&lt;Node_Notes*&gt;*, int) (1 samples, 0.03%)</title><rect x="1187.0" y="515.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1190.0" y="526.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="1187.0" y="499.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1190.0" y="510.0"></text>
</g>
<g>
<title>ChunkPool::allocate(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="1187.0" y="483.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1190.0" y="494.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.03%)</title><rect x="1187.0" y="467.0" width="0.3" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="1190.0" y="478.0"></text>
</g>
<g>
<title>NMethodSweeper::sweeper_loop() (1 samples, 0.03%)</title><rect x="1187.3" y="963.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1190.3" y="974.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (1 samples, 0.03%)</title><rect x="1187.3" y="947.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1190.3" y="958.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (1 samples, 0.03%)</title><rect x="1187.3" y="931.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1190.3" y="942.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.03%)</title><rect x="1187.3" y="915.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1190.3" y="926.0"></text>
</g>
<g>
<title>SemaphoreGangTaskDispatcher::worker_wait_for_task() (1 samples, 0.03%)</title><rect x="1187.7" y="979.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1190.7" y="990.0"></text>
</g>
<g>
<title>VMThread::run() (2 samples, 0.06%)</title><rect x="1188.0" y="979.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1191.0" y="990.0"></text>
</g>
<g>
<title>VMThread::loop() (2 samples, 0.06%)</title><rect x="1188.0" y="963.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1191.0" y="974.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (1 samples, 0.03%)</title><rect x="1188.0" y="947.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1191.0" y="958.0"></text>
</g>
<g>
<title>SafepointSynchronize::do_cleanup_tasks() (1 samples, 0.03%)</title><rect x="1188.0" y="931.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1191.0" y="942.0"></text>
</g>
<g>
<title>NamedThread::is_Named_thread() const (1 samples, 0.03%)</title><rect x="1188.0" y="915.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1191.0" y="926.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) [clone .constprop.66] (1 samples, 0.03%)</title><rect x="1188.3" y="947.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1191.3" y="958.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (1 samples, 0.03%)</title><rect x="1188.3" y="931.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1191.3" y="942.0"></text>
</g>
<g>
<title>VM_G1CollectForAllocation::doit() (1 samples, 0.03%)</title><rect x="1188.3" y="915.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1191.3" y="926.0"></text>
</g>
<g>
<title>GCTraceCPUTime::GCTraceCPUTime() (1 samples, 0.03%)</title><rect x="1188.3" y="899.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1191.3" y="910.0"></text>
</g>
<g>
<title>WatcherThread::run() (4 samples, 0.11%)</title><rect x="1188.7" y="979.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1191.7" y="990.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (4 samples, 0.11%)</title><rect x="1188.7" y="963.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1191.7" y="974.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (3 samples, 0.08%)</title><rect x="1189.0" y="947.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1192.0" y="958.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (2 samples, 0.06%)</title><rect x="1189.0" y="931.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1192.0" y="942.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.03%)</title><rect x="1189.0" y="915.0" width="0.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1192.0" y="926.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.03%)</title><rect x="1189.0" y="899.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1192.0" y="910.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.03%)</title><rect x="1189.0" y="883.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1192.0" y="894.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.03%)</title><rect x="1189.3" y="915.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1192.3" y="926.0"></text>
</g>
<g>
<title>to_abstime(timespec*, long, bool) (1 samples, 0.03%)</title><rect x="1189.3" y="899.0" width="0.4" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="1192.3" y="910.0"></text>
</g>
<g>
<title>Thread::muxAcquire(long volatile*, char const*) (1 samples, 0.03%)</title><rect x="1189.7" y="931.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1192.7" y="942.0"></text>
</g>
</g>
</svg>
