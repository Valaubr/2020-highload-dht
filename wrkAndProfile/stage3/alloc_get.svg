<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1030" onload="init(evt)" viewBox="0 0 1200 1030" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1013"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1013"> </text>
<g id="frames">
<g>
<title>all (39,820 samples, 100.00%)</title><rect x="10.0" y="979.0" width="1180.0" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="13.0" y="990.0">all</text>
</g>
<g>
<title>java/lang/Thread.run (23,497 samples, 59.01%)</title><rect x="10.0" y="963.0" width="696.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.0" y="974.0">java/lang/Thread.run</text>
</g>
<g>
<title>com/sun/jmx/remote/internal/ServerCommunicatorAdmin$Timeout.run (65 samples, 0.16%)</title><rect x="10.0" y="947.0" width="1.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="13.0" y="958.0"></text>
</g>
<g>
<title>com/sun/jmx/remote/internal/ServerCommunicatorAdmin.logtime (65 samples, 0.16%)</title><rect x="10.0" y="931.0" width="1.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="13.0" y="942.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1964884030.linkToTargetMethod (65 samples, 0.16%)</title><rect x="10.0" y="915.0" width="1.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="926.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/124977967.invoke (65 samples, 0.16%)</title><rect x="10.0" y="899.0" width="1.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="910.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (65 samples, 0.16%)</title><rect x="10.0" y="883.0" width="1.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="13.0" y="894.0"></text>
</g>
<g>
<title>java/lang/invoke/StringConcatFactory$MethodHandleInlineCopyStrategy.newArray (65 samples, 0.16%)</title><rect x="10.0" y="867.0" width="1.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="13.0" y="878.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.allocateUninitializedArray (65 samples, 0.16%)</title><rect x="10.0" y="851.0" width="1.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="862.0"></text>
</g>
<g>
<title>byte[] (65 samples, 0.16%)</title><rect x="10.0" y="835.0" width="1.9" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="13.0" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (23,432 samples, 58.84%)</title><rect x="11.9" y="947.0" width="694.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="14.9" y="958.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (23,432 samples, 58.84%)</title><rect x="11.9" y="931.0" width="694.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="14.9" y="942.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (35 samples, 0.09%)</title><rect x="11.9" y="915.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="14.9" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (35 samples, 0.09%)</title><rect x="11.9" y="899.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="14.9" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (35 samples, 0.09%)</title><rect x="11.9" y="883.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="14.9" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (35 samples, 0.09%)</title><rect x="11.9" y="867.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="14.9" y="878.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$Node (35 samples, 0.09%)</title><rect x="11.9" y="851.0" width="1.1" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="14.9" y="862.0"></text>
</g>
<g>
<title>ru/mail/polis/service/valaubr/HttpService$$Lambda$118/366139759.run (19,186 samples, 48.18%)</title><rect x="13.0" y="915.0" width="568.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="16.0" y="926.0">ru/mail/polis/service/valaubr/HttpService$$Lambda$118/366139759.run</text>
</g>
<g>
<title>ru/mail/polis/service/valaubr/HttpService.lambda$get$0 (19,186 samples, 48.18%)</title><rect x="13.0" y="899.0" width="568.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="16.0" y="910.0">ru/mail/polis/service/valaubr/HttpService.lambda$get$0</text>
</g>
<g>
<title>java/lang/String.getBytes (167 samples, 0.42%)</title><rect x="13.0" y="883.0" width="4.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="16.0" y="894.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (167 samples, 0.42%)</title><rect x="13.0" y="867.0" width="4.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="16.0" y="878.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (167 samples, 0.42%)</title><rect x="13.0" y="851.0" width="4.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="16.0" y="862.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (167 samples, 0.42%)</title><rect x="13.0" y="835.0" width="4.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="16.0" y="846.0"></text>
</g>
<g>
<title>byte[] (167 samples, 0.42%)</title><rect x="13.0" y="819.0" width="4.9" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="16.0" y="830.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (25 samples, 0.06%)</title><rect x="17.9" y="883.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="20.9" y="894.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (25 samples, 0.06%)</title><rect x="17.9" y="867.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="20.9" y="878.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (25 samples, 0.06%)</title><rect x="17.9" y="851.0" width="0.8" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="20.9" y="862.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (91 samples, 0.23%)</title><rect x="18.7" y="883.0" width="2.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="21.7" y="894.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (91 samples, 0.23%)</title><rect x="18.7" y="867.0" width="2.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="21.7" y="878.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (67 samples, 0.17%)</title><rect x="18.7" y="851.0" width="1.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="21.7" y="862.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (67 samples, 0.17%)</title><rect x="18.7" y="835.0" width="1.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="21.7" y="846.0"></text>
</g>
<g>
<title>byte[] (67 samples, 0.17%)</title><rect x="18.7" y="819.0" width="1.9" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="21.7" y="830.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (24 samples, 0.06%)</title><rect x="20.6" y="851.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="23.6" y="862.0"></text>
</g>
<g>
<title>one.nio.net.Session$ArrayQueueItem (24 samples, 0.06%)</title><rect x="20.6" y="835.0" width="0.7" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="23.6" y="846.0"></text>
</g>
<g>
<title>one/nio/http/Response.ok (67 samples, 0.17%)</title><rect x="21.3" y="883.0" width="2.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="24.3" y="894.0"></text>
</g>
<g>
<title>one.nio.http.Response (18 samples, 0.05%)</title><rect x="21.3" y="867.0" width="0.6" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="24.3" y="878.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (49 samples, 0.12%)</title><rect x="21.9" y="867.0" width="1.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="24.9" y="878.0"></text>
</g>
<g>
<title>byte[] (12 samples, 0.03%)</title><rect x="21.9" y="851.0" width="0.3" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="24.9" y="862.0"></text>
</g>
<g>
<title>java.lang.String[] (21 samples, 0.05%)</title><rect x="22.2" y="851.0" width="0.7" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="25.2" y="862.0"></text>
</g>
<g>
<title>java.lang.String (16 samples, 0.04%)</title><rect x="22.9" y="851.0" width="0.4" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="25.9" y="862.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAO.get (18,826 samples, 47.28%)</title><rect x="23.3" y="883.0" width="557.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="26.3" y="894.0">ru/mail/polis/dao/DAO.get</text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.hasNext (1,861 samples, 4.67%)</title><rect x="23.3" y="867.0" width="55.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="26.3" y="878.0">com/g..</text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (1,861 samples, 4.67%)</title><rect x="23.3" y="851.0" width="55.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="26.3" y="862.0">com/g..</text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (1,861 samples, 4.67%)</title><rect x="23.3" y="835.0" width="55.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="26.3" y="846.0">com/g..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (1,861 samples, 4.67%)</title><rect x="23.3" y="819.0" width="55.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="26.3" y="830.0">com/g..</text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (1,861 samples, 4.67%)</title><rect x="23.3" y="803.0" width="55.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="26.3" y="814.0">ru/ma..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (1,655 samples, 4.16%)</title><rect x="23.3" y="787.0" width="49.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="26.3" y="798.0">com/g..</text>
</g>
<g>
<title>java/util/AbstractQueue.remove (580 samples, 1.46%)</title><rect x="23.5" y="771.0" width="17.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="26.5" y="782.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (580 samples, 1.46%)</title><rect x="23.5" y="755.0" width="17.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="26.5" y="766.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (580 samples, 1.46%)</title><rect x="23.5" y="739.0" width="17.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="26.5" y="750.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (580 samples, 1.46%)</title><rect x="23.5" y="723.0" width="17.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="26.5" y="734.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (580 samples, 1.46%)</title><rect x="23.5" y="707.0" width="17.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="26.5" y="718.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$116/1794098734.compare (580 samples, 1.46%)</title><rect x="23.5" y="691.0" width="17.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="26.5" y="702.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (580 samples, 1.46%)</title><rect x="23.5" y="675.0" width="17.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="26.5" y="686.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$114/52043408.compare (580 samples, 1.46%)</title><rect x="23.5" y="659.0" width="17.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="26.5" y="670.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (580 samples, 1.46%)</title><rect x="23.5" y="643.0" width="17.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="26.5" y="654.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/valaubr/Cell$$Lambda$113/942999045.apply (580 samples, 1.46%)</title><rect x="23.5" y="627.0" width="17.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="26.5" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/valaubr/Cell.getKey (580 samples, 1.46%)</title><rect x="23.5" y="611.0" width="17.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="26.5" y="622.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (580 samples, 1.46%)</title><rect x="23.5" y="595.0" width="17.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="26.5" y="606.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (580 samples, 1.46%)</title><rect x="23.5" y="579.0" width="17.2" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="26.5" y="590.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (1,069 samples, 2.68%)</title><rect x="40.7" y="771.0" width="31.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="43.7" y="782.0">ja..</text>
</g>
<g>
<title>java/util/PriorityQueue.offer (1,069 samples, 2.68%)</title><rect x="40.7" y="755.0" width="31.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="43.7" y="766.0">ja..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (1,069 samples, 2.68%)</title><rect x="40.7" y="739.0" width="31.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="43.7" y="750.0">ja..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (1,069 samples, 2.68%)</title><rect x="40.7" y="723.0" width="31.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="43.7" y="734.0">ja..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (1,069 samples, 2.68%)</title><rect x="40.7" y="707.0" width="31.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="43.7" y="718.0">co..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (1,069 samples, 2.68%)</title><rect x="40.7" y="691.0" width="31.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="43.7" y="702.0">co..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (857 samples, 2.15%)</title><rect x="40.7" y="675.0" width="25.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="43.7" y="686.0">c..</text>
</g>
<g>
<title>ru/mail/polis/dao/valaubr/SSTable$1.next (857 samples, 2.15%)</title><rect x="40.7" y="659.0" width="25.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="43.7" y="670.0">r..</text>
</g>
<g>
<title>ru/mail/polis/dao/valaubr/SSTable$1.next (857 samples, 2.15%)</title><rect x="40.7" y="643.0" width="25.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="43.7" y="654.0">r..</text>
</g>
<g>
<title>ru/mail/polis/dao/valaubr/SSTable.getCell (857 samples, 2.15%)</title><rect x="40.7" y="627.0" width="25.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="43.7" y="638.0">r..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (395 samples, 0.99%)</title><rect x="40.7" y="611.0" width="11.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="43.7" y="622.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (269 samples, 0.68%)</title><rect x="40.7" y="595.0" width="8.0" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="43.7" y="606.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (126 samples, 0.32%)</title><rect x="48.7" y="595.0" width="3.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="51.7" y="606.0"></text>
</g>
<g>
<title>byte[] (126 samples, 0.32%)</title><rect x="48.7" y="579.0" width="3.7" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="51.7" y="590.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.valaubr.Cell (59 samples, 0.15%)</title><rect x="52.4" y="611.0" width="1.8" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="55.4" y="622.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.valaubr.Value (32 samples, 0.08%)</title><rect x="54.2" y="611.0" width="0.9" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="57.2" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/valaubr/SSTable.getKey (235 samples, 0.59%)</title><rect x="55.1" y="611.0" width="7.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="58.1" y="622.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (196 samples, 0.49%)</title><rect x="55.1" y="595.0" width="5.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="58.1" y="606.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (103 samples, 0.26%)</title><rect x="55.1" y="579.0" width="3.1" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="58.1" y="590.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (93 samples, 0.23%)</title><rect x="58.2" y="579.0" width="2.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="61.2" y="590.0"></text>
</g>
<g>
<title>byte[] (93 samples, 0.23%)</title><rect x="58.2" y="563.0" width="2.7" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="61.2" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/valaubr/SSTable.getOffset (39 samples, 0.10%)</title><rect x="60.9" y="595.0" width="1.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="63.9" y="606.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (39 samples, 0.10%)</title><rect x="60.9" y="579.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="63.9" y="590.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (39 samples, 0.10%)</title><rect x="60.9" y="563.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="63.9" y="574.0"></text>
</g>
<g>
<title>byte[] (39 samples, 0.10%)</title><rect x="60.9" y="547.0" width="1.2" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="63.9" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/valaubr/SSTable.getOffset (136 samples, 0.34%)</title><rect x="62.1" y="611.0" width="4.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="65.1" y="622.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (136 samples, 0.34%)</title><rect x="62.1" y="595.0" width="4.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="65.1" y="606.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (82 samples, 0.21%)</title><rect x="62.1" y="579.0" width="2.4" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="65.1" y="590.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (54 samples, 0.14%)</title><rect x="64.5" y="579.0" width="1.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="67.5" y="590.0"></text>
</g>
<g>
<title>byte[] (54 samples, 0.14%)</title><rect x="64.5" y="563.0" width="1.6" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="67.5" y="574.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$116/1794098734.compare (212 samples, 0.53%)</title><rect x="66.1" y="675.0" width="6.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="69.1" y="686.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (212 samples, 0.53%)</title><rect x="66.1" y="659.0" width="6.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="69.1" y="670.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$114/52043408.compare (212 samples, 0.53%)</title><rect x="66.1" y="643.0" width="6.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="69.1" y="654.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (212 samples, 0.53%)</title><rect x="66.1" y="627.0" width="6.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="69.1" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/valaubr/Cell$$Lambda$113/942999045.apply (212 samples, 0.53%)</title><rect x="66.1" y="611.0" width="6.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="69.1" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/valaubr/Cell.getKey (212 samples, 0.53%)</title><rect x="66.1" y="595.0" width="6.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="69.1" y="606.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (212 samples, 0.53%)</title><rect x="66.1" y="579.0" width="6.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="69.1" y="590.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (212 samples, 0.53%)</title><rect x="66.1" y="563.0" width="6.3" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="69.1" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/valaubr/LsmDAO$$Lambda$128/703866235.apply (206 samples, 0.52%)</title><rect x="72.4" y="787.0" width="6.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="75.4" y="798.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/valaubr/Cell.getKey (206 samples, 0.52%)</title><rect x="72.4" y="771.0" width="6.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="75.4" y="782.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (206 samples, 0.52%)</title><rect x="72.4" y="755.0" width="6.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="75.4" y="766.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (206 samples, 0.52%)</title><rect x="72.4" y="739.0" width="6.1" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="75.4" y="750.0"></text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.next (85 samples, 0.21%)</title><rect x="78.5" y="867.0" width="2.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="81.5" y="878.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$6.transform (85 samples, 0.21%)</title><rect x="78.5" y="851.0" width="2.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="81.5" y="862.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/valaubr/LsmDAO$$Lambda$130/1575652623.apply (85 samples, 0.21%)</title><rect x="78.5" y="835.0" width="2.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="81.5" y="846.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/valaubr/LsmDAO.lambda$iterator$3 (85 samples, 0.21%)</title><rect x="78.5" y="819.0" width="2.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="81.5" y="830.0"></text>
</g>
<g>
<title>ru/mail/polis/Record.of (17 samples, 0.04%)</title><rect x="78.5" y="803.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="81.5" y="814.0"></text>
</g>
<g>
<title>ru.mail.polis.Record (17 samples, 0.04%)</title><rect x="78.5" y="787.0" width="0.5" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="81.5" y="798.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/valaubr/Cell.getKey (33 samples, 0.08%)</title><rect x="79.0" y="803.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="82.0" y="814.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (33 samples, 0.08%)</title><rect x="79.0" y="787.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="82.0" y="798.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (33 samples, 0.08%)</title><rect x="79.0" y="771.0" width="1.0" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="82.0" y="782.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/valaubr/Value.getData (35 samples, 0.09%)</title><rect x="80.0" y="803.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="83.0" y="814.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (30 samples, 0.08%)</title><rect x="80.0" y="787.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="83.0" y="798.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (30 samples, 0.08%)</title><rect x="80.0" y="771.0" width="0.9" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="83.0" y="782.0"></text>
</g>
<g>
<title>ru/mail/polis/Record.getKey (37 samples, 0.09%)</title><rect x="81.0" y="867.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="84.0" y="878.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.asReadOnlyBuffer (37 samples, 0.09%)</title><rect x="81.0" y="851.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="84.0" y="862.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.duplicate (37 samples, 0.09%)</title><rect x="81.0" y="835.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="84.0" y="846.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (37 samples, 0.09%)</title><rect x="81.0" y="819.0" width="1.1" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="84.0" y="830.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/valaubr/LsmDAO.iterator (16,843 samples, 42.30%)</title><rect x="82.1" y="867.0" width="499.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="85.1" y="878.0">ru/mail/polis/dao/valaubr/LsmDAO.iterator</text>
</g>
<g>
<title>com/google/common/collect/Iterators.filter (22 samples, 0.06%)</title><rect x="82.1" y="851.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="85.1" y="862.0"></text>
</g>
<g>
<title>com.google.common.collect.Iterators$5 (22 samples, 0.06%)</title><rect x="82.1" y="835.0" width="0.6" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="85.1" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.lock (10 samples, 0.03%)</title><rect x="82.7" y="851.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="85.7" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireShared (10 samples, 0.03%)</title><rect x="82.7" y="835.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="85.7" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryAcquireShared (10 samples, 0.03%)</title><rect x="82.7" y="819.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="85.7" y="830.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (9 samples, 0.02%)</title><rect x="82.7" y="803.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="85.7" y="814.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (9 samples, 0.02%)</title><rect x="82.7" y="787.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="85.7" y="798.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/valaubr/LsmDAO.cellIterator (16,811 samples, 42.22%)</title><rect x="83.0" y="851.0" width="498.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="86.0" y="862.0">ru/mail/polis/dao/valaubr/LsmDAO.cellIterator</text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (2,392 samples, 6.01%)</title><rect x="83.0" y="835.0" width="70.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="86.0" y="846.0">com/goog..</text>
</g>
<g>
<title>com.google.common.collect.Iterators$MergingIterator (12 samples, 0.03%)</title><rect x="83.0" y="819.0" width="0.4" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="86.0" y="830.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (2,380 samples, 5.98%)</title><rect x="83.4" y="819.0" width="70.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="86.4" y="830.0">com/goog..</text>
</g>
<g>
<title>com.google.common.collect.Iterators$MergingIterator$1 (19 samples, 0.05%)</title><rect x="83.4" y="803.0" width="0.6" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="86.4" y="814.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (76 samples, 0.19%)</title><rect x="84.0" y="803.0" width="2.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="87.0" y="814.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (76 samples, 0.19%)</title><rect x="84.0" y="787.0" width="2.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="87.0" y="798.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (76 samples, 0.19%)</title><rect x="84.0" y="771.0" width="2.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="87.0" y="782.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (76 samples, 0.19%)</title><rect x="84.0" y="755.0" width="2.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="87.0" y="766.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (19 samples, 0.05%)</title><rect x="84.0" y="739.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="87.0" y="750.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.hasNext (19 samples, 0.05%)</title><rect x="84.0" y="723.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="87.0" y="734.0"></text>
</g>
<g>
<title>java/util/Spliterators$1Adapter.hasNext (19 samples, 0.05%)</title><rect x="84.0" y="707.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="87.0" y="718.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.tryAdvance (19 samples, 0.05%)</title><rect x="84.0" y="691.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="87.0" y="702.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.doAdvance (19 samples, 0.05%)</title><rect x="84.0" y="675.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="87.0" y="686.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.fillBuffer (19 samples, 0.05%)</title><rect x="84.0" y="659.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="87.0" y="670.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator$$Lambda$112/1312109180.getAsBoolean (19 samples, 0.05%)</title><rect x="84.0" y="643.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="87.0" y="654.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.lambda$initPartialTraversalState$0 (19 samples, 0.05%)</title><rect x="84.0" y="627.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="87.0" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.tryAdvance (19 samples, 0.05%)</title><rect x="84.0" y="611.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="87.0" y="622.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (19 samples, 0.05%)</title><rect x="84.0" y="595.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="87.0" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/valaubr/MemTable$$Lambda$109/2117681235.apply (19 samples, 0.05%)</title><rect x="84.0" y="579.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="87.0" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/valaubr/MemTable.lambda$iterator$0 (19 samples, 0.05%)</title><rect x="84.0" y="563.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="87.0" y="574.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.valaubr.Cell (19 samples, 0.05%)</title><rect x="84.0" y="547.0" width="0.5" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="87.0" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/valaubr/TablesPool$$Lambda$121/96529653.apply (57 samples, 0.14%)</title><rect x="84.5" y="739.0" width="1.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="87.5" y="750.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/valaubr/Cell.getKey (57 samples, 0.14%)</title><rect x="84.5" y="723.0" width="1.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="87.5" y="734.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (57 samples, 0.14%)</title><rect x="84.5" y="707.0" width="1.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="87.5" y="718.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (57 samples, 0.14%)</title><rect x="84.5" y="691.0" width="1.7" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="87.5" y="702.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators.peekingIterator (106 samples, 0.27%)</title><rect x="86.2" y="803.0" width="3.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="89.2" y="814.0"></text>
</g>
<g>
<title>com.google.common.collect.Iterators$PeekingImpl (106 samples, 0.27%)</title><rect x="86.2" y="787.0" width="3.2" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="89.2" y="798.0"></text>
</g>
<g>
<title>java.util.PriorityQueue (17 samples, 0.04%)</title><rect x="89.4" y="803.0" width="0.5" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="92.4" y="814.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.&lt;init&gt; (19 samples, 0.05%)</title><rect x="89.9" y="803.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="92.9" y="814.0"></text>
</g>
<g>
<title>java.lang.Object[] (19 samples, 0.05%)</title><rect x="89.9" y="787.0" width="0.5" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="92.9" y="798.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (2,143 samples, 5.38%)</title><rect x="90.4" y="803.0" width="63.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="93.4" y="814.0">java/ut..</text>
</g>
<g>
<title>java/util/PriorityQueue.offer (2,143 samples, 5.38%)</title><rect x="90.4" y="787.0" width="63.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="93.4" y="798.0">java/ut..</text>
</g>
<g>
<title>java/util/PriorityQueue.grow (46 samples, 0.12%)</title><rect x="90.4" y="771.0" width="1.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="93.4" y="782.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (46 samples, 0.12%)</title><rect x="90.4" y="755.0" width="1.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="93.4" y="766.0"></text>
</g>
<g>
<title>java.lang.Object[] (46 samples, 0.12%)</title><rect x="90.4" y="739.0" width="1.4" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="93.4" y="750.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (2,097 samples, 5.27%)</title><rect x="91.8" y="771.0" width="62.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="94.8" y="782.0">java/u..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (2,097 samples, 5.27%)</title><rect x="91.8" y="755.0" width="62.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="94.8" y="766.0">java/u..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (2,097 samples, 5.27%)</title><rect x="91.8" y="739.0" width="62.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="94.8" y="750.0">com/go..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (2,097 samples, 5.27%)</title><rect x="91.8" y="723.0" width="62.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="94.8" y="734.0">com/go..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (1,648 samples, 4.14%)</title><rect x="91.8" y="707.0" width="48.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="94.8" y="718.0">com/..</text>
</g>
<g>
<title>ru/mail/polis/dao/valaubr/SSTable$1.next (1,648 samples, 4.14%)</title><rect x="91.8" y="691.0" width="48.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="94.8" y="702.0">ru/m..</text>
</g>
<g>
<title>ru/mail/polis/dao/valaubr/SSTable$1.next (1,648 samples, 4.14%)</title><rect x="91.8" y="675.0" width="48.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="94.8" y="686.0">ru/m..</text>
</g>
<g>
<title>ru/mail/polis/dao/valaubr/SSTable.getCell (1,648 samples, 4.14%)</title><rect x="91.8" y="659.0" width="48.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="94.8" y="670.0">ru/m..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (760 samples, 1.91%)</title><rect x="91.8" y="643.0" width="22.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="94.8" y="654.0">j..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (506 samples, 1.27%)</title><rect x="91.8" y="627.0" width="15.0" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="94.8" y="638.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (254 samples, 0.64%)</title><rect x="106.8" y="627.0" width="7.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="109.8" y="638.0"></text>
</g>
<g>
<title>byte[] (254 samples, 0.64%)</title><rect x="106.8" y="611.0" width="7.5" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="109.8" y="622.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.valaubr.Cell (75 samples, 0.19%)</title><rect x="114.3" y="643.0" width="2.2" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="117.3" y="654.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.valaubr.Value (97 samples, 0.24%)</title><rect x="116.5" y="643.0" width="2.9" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="119.5" y="654.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/valaubr/SSTable.getKey (444 samples, 1.12%)</title><rect x="119.4" y="643.0" width="13.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="122.4" y="654.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (349 samples, 0.88%)</title><rect x="119.4" y="627.0" width="10.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="122.4" y="638.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (184 samples, 0.46%)</title><rect x="119.4" y="611.0" width="5.5" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="122.4" y="622.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (165 samples, 0.41%)</title><rect x="124.9" y="611.0" width="4.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="127.9" y="622.0"></text>
</g>
<g>
<title>byte[] (165 samples, 0.41%)</title><rect x="124.9" y="595.0" width="4.8" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="127.9" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/valaubr/SSTable.getOffset (95 samples, 0.24%)</title><rect x="129.7" y="627.0" width="2.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="132.7" y="638.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (95 samples, 0.24%)</title><rect x="129.7" y="611.0" width="2.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="132.7" y="622.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (95 samples, 0.24%)</title><rect x="129.7" y="595.0" width="2.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="132.7" y="606.0"></text>
</g>
<g>
<title>byte[] (95 samples, 0.24%)</title><rect x="129.7" y="579.0" width="2.9" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="132.7" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/valaubr/SSTable.getOffset (272 samples, 0.68%)</title><rect x="132.6" y="643.0" width="8.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="135.6" y="654.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (272 samples, 0.68%)</title><rect x="132.6" y="627.0" width="8.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="135.6" y="638.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (175 samples, 0.44%)</title><rect x="132.6" y="611.0" width="5.1" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="135.6" y="622.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (97 samples, 0.24%)</title><rect x="137.7" y="611.0" width="2.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="140.7" y="622.0"></text>
</g>
<g>
<title>byte[] (97 samples, 0.24%)</title><rect x="137.7" y="595.0" width="2.9" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="140.7" y="606.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$116/1794098734.compare (449 samples, 1.13%)</title><rect x="140.6" y="707.0" width="13.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="143.6" y="718.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (449 samples, 1.13%)</title><rect x="140.6" y="691.0" width="13.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="143.6" y="702.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$114/52043408.compare (449 samples, 1.13%)</title><rect x="140.6" y="675.0" width="13.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="143.6" y="686.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (449 samples, 1.13%)</title><rect x="140.6" y="659.0" width="13.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="143.6" y="670.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/valaubr/Cell$$Lambda$113/942999045.apply (449 samples, 1.13%)</title><rect x="140.6" y="643.0" width="13.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="143.6" y="654.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/valaubr/Cell.getKey (449 samples, 1.13%)</title><rect x="140.6" y="627.0" width="13.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="143.6" y="638.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (449 samples, 1.13%)</title><rect x="140.6" y="611.0" width="13.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="143.6" y="622.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (449 samples, 1.13%)</title><rect x="140.6" y="595.0" width="13.3" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="143.6" y="606.0"></text>
</g>
<g>
<title>java.util.ArrayList (16 samples, 0.04%)</title><rect x="153.9" y="835.0" width="0.5" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="156.9" y="846.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (13,278 samples, 33.35%)</title><rect x="154.4" y="835.0" width="393.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="157.4" y="846.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$Values.iterator (22 samples, 0.06%)</title><rect x="154.4" y="819.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="157.4" y="830.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapValueIterator (22 samples, 0.06%)</title><rect x="154.4" y="803.0" width="0.7" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="157.4" y="814.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/valaubr/LsmDAO$$Lambda$126/1538391044.accept (13,256 samples, 33.29%)</title><rect x="155.1" y="819.0" width="392.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="158.1" y="830.0">ru/mail/polis/dao/valaubr/LsmDAO$$Lambda$126/153839104..</text>
</g>
<g>
<title>ru/mail/polis/dao/valaubr/LsmDAO.lambda$cellIterator$4 (13,256 samples, 33.29%)</title><rect x="155.1" y="803.0" width="392.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="158.1" y="814.0">ru/mail/polis/dao/valaubr/LsmDAO.lambda$cellIterator$4</text>
</g>
<g>
<title>ru/mail/polis/dao/valaubr/SSTable.iterator (13,256 samples, 33.29%)</title><rect x="155.1" y="787.0" width="392.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="158.1" y="798.0">ru/mail/polis/dao/valaubr/SSTable.iterator</text>
</g>
<g>
<title>ru.mail.polis.dao.valaubr.SSTable$1 (108 samples, 0.27%)</title><rect x="155.1" y="771.0" width="3.2" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="158.1" y="782.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/valaubr/SSTable$1.&lt;init&gt; (13,148 samples, 33.02%)</title><rect x="158.3" y="771.0" width="389.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="161.3" y="782.0">ru/mail/polis/dao/valaubr/SSTable$1.&lt;init&gt;</text>
</g>
<g>
<title>ru/mail/polis/dao/valaubr/SSTable.getPosition (13,148 samples, 33.02%)</title><rect x="158.3" y="755.0" width="389.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="161.3" y="766.0">ru/mail/polis/dao/valaubr/SSTable.getPosition</text>
</g>
<g>
<title>ru/mail/polis/dao/valaubr/SSTable.getKey (13,148 samples, 33.02%)</title><rect x="158.3" y="739.0" width="389.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="161.3" y="750.0">ru/mail/polis/dao/valaubr/SSTable.getKey</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (8,813 samples, 22.13%)</title><rect x="158.3" y="723.0" width="261.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="161.3" y="734.0">java/nio/ByteBuffer.allocate</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (6,032 samples, 15.15%)</title><rect x="158.3" y="707.0" width="178.7" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="161.3" y="718.0">java.nio.HeapByteBuffer</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2,781 samples, 6.98%)</title><rect x="337.0" y="707.0" width="82.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="340.0" y="718.0">java/nio/..</text>
</g>
<g>
<title>byte[] (2,781 samples, 6.98%)</title><rect x="337.0" y="691.0" width="82.4" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="340.0" y="702.0">byte[]</text>
</g>
<g>
<title>ru/mail/polis/dao/valaubr/SSTable.getOffset (4,335 samples, 10.89%)</title><rect x="419.4" y="723.0" width="128.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="422.4" y="734.0">ru/mail/polis/da..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (4,335 samples, 10.89%)</title><rect x="419.4" y="707.0" width="128.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="422.4" y="718.0">java/nio/ByteBuf..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (2,989 samples, 7.51%)</title><rect x="419.4" y="691.0" width="88.6" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="422.4" y="702.0">java.nio.H..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1,346 samples, 3.38%)</title><rect x="508.0" y="691.0" width="39.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="511.0" y="702.0">jav..</text>
</g>
<g>
<title>byte[] (1,346 samples, 3.38%)</title><rect x="508.0" y="675.0" width="39.9" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="511.0" y="686.0">byt..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (19 samples, 0.05%)</title><rect x="547.9" y="835.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="550.9" y="846.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (19 samples, 0.05%)</title><rect x="547.9" y="819.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="550.9" y="830.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/valaubr/LsmDAO$$Lambda$126/1538391044.get$Lambda (19 samples, 0.05%)</title><rect x="547.9" y="803.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="550.9" y="814.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.valaubr.LsmDAO$$Lambda$126 (19 samples, 0.05%)</title><rect x="547.9" y="787.0" width="0.5" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="550.9" y="798.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (31 samples, 0.08%)</title><rect x="548.4" y="835.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="551.4" y="846.0"></text>
</g>
<g>
<title>java.lang.Object[] (31 samples, 0.08%)</title><rect x="548.4" y="819.0" width="1.0" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="551.4" y="830.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (613 samples, 1.54%)</title><rect x="549.4" y="835.0" width="18.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="552.4" y="846.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.Iters$CollapseEqualsIterator (21 samples, 0.05%)</title><rect x="549.4" y="819.0" width="0.6" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="552.4" y="830.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (592 samples, 1.49%)</title><rect x="550.0" y="819.0" width="17.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="553.0" y="830.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (592 samples, 1.49%)</title><rect x="550.0" y="803.0" width="17.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="553.0" y="814.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.hasNext (9 samples, 0.02%)</title><rect x="550.0" y="787.0" width="0.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="553.0" y="798.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (9 samples, 0.02%)</title><rect x="550.0" y="771.0" width="0.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="553.0" y="782.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (9 samples, 0.02%)</title><rect x="550.0" y="755.0" width="0.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="553.0" y="766.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (9 samples, 0.02%)</title><rect x="550.0" y="739.0" width="0.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="553.0" y="750.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (9 samples, 0.02%)</title><rect x="550.0" y="723.0" width="0.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="553.0" y="734.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (213 samples, 0.53%)</title><rect x="550.2" y="787.0" width="6.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="553.2" y="798.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (213 samples, 0.53%)</title><rect x="550.2" y="771.0" width="6.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="553.2" y="782.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (213 samples, 0.53%)</title><rect x="550.2" y="755.0" width="6.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="553.2" y="766.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (213 samples, 0.53%)</title><rect x="550.2" y="739.0" width="6.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="553.2" y="750.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (213 samples, 0.53%)</title><rect x="550.2" y="723.0" width="6.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="553.2" y="734.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$116/1794098734.compare (213 samples, 0.53%)</title><rect x="550.2" y="707.0" width="6.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="553.2" y="718.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (213 samples, 0.53%)</title><rect x="550.2" y="691.0" width="6.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="553.2" y="702.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$114/52043408.compare (213 samples, 0.53%)</title><rect x="550.2" y="675.0" width="6.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="553.2" y="686.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (213 samples, 0.53%)</title><rect x="550.2" y="659.0" width="6.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="553.2" y="670.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/valaubr/Cell$$Lambda$113/942999045.apply (213 samples, 0.53%)</title><rect x="550.2" y="643.0" width="6.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="553.2" y="654.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/valaubr/Cell.getKey (213 samples, 0.53%)</title><rect x="550.2" y="627.0" width="6.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="553.2" y="638.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (213 samples, 0.53%)</title><rect x="550.2" y="611.0" width="6.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="553.2" y="622.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (213 samples, 0.53%)</title><rect x="550.2" y="595.0" width="6.4" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="553.2" y="606.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (370 samples, 0.93%)</title><rect x="556.6" y="787.0" width="10.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="559.6" y="798.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (370 samples, 0.93%)</title><rect x="556.6" y="771.0" width="10.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="559.6" y="782.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (370 samples, 0.93%)</title><rect x="556.6" y="755.0" width="10.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="559.6" y="766.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (370 samples, 0.93%)</title><rect x="556.6" y="739.0" width="10.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="559.6" y="750.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (370 samples, 0.93%)</title><rect x="556.6" y="723.0" width="10.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="559.6" y="734.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (370 samples, 0.93%)</title><rect x="556.6" y="707.0" width="10.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="559.6" y="718.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (284 samples, 0.71%)</title><rect x="556.6" y="691.0" width="8.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="559.6" y="702.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/valaubr/SSTable$1.next (284 samples, 0.71%)</title><rect x="556.6" y="675.0" width="8.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="559.6" y="686.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/valaubr/SSTable$1.next (284 samples, 0.71%)</title><rect x="556.6" y="659.0" width="8.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="559.6" y="670.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/valaubr/SSTable.getCell (284 samples, 0.71%)</title><rect x="556.6" y="643.0" width="8.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="559.6" y="654.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (118 samples, 0.30%)</title><rect x="556.6" y="627.0" width="3.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="559.6" y="638.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (69 samples, 0.17%)</title><rect x="556.6" y="611.0" width="2.0" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="559.6" y="622.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (49 samples, 0.12%)</title><rect x="558.6" y="611.0" width="1.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="561.6" y="622.0"></text>
</g>
<g>
<title>byte[] (49 samples, 0.12%)</title><rect x="558.6" y="595.0" width="1.5" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="561.6" y="606.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.valaubr.Cell (15 samples, 0.04%)</title><rect x="560.1" y="627.0" width="0.4" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="563.1" y="638.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.valaubr.Value (28 samples, 0.07%)</title><rect x="560.5" y="627.0" width="0.8" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="563.5" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/valaubr/SSTable.getKey (76 samples, 0.19%)</title><rect x="561.3" y="627.0" width="2.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="564.3" y="638.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (56 samples, 0.14%)</title><rect x="561.3" y="611.0" width="1.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="564.3" y="622.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (31 samples, 0.08%)</title><rect x="561.3" y="595.0" width="0.9" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="564.3" y="606.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (25 samples, 0.06%)</title><rect x="562.2" y="595.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="565.2" y="606.0"></text>
</g>
<g>
<title>byte[] (25 samples, 0.06%)</title><rect x="562.2" y="579.0" width="0.8" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="565.2" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/valaubr/SSTable.getOffset (20 samples, 0.05%)</title><rect x="563.0" y="611.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="566.0" y="622.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (20 samples, 0.05%)</title><rect x="563.0" y="595.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="566.0" y="606.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (20 samples, 0.05%)</title><rect x="563.0" y="579.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="566.0" y="590.0"></text>
</g>
<g>
<title>byte[] (20 samples, 0.05%)</title><rect x="563.0" y="563.0" width="0.6" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="566.0" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/valaubr/SSTable.getOffset (47 samples, 0.12%)</title><rect x="563.6" y="627.0" width="1.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="566.6" y="638.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (47 samples, 0.12%)</title><rect x="563.6" y="611.0" width="1.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="566.6" y="622.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (36 samples, 0.09%)</title><rect x="563.6" y="595.0" width="1.0" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="566.6" y="606.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (11 samples, 0.03%)</title><rect x="564.6" y="595.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="567.6" y="606.0"></text>
</g>
<g>
<title>byte[] (11 samples, 0.03%)</title><rect x="564.6" y="579.0" width="0.4" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="567.6" y="590.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$116/1794098734.compare (86 samples, 0.22%)</title><rect x="565.0" y="691.0" width="2.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="568.0" y="702.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (86 samples, 0.22%)</title><rect x="565.0" y="675.0" width="2.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="568.0" y="686.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$114/52043408.compare (86 samples, 0.22%)</title><rect x="565.0" y="659.0" width="2.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="568.0" y="670.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (86 samples, 0.22%)</title><rect x="565.0" y="643.0" width="2.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="568.0" y="654.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/valaubr/Cell$$Lambda$113/942999045.apply (86 samples, 0.22%)</title><rect x="565.0" y="627.0" width="2.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="568.0" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/valaubr/Cell.getKey (86 samples, 0.22%)</title><rect x="565.0" y="611.0" width="2.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="568.0" y="622.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (86 samples, 0.22%)</title><rect x="565.0" y="595.0" width="2.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="568.0" y="606.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (86 samples, 0.22%)</title><rect x="565.0" y="579.0" width="2.5" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="568.0" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/valaubr/TablesPool.iterator (462 samples, 1.16%)</title><rect x="567.5" y="835.0" width="13.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="570.5" y="846.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators.filter (21 samples, 0.05%)</title><rect x="567.5" y="819.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="570.5" y="830.0"></text>
</g>
<g>
<title>com.google.common.collect.Iterators$5 (21 samples, 0.05%)</title><rect x="567.5" y="803.0" width="0.6" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="570.5" y="814.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (165 samples, 0.41%)</title><rect x="568.1" y="819.0" width="4.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="571.1" y="830.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (161 samples, 0.40%)</title><rect x="568.3" y="803.0" width="4.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="571.3" y="814.0"></text>
</g>
<g>
<title>com.google.common.collect.Iterators$MergingIterator$1 (12 samples, 0.03%)</title><rect x="568.3" y="787.0" width="0.3" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="571.3" y="798.0"></text>
</g>
<g>
<title>java.util.PriorityQueue (15 samples, 0.04%)</title><rect x="568.8" y="787.0" width="0.4" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="571.8" y="798.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.&lt;init&gt; (17 samples, 0.04%)</title><rect x="569.2" y="787.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="572.2" y="798.0"></text>
</g>
<g>
<title>java.lang.Object[] (17 samples, 0.04%)</title><rect x="569.2" y="771.0" width="0.5" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="572.2" y="782.0"></text>
</g>
<g>
<title>java/util/Spliterators$1Adapter.hasNext (112 samples, 0.28%)</title><rect x="569.7" y="787.0" width="3.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="572.7" y="798.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.tryAdvance (112 samples, 0.28%)</title><rect x="569.7" y="771.0" width="3.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="572.7" y="782.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.doAdvance (112 samples, 0.28%)</title><rect x="569.7" y="755.0" width="3.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="572.7" y="766.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.fillBuffer (18 samples, 0.05%)</title><rect x="569.7" y="739.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="572.7" y="750.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator$$Lambda$112/1312109180.getAsBoolean (18 samples, 0.05%)</title><rect x="569.7" y="723.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="572.7" y="734.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.lambda$initPartialTraversalState$0 (18 samples, 0.05%)</title><rect x="569.7" y="707.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="572.7" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.tryAdvance (18 samples, 0.05%)</title><rect x="569.7" y="691.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="572.7" y="702.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (18 samples, 0.05%)</title><rect x="569.7" y="675.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="572.7" y="686.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/valaubr/MemTable$$Lambda$109/2117681235.apply (18 samples, 0.05%)</title><rect x="569.7" y="659.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="572.7" y="670.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/valaubr/MemTable.lambda$iterator$0 (18 samples, 0.05%)</title><rect x="569.7" y="643.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="572.7" y="654.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.valaubr.Cell (18 samples, 0.05%)</title><rect x="569.7" y="627.0" width="0.5" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="572.7" y="638.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.initPartialTraversalState (94 samples, 0.24%)</title><rect x="570.2" y="739.0" width="2.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="573.2" y="750.0"></text>
</g>
<g>
<title>java.util.stream.SpinedBuffer (22 samples, 0.06%)</title><rect x="570.2" y="723.0" width="0.7" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="573.2" y="734.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (18 samples, 0.05%)</title><rect x="570.9" y="723.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="573.9" y="734.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (18 samples, 0.05%)</title><rect x="570.9" y="707.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="573.9" y="718.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator$$Lambda$111/1565317896.get$Lambda (10 samples, 0.03%)</title><rect x="570.9" y="691.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="573.9" y="702.0"></text>
</g>
<g>
<title>java.util.stream.StreamSpliterators$WrappingSpliterator$$Lambda$111 (10 samples, 0.03%)</title><rect x="570.9" y="675.0" width="0.3" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="573.9" y="686.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (11 samples, 0.03%)</title><rect x="571.4" y="723.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="574.4" y="734.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3.opWrapSink (11 samples, 0.03%)</title><rect x="571.4" y="707.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="574.4" y="718.0"></text>
</g>
<g>
<title>java.util.stream.ReferencePipeline$3$1 (11 samples, 0.03%)</title><rect x="571.4" y="691.0" width="0.4" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="574.4" y="702.0"></text>
</g>
<g>
<title>java/util/stream/SpinedBuffer.&lt;init&gt; (43 samples, 0.11%)</title><rect x="571.8" y="723.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="574.8" y="734.0"></text>
</g>
<g>
<title>java.lang.Object[] (43 samples, 0.11%)</title><rect x="571.8" y="707.0" width="1.2" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="574.8" y="718.0"></text>
</g>
<g>
<title>java.util.ArrayList (18 samples, 0.05%)</title><rect x="573.0" y="819.0" width="0.6" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="576.0" y="830.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (10 samples, 0.03%)</title><rect x="573.6" y="819.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="576.6" y="830.0"></text>
</g>
<g>
<title>java.lang.Object[] (10 samples, 0.03%)</title><rect x="573.6" y="803.0" width="0.3" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="576.6" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$Values.iterator (17 samples, 0.04%)</title><rect x="573.9" y="819.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="576.9" y="830.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$ValueIterator (17 samples, 0.04%)</title><rect x="573.9" y="803.0" width="0.5" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="576.9" y="814.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (29 samples, 0.07%)</title><rect x="574.4" y="819.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="577.4" y="830.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.Iters$CollapseEqualsIterator (17 samples, 0.04%)</title><rect x="574.4" y="803.0" width="0.5" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="577.4" y="814.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (12 samples, 0.03%)</title><rect x="574.9" y="803.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="577.9" y="814.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (12 samples, 0.03%)</title><rect x="574.9" y="787.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="577.9" y="798.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.hasNext (12 samples, 0.03%)</title><rect x="574.9" y="771.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="577.9" y="782.0"></text>
</g>
<g>
<title>java/util/Spliterators$1Adapter.hasNext (12 samples, 0.03%)</title><rect x="574.9" y="755.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="577.9" y="766.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.tryAdvance (12 samples, 0.03%)</title><rect x="574.9" y="739.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="577.9" y="750.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.doAdvance (12 samples, 0.03%)</title><rect x="574.9" y="723.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="577.9" y="734.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.fillBuffer (12 samples, 0.03%)</title><rect x="574.9" y="707.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="577.9" y="718.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator$$Lambda$112/1312109180.getAsBoolean (12 samples, 0.03%)</title><rect x="574.9" y="691.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="577.9" y="702.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.lambda$initPartialTraversalState$0 (12 samples, 0.03%)</title><rect x="574.9" y="675.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="577.9" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.tryAdvance (12 samples, 0.03%)</title><rect x="574.9" y="659.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="577.9" y="670.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (12 samples, 0.03%)</title><rect x="574.9" y="643.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="577.9" y="654.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/valaubr/MemTable$$Lambda$109/2117681235.apply (12 samples, 0.03%)</title><rect x="574.9" y="627.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="577.9" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/valaubr/MemTable.lambda$iterator$0 (12 samples, 0.03%)</title><rect x="574.9" y="611.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="577.9" y="622.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.valaubr.Cell (12 samples, 0.03%)</title><rect x="574.9" y="595.0" width="0.3" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="577.9" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/valaubr/MemTable.iterator (202 samples, 0.51%)</title><rect x="575.2" y="819.0" width="6.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="578.2" y="830.0"></text>
</g>
<g>
<title>java/util/Collection.stream (62 samples, 0.16%)</title><rect x="575.2" y="803.0" width="1.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="578.2" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$EntrySet.spliterator (29 samples, 0.07%)</title><rect x="575.2" y="787.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="578.2" y="798.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapEntryIterator (29 samples, 0.07%)</title><rect x="575.2" y="771.0" width="0.9" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="578.2" y="782.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (33 samples, 0.08%)</title><rect x="576.1" y="787.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="579.1" y="798.0"></text>
</g>
<g>
<title>java.util.stream.ReferencePipeline$Head (33 samples, 0.08%)</title><rect x="576.1" y="771.0" width="1.0" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="579.1" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.entrySet (9 samples, 0.02%)</title><rect x="577.1" y="803.0" width="0.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="580.1" y="814.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$EntrySet (9 samples, 0.02%)</title><rect x="577.1" y="787.0" width="0.2" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="580.1" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (32 samples, 0.08%)</title><rect x="577.3" y="803.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="580.3" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (32 samples, 0.08%)</title><rect x="577.3" y="787.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="580.3" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (32 samples, 0.08%)</title><rect x="577.3" y="771.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="580.3" y="782.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$SubMap (32 samples, 0.08%)</title><rect x="577.3" y="755.0" width="1.0" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="580.3" y="766.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.iterator (61 samples, 0.15%)</title><rect x="578.3" y="803.0" width="1.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="581.3" y="814.0"></text>
</g>
<g>
<title>java/util/Spliterators.iterator (11 samples, 0.03%)</title><rect x="578.3" y="787.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="581.3" y="798.0"></text>
</g>
<g>
<title>java.util.Spliterators$1Adapter (11 samples, 0.03%)</title><rect x="578.3" y="771.0" width="0.3" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="581.3" y="782.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.spliterator (50 samples, 0.13%)</title><rect x="578.6" y="787.0" width="1.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="581.6" y="798.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (10 samples, 0.03%)</title><rect x="578.6" y="771.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="581.6" y="782.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (10 samples, 0.03%)</title><rect x="578.6" y="755.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="581.6" y="766.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline$$Lambda$110/1100032579.get$Lambda (10 samples, 0.03%)</title><rect x="578.6" y="739.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="581.6" y="750.0"></text>
</g>
<g>
<title>java.util.stream.AbstractPipeline$$Lambda$110 (10 samples, 0.03%)</title><rect x="578.6" y="723.0" width="0.3" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="581.6" y="734.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.wrap (40 samples, 0.10%)</title><rect x="578.9" y="771.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="581.9" y="782.0"></text>
</g>
<g>
<title>java.util.stream.StreamSpliterators$WrappingSpliterator (40 samples, 0.10%)</title><rect x="578.9" y="755.0" width="1.2" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="581.9" y="766.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.map (38 samples, 0.10%)</title><rect x="580.1" y="803.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="583.1" y="814.0"></text>
</g>
<g>
<title>java.util.stream.ReferencePipeline$3 (38 samples, 0.10%)</title><rect x="580.1" y="787.0" width="1.1" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="583.1" y="798.0"></text>
</g>
<g>
<title>ru/mail/polis/service/valaubr/HttpService.converterFromByteBuffer (10 samples, 0.03%)</title><rect x="581.2" y="883.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="584.2" y="894.0"></text>
</g>
<g>
<title>byte[] (10 samples, 0.03%)</title><rect x="581.2" y="867.0" width="0.3" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="584.2" y="878.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler.run (4,211 samples, 10.58%)</title><rect x="581.5" y="915.0" width="124.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="584.5" y="926.0">sun/rmi/transpo..</text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (4,211 samples, 10.58%)</title><rect x="581.5" y="899.0" width="124.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="584.5" y="910.0">java/security/A..</text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler$$Lambda$92/110049049.run (4,211 samples, 10.58%)</title><rect x="581.5" y="883.0" width="124.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="584.5" y="894.0">sun/rmi/transpo..</text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler.lambda$run$0 (4,211 samples, 10.58%)</title><rect x="581.5" y="867.0" width="124.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="584.5" y="878.0">sun/rmi/transpo..</text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler.run0 (4,211 samples, 10.58%)</title><rect x="581.5" y="851.0" width="124.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="584.5" y="862.0">sun/rmi/transpo..</text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport.handleMessages (4,211 samples, 10.58%)</title><rect x="581.5" y="835.0" width="124.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="584.5" y="846.0">sun/rmi/transpo..</text>
</g>
<g>
<title>java.io.DataOutputStream (68 samples, 0.17%)</title><rect x="581.5" y="819.0" width="2.0" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="584.5" y="830.0"></text>
</g>
<g>
<title>sun/rmi/transport/Transport.serviceCall (4,133 samples, 10.38%)</title><rect x="583.8" y="819.0" width="122.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="586.8" y="830.0">sun/rmi/transpo..</text>
</g>
<g>
<title>java/rmi/server/ObjID.read (14 samples, 0.04%)</title><rect x="583.8" y="803.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="586.8" y="814.0"></text>
</g>
<g>
<title>java/rmi/server/UID.read (10 samples, 0.03%)</title><rect x="583.9" y="787.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="586.9" y="798.0"></text>
</g>
<g>
<title>java.rmi.server.UID (10 samples, 0.03%)</title><rect x="583.9" y="771.0" width="0.3" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="586.9" y="782.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (3,457 samples, 8.68%)</title><rect x="584.2" y="803.0" width="102.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="587.2" y="814.0">java/securit..</text>
</g>
<g>
<title>sun/rmi/transport/Transport$1.run (3,457 samples, 8.68%)</title><rect x="584.2" y="787.0" width="102.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="587.2" y="798.0">sun/rmi/tran..</text>
</g>
<g>
<title>sun/rmi/transport/Transport$1.run (3,457 samples, 8.68%)</title><rect x="584.2" y="771.0" width="102.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="587.2" y="782.0">sun/rmi/tran..</text>
</g>
<g>
<title>sun/rmi/server/UnicastServerRef.dispatch (3,457 samples, 8.68%)</title><rect x="584.2" y="755.0" width="102.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="587.2" y="766.0">sun/rmi/serv..</text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (1,745 samples, 4.38%)</title><rect x="584.7" y="739.0" width="51.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="587.7" y="750.0">java/..</text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (1,745 samples, 4.38%)</title><rect x="584.7" y="723.0" width="51.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="587.7" y="734.0">jdk/i..</text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor37.invoke (11 samples, 0.03%)</title><rect x="584.7" y="707.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="587.7" y="718.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.getAttributes (11 samples, 0.03%)</title><rect x="584.7" y="691.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="587.7" y="702.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.doPrivilegedOperation (10 samples, 0.03%)</title><rect x="584.8" y="675.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="587.8" y="686.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl$PrivilegedOperation.run (10 samples, 0.03%)</title><rect x="584.8" y="659.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="587.8" y="670.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.doOperation (10 samples, 0.03%)</title><rect x="584.8" y="643.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="587.8" y="654.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/JmxMBeanServer.getAttributes (10 samples, 0.03%)</title><rect x="584.8" y="627.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="587.8" y="638.0"></text>
</g>
<g>
<title>com/sun/jmx/interceptor/DefaultMBeanServerInterceptor.getAttributes (10 samples, 0.03%)</title><rect x="584.8" y="611.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="587.8" y="622.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor40.invoke (1,731 samples, 4.35%)</title><rect x="585.1" y="707.0" width="51.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="588.1" y="718.0">jdk/i..</text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.invoke (1,731 samples, 4.35%)</title><rect x="585.1" y="691.0" width="51.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="588.1" y="702.0">javax..</text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.doPrivilegedOperation (1,484 samples, 3.73%)</title><rect x="585.1" y="675.0" width="43.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="588.1" y="686.0">java..</text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl$PrivilegedOperation.run (1,483 samples, 3.72%)</title><rect x="585.1" y="659.0" width="43.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="588.1" y="670.0">java..</text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.doOperation (1,483 samples, 3.72%)</title><rect x="585.1" y="643.0" width="43.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="588.1" y="654.0">java..</text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/JmxMBeanServer.invoke (1,483 samples, 3.72%)</title><rect x="585.1" y="627.0" width="43.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="588.1" y="638.0">com/..</text>
</g>
<g>
<title>com/sun/jmx/interceptor/DefaultMBeanServerInterceptor.invoke (1,483 samples, 3.72%)</title><rect x="585.1" y="611.0" width="43.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="588.1" y="622.0">com/..</text>
</g>
<g>
<title>javax/management/StandardMBean.invoke (1,477 samples, 3.71%)</title><rect x="585.3" y="595.0" width="43.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="588.3" y="606.0">java..</text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/MBeanSupport.invoke (1,477 samples, 3.71%)</title><rect x="585.3" y="579.0" width="43.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="588.3" y="590.0">com/..</text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/PerInterface.invoke (1,477 samples, 3.71%)</title><rect x="585.3" y="563.0" width="43.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="588.3" y="574.0">com/..</text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/MBeanIntrospector.invokeM (1,476 samples, 3.71%)</title><rect x="585.3" y="547.0" width="43.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="588.3" y="558.0">com/..</text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/MXBeanIntrospector.invokeM2 (1,476 samples, 3.71%)</title><rect x="585.3" y="531.0" width="43.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="588.3" y="542.0">com/..</text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/MXBeanIntrospector.invokeM2 (1,476 samples, 3.71%)</title><rect x="585.3" y="515.0" width="43.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="588.3" y="526.0">com/..</text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/ConvertingMethod.invokeWithOpenReturn (1,476 samples, 3.71%)</title><rect x="585.3" y="499.0" width="43.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="588.3" y="510.0">com/..</text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/ConvertingMethod.invokeWithOpenReturn (1,476 samples, 3.71%)</title><rect x="585.3" y="483.0" width="43.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="588.3" y="494.0">com/..</text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$NonNullMXBeanMapping.toOpenValue (1,372 samples, 3.45%)</title><rect x="585.3" y="467.0" width="40.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="588.3" y="478.0">com..</text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$ArrayMapping.toNonNullOpenValue (1,372 samples, 3.45%)</title><rect x="585.3" y="451.0" width="40.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="588.3" y="462.0">com..</text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$NonNullMXBeanMapping.toOpenValue (1,368 samples, 3.44%)</title><rect x="585.3" y="435.0" width="40.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="588.3" y="446.0">com..</text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$CompositeMapping.toNonNullOpenValue (1,368 samples, 3.44%)</title><rect x="585.3" y="419.0" width="40.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="588.3" y="430.0">com..</text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$NonNullMXBeanMapping.toOpenValue (466 samples, 1.17%)</title><rect x="585.3" y="403.0" width="13.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="588.3" y="414.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$ArrayMapping.toNonNullOpenValue (380 samples, 0.95%)</title><rect x="585.3" y="387.0" width="11.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="588.3" y="398.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$NonNullMXBeanMapping.toOpenValue (352 samples, 0.88%)</title><rect x="585.3" y="371.0" width="10.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="588.3" y="382.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$CompositeMapping.toNonNullOpenValue (352 samples, 0.88%)</title><rect x="585.3" y="355.0" width="10.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="588.3" y="366.0"></text>
</g>
<g>
<title>java.lang.Object[] (32 samples, 0.08%)</title><rect x="585.3" y="339.0" width="0.9" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="588.3" y="350.0"></text>
</g>
<g>
<title>javax/management/openmbean/CompositeDataSupport.&lt;init&gt; (187 samples, 0.47%)</title><rect x="586.3" y="339.0" width="5.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="589.3" y="350.0"></text>
</g>
<g>
<title>javax/management/openmbean/CompositeDataSupport.&lt;init&gt; (39 samples, 0.10%)</title><rect x="586.3" y="323.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="589.3" y="334.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.iterator (12 samples, 0.03%)</title><rect x="586.3" y="307.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="589.3" y="318.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.&lt;init&gt; (12 samples, 0.03%)</title><rect x="586.3" y="291.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="589.3" y="302.0"></text>
</g>
<g>
<title>java/util/TreeMap$KeySet.iterator (12 samples, 0.03%)</title><rect x="586.3" y="275.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="589.3" y="286.0"></text>
</g>
<g>
<title>java/util/TreeMap.keyIterator (12 samples, 0.03%)</title><rect x="586.3" y="259.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="589.3" y="270.0"></text>
</g>
<g>
<title>java.util.TreeMap$KeyIterator (12 samples, 0.03%)</title><rect x="586.3" y="243.0" width="0.4" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="589.3" y="254.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableSet.equals (23 samples, 0.06%)</title><rect x="586.7" y="307.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="589.7" y="318.0"></text>
</g>
<g>
<title>java/util/AbstractSet.equals (23 samples, 0.06%)</title><rect x="586.7" y="291.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="589.7" y="302.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.containsAll (23 samples, 0.06%)</title><rect x="586.7" y="275.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="589.7" y="286.0"></text>
</g>
<g>
<title>java/util/TreeMap$KeySet.iterator (23 samples, 0.06%)</title><rect x="586.7" y="259.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="589.7" y="270.0"></text>
</g>
<g>
<title>java/util/TreeMap.keyIterator (23 samples, 0.06%)</title><rect x="586.7" y="243.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="589.7" y="254.0"></text>
</g>
<g>
<title>java.util.TreeMap$KeyIterator (23 samples, 0.06%)</title><rect x="586.7" y="227.0" width="0.7" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="589.7" y="238.0"></text>
</g>
<g>
<title>javax/management/openmbean/CompositeDataSupport.makeMap (148 samples, 0.37%)</title><rect x="587.5" y="323.0" width="4.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="590.5" y="334.0"></text>
</g>
<g>
<title>java.util.TreeMap (17 samples, 0.04%)</title><rect x="587.5" y="307.0" width="0.5" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="590.5" y="318.0"></text>
</g>
<g>
<title>java/util/TreeMap.put (131 samples, 0.33%)</title><rect x="588.0" y="307.0" width="3.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="591.0" y="318.0"></text>
</g>
<g>
<title>java.util.TreeMap$Entry (131 samples, 0.33%)</title><rect x="588.0" y="291.0" width="3.9" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="591.0" y="302.0"></text>
</g>
<g>
<title>sun/reflect/misc/MethodUtil.invoke (129 samples, 0.32%)</title><rect x="591.9" y="339.0" width="3.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="594.9" y="350.0"></text>
</g>
<g>
<title>java.lang.Object[] (129 samples, 0.32%)</title><rect x="591.9" y="323.0" width="3.8" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="594.9" y="334.0"></text>
</g>
<g>
<title>java/lang/reflect/Array.newInstance (28 samples, 0.07%)</title><rect x="595.7" y="371.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="598.7" y="382.0"></text>
</g>
<g>
<title>javax.management.openmbean.CompositeData[] (28 samples, 0.07%)</title><rect x="595.7" y="355.0" width="0.8" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="598.7" y="366.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$CompositeMapping.toNonNullOpenValue (86 samples, 0.22%)</title><rect x="596.5" y="387.0" width="2.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="599.5" y="398.0"></text>
</g>
<g>
<title>javax/management/openmbean/CompositeDataSupport.&lt;init&gt; (60 samples, 0.15%)</title><rect x="596.8" y="371.0" width="1.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="599.8" y="382.0"></text>
</g>
<g>
<title>javax/management/openmbean/CompositeDataSupport.&lt;init&gt; (23 samples, 0.06%)</title><rect x="596.8" y="355.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="599.8" y="366.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.iterator (10 samples, 0.03%)</title><rect x="596.8" y="339.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="599.8" y="350.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.&lt;init&gt; (10 samples, 0.03%)</title><rect x="596.8" y="323.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="599.8" y="334.0"></text>
</g>
<g>
<title>java/util/TreeMap$KeySet.iterator (10 samples, 0.03%)</title><rect x="596.8" y="307.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="599.8" y="318.0"></text>
</g>
<g>
<title>java/util/TreeMap.keyIterator (10 samples, 0.03%)</title><rect x="596.8" y="291.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="599.8" y="302.0"></text>
</g>
<g>
<title>java.util.TreeMap$KeyIterator (10 samples, 0.03%)</title><rect x="596.8" y="275.0" width="0.3" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="599.8" y="286.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableSet.equals (10 samples, 0.03%)</title><rect x="597.1" y="339.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="600.1" y="350.0"></text>
</g>
<g>
<title>java/util/AbstractSet.equals (10 samples, 0.03%)</title><rect x="597.1" y="323.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="600.1" y="334.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.containsAll (10 samples, 0.03%)</title><rect x="597.1" y="307.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="600.1" y="318.0"></text>
</g>
<g>
<title>java/util/TreeMap$KeySet.iterator (10 samples, 0.03%)</title><rect x="597.1" y="291.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="600.1" y="302.0"></text>
</g>
<g>
<title>java/util/TreeMap.keyIterator (10 samples, 0.03%)</title><rect x="597.1" y="275.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="600.1" y="286.0"></text>
</g>
<g>
<title>java.util.TreeMap$KeyIterator (10 samples, 0.03%)</title><rect x="597.1" y="259.0" width="0.3" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="600.1" y="270.0"></text>
</g>
<g>
<title>javax/management/openmbean/CompositeDataSupport.makeMap (37 samples, 0.09%)</title><rect x="597.5" y="355.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="600.5" y="366.0"></text>
</g>
<g>
<title>java.util.TreeMap (12 samples, 0.03%)</title><rect x="597.5" y="339.0" width="0.4" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="600.5" y="350.0"></text>
</g>
<g>
<title>java/util/TreeMap.put (25 samples, 0.06%)</title><rect x="597.9" y="339.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="600.9" y="350.0"></text>
</g>
<g>
<title>java.util.TreeMap$Entry (25 samples, 0.06%)</title><rect x="597.9" y="323.0" width="0.7" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="600.9" y="334.0"></text>
</g>
<g>
<title>sun/reflect/misc/MethodUtil.invoke (16 samples, 0.04%)</title><rect x="598.6" y="371.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="601.6" y="382.0"></text>
</g>
<g>
<title>java.lang.Object[] (15 samples, 0.04%)</title><rect x="598.6" y="355.0" width="0.5" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="601.6" y="366.0"></text>
</g>
<g>
<title>java.lang.Object[] (54 samples, 0.14%)</title><rect x="599.1" y="403.0" width="1.6" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="602.1" y="414.0"></text>
</g>
<g>
<title>javax.management.openmbean.CompositeDataSupport (17 samples, 0.04%)</title><rect x="600.7" y="403.0" width="0.5" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="603.7" y="414.0"></text>
</g>
<g>
<title>javax/management/openmbean/CompositeDataSupport.&lt;init&gt; (458 samples, 1.15%)</title><rect x="601.2" y="403.0" width="13.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="604.2" y="414.0"></text>
</g>
<g>
<title>javax/management/openmbean/CompositeDataSupport.&lt;init&gt; (43 samples, 0.11%)</title><rect x="601.2" y="387.0" width="1.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="604.2" y="398.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.iterator (17 samples, 0.04%)</title><rect x="601.2" y="371.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="604.2" y="382.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.&lt;init&gt; (17 samples, 0.04%)</title><rect x="601.2" y="355.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="604.2" y="366.0"></text>
</g>
<g>
<title>java/util/TreeMap$KeySet.iterator (17 samples, 0.04%)</title><rect x="601.2" y="339.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="604.2" y="350.0"></text>
</g>
<g>
<title>java/util/TreeMap.keyIterator (17 samples, 0.04%)</title><rect x="601.2" y="323.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="604.2" y="334.0"></text>
</g>
<g>
<title>java.util.TreeMap$KeyIterator (17 samples, 0.04%)</title><rect x="601.2" y="307.0" width="0.5" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="604.2" y="318.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableSet.equals (18 samples, 0.05%)</title><rect x="601.7" y="371.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="604.7" y="382.0"></text>
</g>
<g>
<title>java/util/AbstractSet.equals (18 samples, 0.05%)</title><rect x="601.7" y="355.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="604.7" y="366.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.containsAll (18 samples, 0.05%)</title><rect x="601.7" y="339.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="604.7" y="350.0"></text>
</g>
<g>
<title>java/util/TreeMap$KeySet.iterator (18 samples, 0.05%)</title><rect x="601.7" y="323.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="604.7" y="334.0"></text>
</g>
<g>
<title>java/util/TreeMap.keyIterator (18 samples, 0.05%)</title><rect x="601.7" y="307.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="604.7" y="318.0"></text>
</g>
<g>
<title>java.util.TreeMap$KeyIterator (18 samples, 0.05%)</title><rect x="601.7" y="291.0" width="0.5" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="604.7" y="302.0"></text>
</g>
<g>
<title>javax/management/openmbean/CompositeDataSupport.makeMap (415 samples, 1.04%)</title><rect x="602.5" y="387.0" width="12.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="605.5" y="398.0"></text>
</g>
<g>
<title>java.util.TreeMap (28 samples, 0.07%)</title><rect x="602.5" y="371.0" width="0.8" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="605.5" y="382.0"></text>
</g>
<g>
<title>java/util/TreeMap.put (387 samples, 0.97%)</title><rect x="603.3" y="371.0" width="11.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="606.3" y="382.0"></text>
</g>
<g>
<title>java.util.TreeMap$Entry (387 samples, 0.97%)</title><rect x="603.3" y="355.0" width="11.5" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="606.3" y="366.0"></text>
</g>
<g>
<title>sun/reflect/misc/MethodUtil.invoke (373 samples, 0.94%)</title><rect x="614.8" y="403.0" width="11.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="617.8" y="414.0"></text>
</g>
<g>
<title>java.lang.Object[] (334 samples, 0.84%)</title><rect x="614.8" y="387.0" width="9.9" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="617.8" y="398.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (39 samples, 0.10%)</title><rect x="624.7" y="387.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="627.7" y="398.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (39 samples, 0.10%)</title><rect x="624.7" y="371.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="627.7" y="382.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor3.invoke (39 samples, 0.10%)</title><rect x="624.7" y="355.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="627.7" y="366.0"></text>
</g>
<g>
<title>sun/reflect/misc/Trampoline.invoke (39 samples, 0.10%)</title><rect x="624.7" y="339.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="627.7" y="350.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (39 samples, 0.10%)</title><rect x="624.7" y="323.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="627.7" y="334.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (39 samples, 0.10%)</title><rect x="624.7" y="307.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="627.7" y="318.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor12.invoke (9 samples, 0.02%)</title><rect x="624.7" y="291.0" width="0.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="627.7" y="302.0"></text>
</g>
<g>
<title>java/lang/management/ThreadInfo.getLockedMonitors (9 samples, 0.02%)</title><rect x="624.7" y="275.0" width="0.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="627.7" y="286.0"></text>
</g>
<g>
<title>java.lang.management.MonitorInfo[] (9 samples, 0.02%)</title><rect x="624.7" y="259.0" width="0.2" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="627.7" y="270.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor15.invoke (16 samples, 0.04%)</title><rect x="625.1" y="291.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="628.1" y="302.0"></text>
</g>
<g>
<title>java/lang/management/ThreadInfo.getStackTrace (16 samples, 0.04%)</title><rect x="625.1" y="275.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="628.1" y="286.0"></text>
</g>
<g>
<title>java.lang.StackTraceElement[] (16 samples, 0.04%)</title><rect x="625.1" y="259.0" width="0.4" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="628.1" y="270.0"></text>
</g>
<g>
<title>sun/reflect/misc/MethodUtil.invoke (104 samples, 0.26%)</title><rect x="625.9" y="467.0" width="3.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="628.9" y="478.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (102 samples, 0.26%)</title><rect x="626.0" y="451.0" width="3.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="629.0" y="462.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (102 samples, 0.26%)</title><rect x="626.0" y="435.0" width="3.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="629.0" y="446.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor3.invoke (102 samples, 0.26%)</title><rect x="626.0" y="419.0" width="3.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="629.0" y="430.0"></text>
</g>
<g>
<title>sun/reflect/misc/Trampoline.invoke (102 samples, 0.26%)</title><rect x="626.0" y="403.0" width="3.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="629.0" y="414.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (102 samples, 0.26%)</title><rect x="626.0" y="387.0" width="3.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="629.0" y="398.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (102 samples, 0.26%)</title><rect x="626.0" y="371.0" width="3.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="629.0" y="382.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor45.invoke (102 samples, 0.26%)</title><rect x="626.0" y="355.0" width="3.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="629.0" y="366.0"></text>
</g>
<g>
<title>sun/management/ThreadImpl.getThreadInfo (102 samples, 0.26%)</title><rect x="626.0" y="339.0" width="3.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="629.0" y="350.0"></text>
</g>
<g>
<title>sun/management/ThreadImpl.getThreadInfo1 (102 samples, 0.26%)</title><rect x="626.0" y="323.0" width="3.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="629.0" y="334.0"></text>
</g>
<g>
<title>java.lang.StackTraceElement[] (13 samples, 0.03%)</title><rect x="626.0" y="307.0" width="0.4" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="629.0" y="318.0"></text>
</g>
<g>
<title>java.lang.StackTraceElement (15 samples, 0.04%)</title><rect x="626.4" y="307.0" width="0.4" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="629.4" y="318.0"></text>
</g>
<g>
<title>java.lang.management.ThreadInfo (41 samples, 0.10%)</title><rect x="626.8" y="307.0" width="1.2" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="629.8" y="318.0"></text>
</g>
<g>
<title>java/lang/management/ThreadInfo.&lt;init&gt; (33 samples, 0.08%)</title><rect x="628.0" y="307.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="631.0" y="318.0"></text>
</g>
<g>
<title>java/lang/management/ThreadInfo.initialize (33 samples, 0.08%)</title><rect x="628.0" y="291.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="631.0" y="302.0"></text>
</g>
<g>
<title>java.lang.management.LockInfo (9 samples, 0.02%)</title><rect x="628.0" y="275.0" width="0.3" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="631.0" y="286.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (20 samples, 0.05%)</title><rect x="628.4" y="275.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="631.4" y="286.0"></text>
</g>
<g>
<title>java/lang/invoke/DelegatingMethodHandle$Holder.reinvoke_L (20 samples, 0.05%)</title><rect x="628.4" y="259.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="631.4" y="270.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1010931249.invoke (20 samples, 0.05%)</title><rect x="628.4" y="243.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="631.4" y="254.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (20 samples, 0.05%)</title><rect x="628.4" y="227.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="631.4" y="238.0"></text>
</g>
<g>
<title>java/lang/invoke/StringConcatFactory$MethodHandleInlineCopyStrategy.newArray (16 samples, 0.04%)</title><rect x="628.5" y="211.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="631.5" y="222.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.allocateUninitializedArray (16 samples, 0.04%)</title><rect x="628.5" y="195.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="631.5" y="206.0"></text>
</g>
<g>
<title>byte[] (16 samples, 0.04%)</title><rect x="628.5" y="179.0" width="0.5" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="631.5" y="190.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.getClassLoaderFor (12 samples, 0.03%)</title><rect x="629.0" y="675.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="632.0" y="686.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.unwrap (235 samples, 0.59%)</title><rect x="629.4" y="675.0" width="7.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="632.4" y="686.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (97 samples, 0.24%)</title><rect x="629.4" y="659.0" width="2.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="632.4" y="670.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl$7.run (97 samples, 0.24%)</title><rect x="629.4" y="643.0" width="2.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="632.4" y="654.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl$7.run (97 samples, 0.24%)</title><rect x="629.4" y="627.0" width="2.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="632.4" y="638.0"></text>
</g>
<g>
<title>com/sun/jmx/remote/util/OrderClassLoaders.&lt;init&gt; (37 samples, 0.09%)</title><rect x="629.4" y="611.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="632.4" y="622.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.&lt;init&gt; (37 samples, 0.09%)</title><rect x="629.4" y="595.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="632.4" y="606.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.&lt;init&gt; (37 samples, 0.09%)</title><rect x="629.4" y="579.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="632.4" y="590.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.nameAndId (29 samples, 0.07%)</title><rect x="629.5" y="563.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="632.5" y="574.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (15 samples, 0.04%)</title><rect x="629.7" y="547.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="632.7" y="558.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (15 samples, 0.04%)</title><rect x="629.7" y="531.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="632.7" y="542.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (15 samples, 0.04%)</title><rect x="629.7" y="515.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="632.7" y="526.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (15 samples, 0.04%)</title><rect x="629.7" y="499.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="632.7" y="510.0"></text>
</g>
<g>
<title>byte[] (15 samples, 0.04%)</title><rect x="629.7" y="483.0" width="0.5" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="632.7" y="494.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl$CombinedClassLoader.&lt;init&gt; (58 samples, 0.15%)</title><rect x="630.6" y="611.0" width="1.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="633.6" y="622.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.&lt;init&gt; (34 samples, 0.09%)</title><rect x="630.6" y="595.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="633.6" y="606.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.&lt;init&gt; (34 samples, 0.09%)</title><rect x="630.6" y="579.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="633.6" y="590.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.nameAndId (20 samples, 0.05%)</title><rect x="630.9" y="563.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="633.9" y="574.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (10 samples, 0.03%)</title><rect x="630.9" y="547.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="633.9" y="558.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (10 samples, 0.03%)</title><rect x="630.9" y="531.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="633.9" y="542.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (10 samples, 0.03%)</title><rect x="630.9" y="515.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="633.9" y="526.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (10 samples, 0.03%)</title><rect x="630.9" y="499.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="633.9" y="510.0"></text>
</g>
<g>
<title>byte[] (10 samples, 0.03%)</title><rect x="630.9" y="483.0" width="0.3" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="633.9" y="494.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl$CombinedClassLoader$ClassLoaderWrapper.&lt;init&gt; (21 samples, 0.05%)</title><rect x="631.6" y="595.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="634.6" y="606.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.&lt;init&gt; (21 samples, 0.05%)</title><rect x="631.6" y="579.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="634.6" y="590.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.&lt;init&gt; (21 samples, 0.05%)</title><rect x="631.6" y="563.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="634.6" y="574.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.nameAndId (11 samples, 0.03%)</title><rect x="631.9" y="547.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="634.9" y="558.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.unwrap (138 samples, 0.35%)</title><rect x="632.3" y="659.0" width="4.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="635.3" y="670.0"></text>
</g>
<g>
<title>java/rmi/MarshalledObject.get (138 samples, 0.35%)</title><rect x="632.3" y="643.0" width="4.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="635.3" y="654.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject (94 samples, 0.24%)</title><rect x="632.3" y="627.0" width="2.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="635.3" y="638.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject (94 samples, 0.24%)</title><rect x="632.3" y="611.0" width="2.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="635.3" y="622.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject0 (94 samples, 0.24%)</title><rect x="632.3" y="595.0" width="2.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="635.3" y="606.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readArray (94 samples, 0.24%)</title><rect x="632.3" y="579.0" width="2.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="635.3" y="590.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject0 (86 samples, 0.22%)</title><rect x="632.5" y="563.0" width="2.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="635.5" y="574.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readArray (43 samples, 0.11%)</title><rect x="632.5" y="547.0" width="1.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="635.5" y="558.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readClassDesc (22 samples, 0.06%)</title><rect x="632.5" y="531.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="635.5" y="542.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readNonProxyDesc (22 samples, 0.06%)</title><rect x="632.5" y="515.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="635.5" y="526.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.initNonProxy (12 samples, 0.03%)</title><rect x="632.8" y="499.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="635.8" y="510.0"></text>
</g>
<g>
<title>java/lang/reflect/Array.newInstance (21 samples, 0.05%)</title><rect x="633.2" y="531.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="636.2" y="542.0"></text>
</g>
<g>
<title>long[] (17 samples, 0.04%)</title><rect x="633.2" y="515.0" width="0.5" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="636.2" y="526.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readOrdinaryObject (43 samples, 0.11%)</title><rect x="633.8" y="547.0" width="1.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="636.8" y="558.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readClassDesc (32 samples, 0.08%)</title><rect x="633.8" y="531.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="636.8" y="542.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readNonProxyDesc (32 samples, 0.08%)</title><rect x="633.8" y="515.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="636.8" y="526.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readClassDescriptor (16 samples, 0.04%)</title><rect x="634.2" y="499.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="637.2" y="510.0"></text>
</g>
<g>
<title>java.io.ObjectStreamClass (11 samples, 0.03%)</title><rect x="634.2" y="483.0" width="0.3" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="637.2" y="494.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readSerialData (11 samples, 0.03%)</title><rect x="634.8" y="531.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="637.8" y="542.0"></text>
</g>
<g>
<title>java/rmi/MarshalledObject$MarshalledObjectInputStream.&lt;init&gt; (38 samples, 0.10%)</title><rect x="635.1" y="627.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="638.1" y="638.0"></text>
</g>
<g>
<title>sun/rmi/server/MarshalInputStream.&lt;init&gt; (38 samples, 0.10%)</title><rect x="635.1" y="611.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="638.1" y="622.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.&lt;init&gt; (38 samples, 0.10%)</title><rect x="635.1" y="595.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="638.1" y="606.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream$BlockDataInputStream.&lt;init&gt; (34 samples, 0.09%)</title><rect x="635.1" y="579.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="638.1" y="590.0"></text>
</g>
<g>
<title>byte[] (12 samples, 0.03%)</title><rect x="635.2" y="563.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="638.2" y="574.0"></text>
</g>
<g>
<title>java/io/DataInputStream.&lt;init&gt; (10 samples, 0.03%)</title><rect x="635.9" y="563.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="638.9" y="574.0"></text>
</g>
<g>
<title>char[] (9 samples, 0.02%)</title><rect x="635.9" y="547.0" width="0.3" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="638.9" y="558.0"></text>
</g>
<g>
<title>sun/rmi/server/UnicastRef.marshalValue (908 samples, 2.28%)</title><rect x="636.4" y="739.0" width="26.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="639.4" y="750.0">s..</text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject (908 samples, 2.28%)</title><rect x="636.4" y="723.0" width="26.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="639.4" y="734.0">j..</text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (908 samples, 2.28%)</title><rect x="636.4" y="707.0" width="26.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="639.4" y="718.0">j..</text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeArray (891 samples, 2.24%)</title><rect x="636.4" y="691.0" width="26.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="639.4" y="702.0">j..</text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (891 samples, 2.24%)</title><rect x="636.4" y="675.0" width="26.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="639.4" y="686.0">j..</text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (862 samples, 2.16%)</title><rect x="636.4" y="659.0" width="25.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="639.4" y="670.0">j..</text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (862 samples, 2.16%)</title><rect x="636.4" y="643.0" width="25.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="639.4" y="654.0">j..</text>
</g>
<g>
<title>java/io/ObjectOutputStream.defaultWriteFields (862 samples, 2.16%)</title><rect x="636.4" y="627.0" width="25.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="639.4" y="638.0">j..</text>
</g>
<g>
<title>java.lang.Object[] (11 samples, 0.03%)</title><rect x="636.4" y="611.0" width="0.3" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="639.4" y="622.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (851 samples, 2.14%)</title><rect x="636.7" y="611.0" width="25.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="639.7" y="622.0">j..</text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (832 samples, 2.09%)</title><rect x="636.7" y="595.0" width="24.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="639.7" y="606.0">j..</text>
</g>
<g>
<title>java/io/ObjectOutputStream$HandleTable.assign (12 samples, 0.03%)</title><rect x="636.7" y="579.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="639.7" y="590.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (820 samples, 2.06%)</title><rect x="637.1" y="579.0" width="24.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="640.1" y="590.0">j..</text>
</g>
<g>
<title>java.io.SerialCallbackContext (16 samples, 0.04%)</title><rect x="637.1" y="563.0" width="0.4" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="640.1" y="574.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.defaultWriteFields (104 samples, 0.26%)</title><rect x="637.5" y="563.0" width="3.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="640.5" y="574.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (103 samples, 0.26%)</title><rect x="637.6" y="547.0" width="3.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="640.6" y="558.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (98 samples, 0.25%)</title><rect x="637.6" y="531.0" width="2.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="640.6" y="542.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (98 samples, 0.25%)</title><rect x="637.6" y="515.0" width="2.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="640.6" y="526.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.invokeWriteObject (98 samples, 0.25%)</title><rect x="637.6" y="499.0" width="2.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="640.6" y="510.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (97 samples, 0.24%)</title><rect x="637.6" y="483.0" width="2.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="640.6" y="494.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (97 samples, 0.24%)</title><rect x="637.6" y="467.0" width="2.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="640.6" y="478.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor30.invoke (97 samples, 0.24%)</title><rect x="637.6" y="451.0" width="2.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="640.6" y="462.0"></text>
</g>
<g>
<title>java/util/TreeMap.writeObject (97 samples, 0.24%)</title><rect x="637.6" y="435.0" width="2.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="640.6" y="446.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject (92 samples, 0.23%)</title><rect x="637.8" y="419.0" width="2.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="640.8" y="430.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (92 samples, 0.23%)</title><rect x="637.8" y="403.0" width="2.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="640.8" y="414.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (69 samples, 0.17%)</title><rect x="637.8" y="387.0" width="2.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="640.8" y="398.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (69 samples, 0.17%)</title><rect x="637.8" y="371.0" width="2.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="640.8" y="382.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.defaultWriteFields (69 samples, 0.17%)</title><rect x="637.8" y="355.0" width="2.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="640.8" y="366.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (66 samples, 0.17%)</title><rect x="637.8" y="339.0" width="2.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="640.8" y="350.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (55 samples, 0.14%)</title><rect x="637.8" y="323.0" width="1.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="640.8" y="334.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (55 samples, 0.14%)</title><rect x="637.8" y="307.0" width="1.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="640.8" y="318.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.defaultWriteFields (24 samples, 0.06%)</title><rect x="637.8" y="291.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="640.8" y="302.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (23 samples, 0.06%)</title><rect x="637.9" y="275.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="640.9" y="286.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (20 samples, 0.05%)</title><rect x="637.9" y="259.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="640.9" y="270.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (19 samples, 0.05%)</title><rect x="637.9" y="243.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="640.9" y="254.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.invokeWriteObject (18 samples, 0.05%)</title><rect x="637.9" y="227.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="640.9" y="238.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (17 samples, 0.04%)</title><rect x="638.0" y="211.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="641.0" y="222.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (17 samples, 0.04%)</title><rect x="638.0" y="195.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="641.0" y="206.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor30.invoke (17 samples, 0.04%)</title><rect x="638.0" y="179.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="641.0" y="190.0"></text>
</g>
<g>
<title>java/util/TreeMap.writeObject (17 samples, 0.04%)</title><rect x="638.0" y="163.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="641.0" y="174.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject (16 samples, 0.04%)</title><rect x="638.0" y="147.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="641.0" y="158.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (16 samples, 0.04%)</title><rect x="638.0" y="131.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="641.0" y="142.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (14 samples, 0.04%)</title><rect x="638.0" y="115.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="641.0" y="126.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (14 samples, 0.04%)</title><rect x="638.0" y="99.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="641.0" y="110.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.defaultWriteFields (14 samples, 0.04%)</title><rect x="638.0" y="83.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="641.0" y="94.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (12 samples, 0.03%)</title><rect x="638.0" y="67.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="641.0" y="78.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (11 samples, 0.03%)</title><rect x="638.0" y="51.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="641.0" y="62.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (11 samples, 0.03%)</title><rect x="638.0" y="35.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="641.0" y="46.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.invokeWriteObject (31 samples, 0.08%)</title><rect x="638.6" y="291.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="641.6" y="302.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (31 samples, 0.08%)</title><rect x="638.6" y="275.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="641.6" y="286.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (31 samples, 0.08%)</title><rect x="638.6" y="259.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="641.6" y="270.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor30.invoke (31 samples, 0.08%)</title><rect x="638.6" y="243.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="641.6" y="254.0"></text>
</g>
<g>
<title>java/util/TreeMap.writeObject (31 samples, 0.08%)</title><rect x="638.6" y="227.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="641.6" y="238.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject (29 samples, 0.07%)</title><rect x="638.6" y="211.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="641.6" y="222.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (29 samples, 0.07%)</title><rect x="638.6" y="195.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="641.6" y="206.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (10 samples, 0.03%)</title><rect x="638.6" y="179.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="641.6" y="190.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (10 samples, 0.03%)</title><rect x="638.6" y="163.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="641.6" y="174.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.defaultWriteFields (10 samples, 0.03%)</title><rect x="638.6" y="147.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="641.6" y="158.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeString (15 samples, 0.04%)</title><rect x="638.9" y="179.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="641.9" y="190.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$HandleTable.assign (15 samples, 0.04%)</title><rect x="638.9" y="163.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="641.9" y="174.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$HandleTable.growEntries (15 samples, 0.04%)</title><rect x="638.9" y="147.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="641.9" y="158.0"></text>
</g>
<g>
<title>java.lang.Object[] (9 samples, 0.02%)</title><rect x="639.1" y="131.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="642.1" y="142.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.lookup (11 samples, 0.03%)</title><rect x="639.5" y="323.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="642.5" y="334.0"></text>
</g>
<g>
<title>java.io.ObjectStreamClass$WeakClassKey (11 samples, 0.03%)</title><rect x="639.5" y="307.0" width="0.3" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="642.5" y="318.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.lookup (15 samples, 0.04%)</title><rect x="640.0" y="387.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="643.0" y="398.0"></text>
</g>
<g>
<title>java.io.ObjectStreamClass$WeakClassKey (15 samples, 0.04%)</title><rect x="640.0" y="371.0" width="0.5" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="643.0" y="382.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.invokeWriteObject (700 samples, 1.76%)</title><rect x="640.6" y="563.0" width="20.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="643.6" y="574.0"></text>
</g>
<g>
<title>java.lang.Object[] (21 samples, 0.05%)</title><rect x="640.6" y="547.0" width="0.6" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="643.6" y="558.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (679 samples, 1.71%)</title><rect x="641.2" y="547.0" width="20.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="644.2" y="558.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (679 samples, 1.71%)</title><rect x="641.2" y="531.0" width="20.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="644.2" y="542.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor30.invoke (679 samples, 1.71%)</title><rect x="641.2" y="515.0" width="20.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="644.2" y="526.0"></text>
</g>
<g>
<title>java/util/TreeMap.writeObject (679 samples, 1.71%)</title><rect x="641.2" y="499.0" width="20.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="644.2" y="510.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.defaultWriteObject (15 samples, 0.04%)</title><rect x="641.2" y="483.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="644.2" y="494.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.defaultWriteFields (15 samples, 0.04%)</title><rect x="641.2" y="467.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="644.2" y="478.0"></text>
</g>
<g>
<title>java.lang.Object[] (15 samples, 0.04%)</title><rect x="641.2" y="451.0" width="0.5" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="644.2" y="462.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject (652 samples, 1.64%)</title><rect x="641.7" y="483.0" width="19.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="644.7" y="494.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (652 samples, 1.64%)</title><rect x="641.7" y="467.0" width="19.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="644.7" y="478.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeArray (162 samples, 0.41%)</title><rect x="641.7" y="451.0" width="4.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="644.7" y="462.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (161 samples, 0.40%)</title><rect x="641.7" y="435.0" width="4.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="644.7" y="446.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (129 samples, 0.32%)</title><rect x="641.7" y="419.0" width="3.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="644.7" y="430.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (129 samples, 0.32%)</title><rect x="641.7" y="403.0" width="3.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="644.7" y="414.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.defaultWriteFields (129 samples, 0.32%)</title><rect x="641.7" y="387.0" width="3.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="644.7" y="398.0"></text>
</g>
<g>
<title>java.lang.Object[] (13 samples, 0.03%)</title><rect x="641.7" y="371.0" width="0.4" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="644.7" y="382.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (116 samples, 0.29%)</title><rect x="642.1" y="371.0" width="3.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="645.1" y="382.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (97 samples, 0.24%)</title><rect x="642.1" y="355.0" width="2.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="645.1" y="366.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (96 samples, 0.24%)</title><rect x="642.1" y="339.0" width="2.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="645.1" y="350.0"></text>
</g>
<g>
<title>java.io.SerialCallbackContext (16 samples, 0.04%)</title><rect x="642.1" y="323.0" width="0.5" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="645.1" y="334.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.invokeWriteObject (80 samples, 0.20%)</title><rect x="642.6" y="323.0" width="2.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="645.6" y="334.0"></text>
</g>
<g>
<title>java.lang.Object[] (18 samples, 0.05%)</title><rect x="642.6" y="307.0" width="0.5" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="645.6" y="318.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (62 samples, 0.16%)</title><rect x="643.1" y="307.0" width="1.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="646.1" y="318.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (62 samples, 0.16%)</title><rect x="643.1" y="291.0" width="1.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="646.1" y="302.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor30.invoke (62 samples, 0.16%)</title><rect x="643.1" y="275.0" width="1.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="646.1" y="286.0"></text>
</g>
<g>
<title>java/util/TreeMap.writeObject (62 samples, 0.16%)</title><rect x="643.1" y="259.0" width="1.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="646.1" y="270.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.defaultWriteObject (16 samples, 0.04%)</title><rect x="643.1" y="243.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="646.1" y="254.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.defaultWriteFields (16 samples, 0.04%)</title><rect x="643.1" y="227.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="646.1" y="238.0"></text>
</g>
<g>
<title>java.lang.Object[] (16 samples, 0.04%)</title><rect x="643.1" y="211.0" width="0.5" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="646.1" y="222.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject (34 samples, 0.09%)</title><rect x="643.6" y="243.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="646.6" y="254.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (34 samples, 0.09%)</title><rect x="643.6" y="227.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="646.6" y="238.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.lookup (34 samples, 0.09%)</title><rect x="643.6" y="211.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="646.6" y="222.0"></text>
</g>
<g>
<title>java.io.ObjectStreamClass$WeakClassKey (34 samples, 0.09%)</title><rect x="643.6" y="195.0" width="1.0" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="646.6" y="206.0"></text>
</g>
<g>
<title>java/util/TreeMap.entrySet (12 samples, 0.03%)</title><rect x="644.6" y="243.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="647.6" y="254.0"></text>
</g>
<g>
<title>java.util.TreeMap$EntrySet (12 samples, 0.03%)</title><rect x="644.6" y="227.0" width="0.4" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="647.6" y="238.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.lookup (19 samples, 0.05%)</title><rect x="645.0" y="355.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="648.0" y="366.0"></text>
</g>
<g>
<title>java.io.ObjectStreamClass$WeakClassKey (19 samples, 0.05%)</title><rect x="645.0" y="339.0" width="0.5" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="648.0" y="350.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.lookup (32 samples, 0.08%)</title><rect x="645.5" y="419.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="648.5" y="430.0"></text>
</g>
<g>
<title>java.io.ObjectStreamClass$WeakClassKey (32 samples, 0.08%)</title><rect x="645.5" y="403.0" width="1.0" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="648.5" y="414.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (220 samples, 0.55%)</title><rect x="646.5" y="451.0" width="6.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="649.5" y="462.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$HandleTable.assign (81 samples, 0.20%)</title><rect x="646.5" y="435.0" width="2.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="649.5" y="446.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$HandleTable.growEntries (71 samples, 0.18%)</title><rect x="646.5" y="419.0" width="2.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="649.5" y="430.0"></text>
</g>
<g>
<title>int[] (19 samples, 0.05%)</title><rect x="646.6" y="403.0" width="0.6" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="649.6" y="414.0"></text>
</g>
<g>
<title>java.lang.Object[] (44 samples, 0.11%)</title><rect x="647.3" y="403.0" width="1.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="650.3" y="414.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$HandleTable.growSpine (10 samples, 0.03%)</title><rect x="648.6" y="419.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="651.6" y="430.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (139 samples, 0.35%)</title><rect x="648.9" y="435.0" width="4.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="651.9" y="446.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.defaultWriteFields (139 samples, 0.35%)</title><rect x="648.9" y="419.0" width="4.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="651.9" y="430.0"></text>
</g>
<g>
<title>java.lang.Object[] (9 samples, 0.02%)</title><rect x="648.9" y="403.0" width="0.3" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="651.9" y="414.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (130 samples, 0.33%)</title><rect x="649.2" y="403.0" width="3.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="652.2" y="414.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (114 samples, 0.29%)</title><rect x="649.2" y="387.0" width="3.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="652.2" y="398.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (114 samples, 0.29%)</title><rect x="649.2" y="371.0" width="3.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="652.2" y="382.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.invokeWriteObject (106 samples, 0.27%)</title><rect x="649.4" y="355.0" width="3.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="652.4" y="366.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (98 samples, 0.25%)</title><rect x="649.6" y="339.0" width="2.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="652.6" y="350.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (98 samples, 0.25%)</title><rect x="649.6" y="323.0" width="2.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="652.6" y="334.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor30.invoke (98 samples, 0.25%)</title><rect x="649.6" y="307.0" width="2.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="652.6" y="318.0"></text>
</g>
<g>
<title>java/util/TreeMap.writeObject (98 samples, 0.25%)</title><rect x="649.6" y="291.0" width="2.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="652.6" y="302.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject (91 samples, 0.23%)</title><rect x="649.8" y="275.0" width="2.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="652.8" y="286.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (91 samples, 0.23%)</title><rect x="649.8" y="259.0" width="2.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="652.8" y="270.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (61 samples, 0.15%)</title><rect x="649.8" y="243.0" width="1.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="652.8" y="254.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$HandleTable.assign (61 samples, 0.15%)</title><rect x="649.8" y="227.0" width="1.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="652.8" y="238.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$HandleTable.growEntries (61 samples, 0.15%)</title><rect x="649.8" y="211.0" width="1.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="652.8" y="222.0"></text>
</g>
<g>
<title>int[] (21 samples, 0.05%)</title><rect x="649.9" y="195.0" width="0.6" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="652.9" y="206.0"></text>
</g>
<g>
<title>java.lang.Object[] (34 samples, 0.09%)</title><rect x="650.6" y="195.0" width="1.0" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="653.6" y="206.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.lookup (30 samples, 0.08%)</title><rect x="651.6" y="243.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="654.6" y="254.0"></text>
</g>
<g>
<title>java.io.ObjectStreamClass$WeakClassKey (30 samples, 0.08%)</title><rect x="651.6" y="227.0" width="0.9" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="654.6" y="238.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.lookup (16 samples, 0.04%)</title><rect x="652.5" y="387.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="655.5" y="398.0"></text>
</g>
<g>
<title>java.io.ObjectStreamClass$WeakClassKey (16 samples, 0.04%)</title><rect x="652.5" y="371.0" width="0.5" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="655.5" y="382.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeString (76 samples, 0.19%)</title><rect x="653.0" y="451.0" width="2.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="656.0" y="462.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$HandleTable.assign (76 samples, 0.19%)</title><rect x="653.0" y="435.0" width="2.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="656.0" y="446.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$HandleTable.growEntries (76 samples, 0.19%)</title><rect x="653.0" y="419.0" width="2.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="656.0" y="430.0"></text>
</g>
<g>
<title>int[] (21 samples, 0.05%)</title><rect x="653.2" y="403.0" width="0.6" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="656.2" y="414.0"></text>
</g>
<g>
<title>java.lang.Object[] (49 samples, 0.12%)</title><rect x="653.8" y="403.0" width="1.5" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="656.8" y="414.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.lookup (194 samples, 0.49%)</title><rect x="655.3" y="451.0" width="5.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="658.3" y="462.0"></text>
</g>
<g>
<title>java.io.ObjectStreamClass$WeakClassKey (194 samples, 0.49%)</title><rect x="655.3" y="435.0" width="5.7" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="658.3" y="446.0"></text>
</g>
<g>
<title>java/util/TreeMap.entrySet (12 samples, 0.03%)</title><rect x="661.0" y="483.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="664.0" y="494.0"></text>
</g>
<g>
<title>java.util.TreeMap$EntrySet (12 samples, 0.03%)</title><rect x="661.0" y="467.0" width="0.4" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="664.0" y="478.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.lookup (19 samples, 0.05%)</title><rect x="661.4" y="595.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="664.4" y="606.0"></text>
</g>
<g>
<title>java.io.ObjectStreamClass$WeakClassKey (19 samples, 0.05%)</title><rect x="661.4" y="579.0" width="0.5" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="664.4" y="590.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.lookup (29 samples, 0.07%)</title><rect x="661.9" y="659.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="664.9" y="670.0"></text>
</g>
<g>
<title>java.io.ObjectStreamClass$WeakClassKey (29 samples, 0.07%)</title><rect x="661.9" y="643.0" width="0.9" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="664.9" y="654.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (9 samples, 0.02%)</title><rect x="662.8" y="691.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="665.8" y="702.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (9 samples, 0.02%)</title><rect x="662.8" y="675.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="665.8" y="686.0"></text>
</g>
<g>
<title>sun/rmi/server/UnicastRef.unmarshalValue (257 samples, 0.65%)</title><rect x="663.3" y="739.0" width="7.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="666.3" y="750.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject (255 samples, 0.64%)</title><rect x="663.4" y="723.0" width="7.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="666.4" y="734.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject (255 samples, 0.64%)</title><rect x="663.4" y="707.0" width="7.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="666.4" y="718.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject0 (255 samples, 0.64%)</title><rect x="663.4" y="691.0" width="7.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="666.4" y="702.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readArray (94 samples, 0.24%)</title><rect x="663.4" y="675.0" width="2.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="666.4" y="686.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readClassDesc (71 samples, 0.18%)</title><rect x="663.5" y="659.0" width="2.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="666.5" y="670.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readNonProxyDesc (71 samples, 0.18%)</title><rect x="663.5" y="643.0" width="2.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="666.5" y="654.0"></text>
</g>
<g>
<title>java.io.ObjectStreamClass (9 samples, 0.02%)</title><rect x="663.5" y="627.0" width="0.3" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="666.5" y="638.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readClassDescriptor (53 samples, 0.13%)</title><rect x="663.8" y="627.0" width="1.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="666.8" y="638.0"></text>
</g>
<g>
<title>java.io.ObjectStreamClass (20 samples, 0.05%)</title><rect x="663.8" y="611.0" width="0.6" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="666.8" y="622.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.readNonProxy (33 samples, 0.08%)</title><rect x="664.4" y="611.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="667.4" y="622.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readUTF (27 samples, 0.07%)</title><rect x="664.4" y="595.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="667.4" y="606.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream$BlockDataInputStream.readUTF (27 samples, 0.07%)</title><rect x="664.4" y="579.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="667.4" y="590.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream$BlockDataInputStream.readUTFBody (27 samples, 0.07%)</title><rect x="664.4" y="563.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="667.4" y="574.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (14 samples, 0.04%)</title><rect x="664.7" y="547.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="667.7" y="558.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (14 samples, 0.04%)</title><rect x="664.7" y="531.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="667.7" y="542.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.initNonProxy (9 samples, 0.02%)</title><rect x="665.3" y="627.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="668.3" y="638.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject0 (17 samples, 0.04%)</title><rect x="665.6" y="659.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="668.6" y="670.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readString (17 samples, 0.04%)</title><rect x="665.6" y="643.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="668.6" y="654.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream$BlockDataInputStream.readUTF (17 samples, 0.04%)</title><rect x="665.6" y="627.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="668.6" y="638.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream$BlockDataInputStream.readUTFBody (17 samples, 0.04%)</title><rect x="665.6" y="611.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="668.6" y="622.0"></text>
</g>
<g>
<title>java.lang.StringBuilder (9 samples, 0.02%)</title><rect x="665.6" y="595.0" width="0.3" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="668.6" y="606.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readOrdinaryObject (161 samples, 0.40%)</title><rect x="666.1" y="675.0" width="4.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="669.1" y="686.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readClassDesc (53 samples, 0.13%)</title><rect x="666.1" y="659.0" width="1.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="669.1" y="670.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readNonProxyDesc (53 samples, 0.13%)</title><rect x="666.1" y="643.0" width="1.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="669.1" y="654.0"></text>
</g>
<g>
<title>java.io.ObjectStreamClass (17 samples, 0.04%)</title><rect x="666.1" y="627.0" width="0.5" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="669.1" y="638.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readClassDescriptor (32 samples, 0.08%)</title><rect x="666.6" y="627.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="669.6" y="638.0"></text>
</g>
<g>
<title>java.io.ObjectStreamClass (18 samples, 0.05%)</title><rect x="666.6" y="611.0" width="0.6" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="669.6" y="622.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.readNonProxy (14 samples, 0.04%)</title><rect x="667.2" y="611.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="670.2" y="622.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readUTF (12 samples, 0.03%)</title><rect x="667.2" y="595.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="670.2" y="606.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream$BlockDataInputStream.readUTF (12 samples, 0.03%)</title><rect x="667.2" y="579.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="670.2" y="590.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream$BlockDataInputStream.readUTFBody (12 samples, 0.03%)</title><rect x="667.2" y="563.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="670.2" y="574.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readSerialData (104 samples, 0.26%)</title><rect x="667.7" y="659.0" width="3.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="670.7" y="670.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.getClassDataLayout (11 samples, 0.03%)</title><rect x="667.8" y="643.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="670.8" y="654.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.getClassDataLayout0 (11 samples, 0.03%)</title><rect x="667.8" y="627.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="670.8" y="638.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.invokeReadObject (89 samples, 0.22%)</title><rect x="668.2" y="643.0" width="2.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="671.2" y="654.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (88 samples, 0.22%)</title><rect x="668.2" y="627.0" width="2.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="671.2" y="638.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (88 samples, 0.22%)</title><rect x="668.2" y="611.0" width="2.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="671.2" y="622.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor2.invoke (70 samples, 0.18%)</title><rect x="668.2" y="595.0" width="2.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="671.2" y="606.0"></text>
</g>
<g>
<title>javax/management/ObjectName.readObject (70 samples, 0.18%)</title><rect x="668.2" y="579.0" width="2.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="671.2" y="590.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject (12 samples, 0.03%)</title><rect x="668.2" y="563.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="671.2" y="574.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject (12 samples, 0.03%)</title><rect x="668.2" y="547.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="671.2" y="558.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject0 (12 samples, 0.03%)</title><rect x="668.2" y="531.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="671.2" y="542.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readString (12 samples, 0.03%)</title><rect x="668.2" y="515.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="671.2" y="526.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream$BlockDataInputStream.readUTF (12 samples, 0.03%)</title><rect x="668.2" y="499.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="671.2" y="510.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream$BlockDataInputStream.readUTFBody (12 samples, 0.03%)</title><rect x="668.2" y="483.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="671.2" y="494.0"></text>
</g>
<g>
<title>javax/management/ObjectName.construct (57 samples, 0.14%)</title><rect x="668.6" y="563.0" width="1.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="671.6" y="574.0"></text>
</g>
<g>
<title>javax/management/ObjectName.addProperty (14 samples, 0.04%)</title><rect x="669.4" y="547.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="672.4" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap.put (14 samples, 0.04%)</title><rect x="669.4" y="531.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="672.4" y="542.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (14 samples, 0.04%)</title><rect x="669.4" y="515.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="672.4" y="526.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (11 samples, 0.03%)</title><rect x="669.4" y="499.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="672.4" y="510.0"></text>
</g>
<g>
<title>java.util.HashMap$Node (11 samples, 0.03%)</title><rect x="669.4" y="483.0" width="0.3" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="672.4" y="494.0"></text>
</g>
<g>
<title>javax/management/ObjectName.setCanonicalName (15 samples, 0.04%)</title><rect x="669.8" y="547.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="672.8" y="558.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor36.invoke (18 samples, 0.05%)</title><rect x="670.3" y="595.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="673.3" y="606.0"></text>
</g>
<g>
<title>java/rmi/MarshalledObject.readObject (18 samples, 0.05%)</title><rect x="670.3" y="579.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="673.3" y="590.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.defaultReadObject (18 samples, 0.05%)</title><rect x="670.3" y="563.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="673.3" y="574.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.defaultReadFields (18 samples, 0.05%)</title><rect x="670.3" y="547.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="673.3" y="558.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject0 (17 samples, 0.04%)</title><rect x="670.3" y="531.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="673.3" y="542.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readArray (17 samples, 0.04%)</title><rect x="670.3" y="515.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="673.3" y="526.0"></text>
</g>
<g>
<title>java/lang/reflect/Array.newInstance (14 samples, 0.04%)</title><rect x="670.4" y="499.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="673.4" y="510.0"></text>
</g>
<g>
<title>byte[] (10 samples, 0.03%)</title><rect x="670.5" y="483.0" width="0.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="673.5" y="494.0"></text>
</g>
<g>
<title>sun/rmi/transport/StreamRemoteCall.getResultStream (532 samples, 1.34%)</title><rect x="670.9" y="739.0" width="15.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="673.9" y="750.0"></text>
</g>
<g>
<title>sun/rmi/transport/StreamRemoteCall.getOutputStream (526 samples, 1.32%)</title><rect x="671.1" y="723.0" width="15.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="674.1" y="734.0"></text>
</g>
<g>
<title>sun.rmi.transport.ConnectionOutputStream (9 samples, 0.02%)</title><rect x="671.1" y="707.0" width="0.3" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="674.1" y="718.0"></text>
</g>
<g>
<title>sun/rmi/transport/ConnectionOutputStream.&lt;init&gt; (517 samples, 1.30%)</title><rect x="671.4" y="707.0" width="15.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="674.4" y="718.0"></text>
</g>
<g>
<title>sun/rmi/server/MarshalOutputStream.&lt;init&gt; (510 samples, 1.28%)</title><rect x="671.6" y="691.0" width="15.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="674.6" y="702.0"></text>
</g>
<g>
<title>sun/rmi/server/MarshalOutputStream.&lt;init&gt; (510 samples, 1.28%)</title><rect x="671.6" y="675.0" width="15.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="674.6" y="686.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.&lt;init&gt; (503 samples, 1.26%)</title><rect x="671.6" y="659.0" width="14.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="674.6" y="670.0"></text>
</g>
<g>
<title>java.io.ObjectOutputStream$HandleTable (15 samples, 0.04%)</title><rect x="671.7" y="643.0" width="0.5" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="674.7" y="654.0"></text>
</g>
<g>
<title>java.io.ObjectOutputStream$ReplaceTable (9 samples, 0.02%)</title><rect x="672.2" y="643.0" width="0.2" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="675.2" y="654.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$BlockDataOutputStream.&lt;init&gt; (257 samples, 0.65%)</title><rect x="672.4" y="643.0" width="7.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="675.4" y="654.0"></text>
</g>
<g>
<title>byte[] (18 samples, 0.05%)</title><rect x="672.4" y="627.0" width="0.6" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="675.4" y="638.0"></text>
</g>
<g>
<title>byte[] (91 samples, 0.23%)</title><rect x="673.0" y="627.0" width="2.7" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="676.0" y="638.0"></text>
</g>
<g>
<title>char[] (20 samples, 0.05%)</title><rect x="675.7" y="627.0" width="0.5" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="678.7" y="638.0"></text>
</g>
<g>
<title>char[] (106 samples, 0.27%)</title><rect x="676.2" y="627.0" width="3.2" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="679.2" y="638.0"></text>
</g>
<g>
<title>java.io.DataOutputStream (11 samples, 0.03%)</title><rect x="679.4" y="627.0" width="0.3" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="682.4" y="638.0"></text>
</g>
<g>
<title>java/io/DataOutputStream.&lt;init&gt; (11 samples, 0.03%)</title><rect x="679.7" y="627.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="682.7" y="638.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$HandleTable.&lt;init&gt; (89 samples, 0.22%)</title><rect x="680.0" y="643.0" width="2.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="683.0" y="654.0"></text>
</g>
<g>
<title>int[] (55 samples, 0.14%)</title><rect x="680.0" y="627.0" width="1.7" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="683.0" y="638.0"></text>
</g>
<g>
<title>java.lang.Object[] (34 samples, 0.09%)</title><rect x="681.7" y="627.0" width="1.0" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="684.7" y="638.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$ReplaceTable.&lt;init&gt; (128 samples, 0.32%)</title><rect x="682.7" y="643.0" width="3.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="685.7" y="654.0"></text>
</g>
<g>
<title>java.io.ObjectOutputStream$HandleTable (23 samples, 0.06%)</title><rect x="682.7" y="627.0" width="0.7" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="685.7" y="638.0"></text>
</g>
<g>
<title>java.lang.Object[] (16 samples, 0.04%)</title><rect x="683.4" y="627.0" width="0.4" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="686.4" y="638.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$HandleTable.&lt;init&gt; (89 samples, 0.22%)</title><rect x="683.8" y="627.0" width="2.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="686.8" y="638.0"></text>
</g>
<g>
<title>int[] (63 samples, 0.16%)</title><rect x="683.8" y="611.0" width="1.9" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="686.8" y="622.0"></text>
</g>
<g>
<title>java.lang.Object[] (26 samples, 0.07%)</title><rect x="685.7" y="611.0" width="0.8" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="688.7" y="622.0"></text>
</g>
<g>
<title>sun.rmi.transport.Transport$1 (14 samples, 0.04%)</title><rect x="686.7" y="803.0" width="0.4" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="689.7" y="814.0"></text>
</g>
<g>
<title>sun/rmi/transport/StreamRemoteCall.getInputStream (637 samples, 1.60%)</title><rect x="687.1" y="803.0" width="18.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="690.1" y="814.0"></text>
</g>
<g>
<title>sun.rmi.transport.ConnectionInputStream (11 samples, 0.03%)</title><rect x="687.1" y="787.0" width="0.3" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="690.1" y="798.0"></text>
</g>
<g>
<title>sun/rmi/transport/ConnectionInputStream.&lt;init&gt; (626 samples, 1.57%)</title><rect x="687.4" y="787.0" width="18.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="690.4" y="798.0"></text>
</g>
<g>
<title>java.util.HashMap (12 samples, 0.03%)</title><rect x="687.4" y="771.0" width="0.4" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="690.4" y="782.0"></text>
</g>
<g>
<title>sun/rmi/server/MarshalInputStream.&lt;init&gt; (614 samples, 1.54%)</title><rect x="687.8" y="771.0" width="18.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="690.8" y="782.0"></text>
</g>
<g>
<title>java.util.HashMap (12 samples, 0.03%)</title><rect x="687.8" y="755.0" width="0.3" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="690.8" y="766.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.&lt;init&gt; (602 samples, 1.51%)</title><rect x="688.1" y="755.0" width="17.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="691.1" y="766.0"></text>
</g>
<g>
<title>java.io.ObjectInputStream$BlockDataInputStream (11 samples, 0.03%)</title><rect x="688.1" y="739.0" width="0.4" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="691.1" y="750.0"></text>
</g>
<g>
<title>java.io.ObjectInputStream$HandleTable (16 samples, 0.04%)</title><rect x="688.5" y="739.0" width="0.4" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="691.5" y="750.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream$BlockDataInputStream.&lt;init&gt; (486 samples, 1.22%)</title><rect x="689.1" y="739.0" width="14.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="692.1" y="750.0"></text>
</g>
<g>
<title>byte[] (41 samples, 0.10%)</title><rect x="689.1" y="723.0" width="1.2" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="692.1" y="734.0"></text>
</g>
<g>
<title>byte[] (131 samples, 0.33%)</title><rect x="690.3" y="723.0" width="3.9" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="693.3" y="734.0"></text>
</g>
<g>
<title>char[] (31 samples, 0.08%)</title><rect x="694.2" y="723.0" width="0.9" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="697.2" y="734.0"></text>
</g>
<g>
<title>char[] (119 samples, 0.30%)</title><rect x="695.1" y="723.0" width="3.5" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="698.1" y="734.0"></text>
</g>
<g>
<title>java.io.DataInputStream (11 samples, 0.03%)</title><rect x="698.6" y="723.0" width="0.3" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="701.6" y="734.0"></text>
</g>
<g>
<title>java.io.ObjectInputStream$PeekInputStream (9 samples, 0.02%)</title><rect x="698.9" y="723.0" width="0.3" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="701.9" y="734.0"></text>
</g>
<g>
<title>java/io/DataInputStream.&lt;init&gt; (144 samples, 0.36%)</title><rect x="699.2" y="723.0" width="4.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="702.2" y="734.0"></text>
</g>
<g>
<title>byte[] (49 samples, 0.12%)</title><rect x="699.2" y="707.0" width="1.5" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="702.2" y="718.0"></text>
</g>
<g>
<title>char[] (89 samples, 0.22%)</title><rect x="700.7" y="707.0" width="2.6" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="703.7" y="718.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream$HandleTable.&lt;init&gt; (84 samples, 0.21%)</title><rect x="703.5" y="739.0" width="2.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="706.5" y="750.0"></text>
</g>
<g>
<title>byte[] (21 samples, 0.05%)</title><rect x="703.5" y="723.0" width="0.6" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="706.5" y="734.0"></text>
</g>
<g>
<title>java.io.ObjectInputStream$HandleTable$HandleList[] (28 samples, 0.07%)</title><rect x="704.1" y="723.0" width="0.8" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="707.1" y="734.0"></text>
</g>
<g>
<title>java.lang.Object[] (35 samples, 0.09%)</title><rect x="704.9" y="723.0" width="1.1" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="707.9" y="734.0"></text>
</g>
<g>
<title>sun/rmi/transport/Transport.setContextClassLoader (11 samples, 0.03%)</title><rect x="706.0" y="803.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="709.0" y="814.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (11 samples, 0.03%)</title><rect x="706.0" y="787.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="709.0" y="798.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (11 samples, 0.03%)</title><rect x="706.0" y="771.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="709.0" y="782.0"></text>
</g>
<g>
<title>sun/rmi/transport/Transport$$Lambda$99/1936623664.get$Lambda (11 samples, 0.03%)</title><rect x="706.0" y="755.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="709.0" y="766.0"></text>
</g>
<g>
<title>sun.rmi.transport.Transport$$Lambda$99 (11 samples, 0.03%)</title><rect x="706.0" y="739.0" width="0.3" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="709.0" y="750.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (16,323 samples, 40.99%)</title><rect x="706.3" y="963.0" width="483.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="709.3" y="974.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (330 samples, 0.83%)</title><rect x="706.3" y="947.0" width="9.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="709.3" y="958.0"></text>
</g>
<g>
<title>one.nio.net.NativeSelector$2 (330 samples, 0.83%)</title><rect x="706.3" y="931.0" width="9.8" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="709.3" y="942.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (15,993 samples, 40.16%)</title><rect x="716.1" y="947.0" width="473.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="719.1" y="958.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (15,993 samples, 40.16%)</title><rect x="716.1" y="931.0" width="473.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="719.1" y="942.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (15,993 samples, 40.16%)</title><rect x="716.1" y="915.0" width="473.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="719.1" y="926.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (4,038 samples, 10.14%)</title><rect x="716.1" y="899.0" width="119.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="719.1" y="910.0">one/nio/http/Ht..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (4,038 samples, 10.14%)</title><rect x="716.1" y="883.0" width="119.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="719.1" y="894.0">one/nio/http/Ht..</text>
</g>
<g>
<title>RequestHandler0_get.handleRequest (2,536 samples, 6.37%)</title><rect x="716.1" y="867.0" width="75.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="719.1" y="878.0">RequestH..</text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (1,495 samples, 3.75%)</title><rect x="716.1" y="851.0" width="44.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="719.1" y="862.0">one/..</text>
</g>
<g>
<title>one/nio/http/Request.getParameter (1,495 samples, 3.75%)</title><rect x="716.1" y="835.0" width="44.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="719.1" y="846.0">one/..</text>
</g>
<g>
<title>java/lang/String.substring (1,495 samples, 3.75%)</title><rect x="716.1" y="819.0" width="44.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="719.1" y="830.0">java..</text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1,495 samples, 3.75%)</title><rect x="716.1" y="803.0" width="44.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="719.1" y="814.0">java..</text>
</g>
<g>
<title>java.lang.String (688 samples, 1.73%)</title><rect x="716.1" y="787.0" width="20.4" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="719.1" y="798.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (807 samples, 2.03%)</title><rect x="736.5" y="787.0" width="23.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="739.5" y="798.0">j..</text>
</g>
<g>
<title>byte[] (807 samples, 2.03%)</title><rect x="736.5" y="771.0" width="23.9" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="739.5" y="782.0">b..</text>
</g>
<g>
<title>ru/mail/polis/service/valaubr/HttpService.get (1,041 samples, 2.61%)</title><rect x="760.4" y="851.0" width="30.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="763.4" y="862.0">ru..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (1,013 samples, 2.54%)</title><rect x="760.4" y="835.0" width="30.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="763.4" y="846.0">ja..</text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1,013 samples, 2.54%)</title><rect x="760.4" y="819.0" width="30.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="763.4" y="830.0">ja..</text>
</g>
<g>
<title>ru/mail/polis/service/valaubr/HttpService$$Lambda$118/366139759.get$Lambda (1,013 samples, 2.54%)</title><rect x="760.4" y="803.0" width="30.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="763.4" y="814.0">ru..</text>
</g>
<g>
<title>ru.mail.polis.service.valaubr.HttpService$$Lambda$118 (1,013 samples, 2.54%)</title><rect x="760.4" y="787.0" width="30.0" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="763.4" y="798.0">ru..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (28 samples, 0.07%)</title><rect x="790.4" y="835.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="793.4" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (28 samples, 0.07%)</title><rect x="790.4" y="819.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="793.4" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (28 samples, 0.07%)</title><rect x="790.4" y="803.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="793.4" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (28 samples, 0.07%)</title><rect x="790.4" y="787.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="793.4" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (28 samples, 0.07%)</title><rect x="790.4" y="771.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="793.4" y="782.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$Node (28 samples, 0.07%)</title><rect x="790.4" y="755.0" width="0.8" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="793.4" y="766.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (1,502 samples, 3.77%)</title><rect x="791.2" y="867.0" width="44.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="794.2" y="878.0">one/..</text>
</g>
<g>
<title>java/lang/String.substring (1,502 samples, 3.77%)</title><rect x="791.2" y="851.0" width="44.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="794.2" y="862.0">java..</text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1,502 samples, 3.77%)</title><rect x="791.2" y="835.0" width="44.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="794.2" y="846.0">java..</text>
</g>
<g>
<title>java.lang.String (604 samples, 1.52%)</title><rect x="791.2" y="819.0" width="17.9" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="794.2" y="830.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (898 samples, 2.26%)</title><rect x="809.1" y="819.0" width="26.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="812.1" y="830.0">j..</text>
</g>
<g>
<title>byte[] (898 samples, 2.26%)</title><rect x="809.1" y="803.0" width="26.6" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="812.1" y="814.0">b..</text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (7,942 samples, 19.94%)</title><rect x="835.7" y="899.0" width="235.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="838.7" y="910.0">one/nio/http/HttpSession.parseR..</text>
</g>
<g>
<title>one.nio.http.Request (1,298 samples, 3.26%)</title><rect x="835.7" y="883.0" width="38.5" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="838.7" y="894.0">one..</text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (2,557 samples, 6.42%)</title><rect x="874.2" y="883.0" width="75.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="877.2" y="894.0">one/nio/..</text>
</g>
<g>
<title>java.lang.String[] (2,267 samples, 5.69%)</title><rect x="874.2" y="867.0" width="67.2" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="877.2" y="878.0">java.la..</text>
</g>
<g>
<title>java.lang.String[] (290 samples, 0.73%)</title><rect x="941.4" y="867.0" width="8.6" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="944.4" y="878.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (4,087 samples, 10.26%)</title><rect x="950.0" y="883.0" width="121.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="953.0" y="894.0">one/nio/util/Ut..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (4,087 samples, 10.26%)</title><rect x="950.0" y="867.0" width="121.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="953.0" y="878.0">one/nio/util/Ut..</text>
</g>
<g>
<title>char[] (2,111 samples, 5.30%)</title><rect x="950.0" y="851.0" width="62.5" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="953.0" y="862.0">char[]</text>
</g>
<g>
<title>char[] (101 samples, 0.25%)</title><rect x="1012.5" y="851.0" width="3.0" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1015.5" y="862.0"></text>
</g>
<g>
<title>java.lang.String (656 samples, 1.65%)</title><rect x="1015.5" y="851.0" width="19.5" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="1018.5" y="862.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1,219 samples, 3.06%)</title><rect x="1035.0" y="851.0" width="36.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1038.0" y="862.0">jav..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1,219 samples, 3.06%)</title><rect x="1035.0" y="835.0" width="36.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1038.0" y="846.0">jav..</text>
</g>
<g>
<title>java/lang/StringUTF16.compress (1,219 samples, 3.06%)</title><rect x="1035.0" y="819.0" width="36.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1038.0" y="830.0">jav..</text>
</g>
<g>
<title>byte[] (1,219 samples, 3.06%)</title><rect x="1035.0" y="803.0" width="36.1" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="1038.0" y="814.0">byt..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (4,013 samples, 10.08%)</title><rect x="1071.1" y="899.0" width="118.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1074.1" y="910.0">one/nio/util/U..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (4,013 samples, 10.08%)</title><rect x="1071.1" y="883.0" width="118.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1074.1" y="894.0">one/nio/util/U..</text>
</g>
<g>
<title>char[] (1,630 samples, 4.09%)</title><rect x="1071.1" y="867.0" width="48.3" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="1074.1" y="878.0">char[]</text>
</g>
<g>
<title>char[] (60 samples, 0.15%)</title><rect x="1119.4" y="867.0" width="1.8" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1122.4" y="878.0"></text>
</g>
<g>
<title>java.lang.String (999 samples, 2.51%)</title><rect x="1121.2" y="867.0" width="29.6" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="1124.2" y="878.0">ja..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1,324 samples, 3.32%)</title><rect x="1150.8" y="867.0" width="39.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1153.8" y="878.0">jav..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1,324 samples, 3.32%)</title><rect x="1150.8" y="851.0" width="39.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1153.8" y="862.0">jav..</text>
</g>
<g>
<title>java/lang/StringUTF16.compress (1,324 samples, 3.32%)</title><rect x="1150.8" y="835.0" width="39.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1153.8" y="846.0">jav..</text>
</g>
<g>
<title>byte[] (1,324 samples, 3.32%)</title><rect x="1150.8" y="819.0" width="39.2" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="1153.8" y="830.0">byt..</text>
</g>
</g>
</svg>
