<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1206" onload="init(evt)" viewBox="0 0 1200 1206" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1189"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1189"> </text>
<g id="frames">
<g>
<title>all (1,146 samples, 100.00%)</title><rect x="10.0" y="1155.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1166.0">all</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/ld-2.31.so (2 samples, 0.17%)</title><rect x="10.0" y="1139.0" width="2.1" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="1150.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (1 samples, 0.09%)</title><rect x="12.1" y="1139.0" width="1.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="15.1" y="1150.0"></text>
</g>
<g>
<title>Runtime1::counter_overflow(JavaThread*, int, Method*) (1 samples, 0.09%)</title><rect x="13.1" y="1139.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="16.1" y="1150.0"></text>
</g>
<g>
<title>TieredThresholdPolicy::method_invocation_event(methodHandle const&amp;, methodHandle const&amp;, CompLevel, CompiledMethod*, JavaThread*) (1 samples, 0.09%)</title><rect x="13.1" y="1123.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="16.1" y="1134.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (11 samples, 0.96%)</title><rect x="14.1" y="1139.0" width="11.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="17.1" y="1150.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (11 samples, 0.96%)</title><rect x="14.1" y="1123.0" width="11.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="17.1" y="1134.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) [clone .part.93] (11 samples, 0.96%)</title><rect x="14.1" y="1107.0" width="11.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="17.1" y="1118.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (10 samples, 0.87%)</title><rect x="15.1" y="1091.0" width="10.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="18.1" y="1102.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) [clone .part.71] (8 samples, 0.70%)</title><rect x="15.1" y="1075.0" width="8.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="18.1" y="1086.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.09%)</title><rect x="23.4" y="1075.0" width="1.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="26.4" y="1086.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.09%)</title><rect x="24.4" y="1075.0" width="1.0" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="27.4" y="1086.0"></text>
</g>
<g>
<title>[no_Java_frame] (2 samples, 0.17%)</title><rect x="25.4" y="1139.0" width="2.1" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="28.4" y="1150.0"></text>
</g>
<g>
<title>[not_walkable_Java] (1 samples, 0.09%)</title><rect x="27.5" y="1139.0" width="1.0" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="30.5" y="1150.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.09%)</title><rect x="27.5" y="1123.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="30.5" y="1134.0"></text>
</g>
<g>
<title>[unknown] (13 samples, 1.13%)</title><rect x="28.5" y="1139.0" width="13.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="31.5" y="1150.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/ld-2.31.so (4 samples, 0.35%)</title><rect x="28.5" y="1123.0" width="4.2" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="31.5" y="1134.0"></text>
</g>
<g>
<title>pthread_cond_timedwait@@GLIBC_2.3.2 (9 samples, 0.79%)</title><rect x="32.7" y="1123.0" width="9.2" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="35.7" y="1134.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (5 samples, 0.44%)</title><rect x="36.8" y="1107.0" width="5.1" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="39.8" y="1118.0"></text>
</g>
<g>
<title>do_syscall_64 (5 samples, 0.44%)</title><rect x="36.8" y="1091.0" width="5.1" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="39.8" y="1102.0"></text>
</g>
<g>
<title>__x64_sys_futex (4 samples, 0.35%)</title><rect x="37.8" y="1075.0" width="4.1" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="40.8" y="1086.0"></text>
</g>
<g>
<title>do_futex (4 samples, 0.35%)</title><rect x="37.8" y="1059.0" width="4.1" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="40.8" y="1070.0"></text>
</g>
<g>
<title>_raw_spin_lock (1 samples, 0.09%)</title><rect x="37.8" y="1043.0" width="1.0" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="40.8" y="1054.0"></text>
</g>
<g>
<title>futex_wait (3 samples, 0.26%)</title><rect x="38.8" y="1043.0" width="3.1" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="41.8" y="1054.0"></text>
</g>
<g>
<title>_cond_resched (1 samples, 0.09%)</title><rect x="38.8" y="1027.0" width="1.1" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="41.8" y="1038.0"></text>
</g>
<g>
<title>futex_wait_queue_me (1 samples, 0.09%)</title><rect x="39.9" y="1027.0" width="1.0" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="42.9" y="1038.0"></text>
</g>
<g>
<title>hrtimer_sleeper_start_expires (1 samples, 0.09%)</title><rect x="39.9" y="1011.0" width="1.0" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="42.9" y="1022.0"></text>
</g>
<g>
<title>hrtimer_start_range_ns (1 samples, 0.09%)</title><rect x="39.9" y="995.0" width="1.0" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="42.9" y="1006.0"></text>
</g>
<g>
<title>__lock_text_start (1 samples, 0.09%)</title><rect x="39.9" y="979.0" width="1.0" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="42.9" y="990.0"></text>
</g>
<g>
<title>plist_add (1 samples, 0.09%)</title><rect x="40.9" y="1027.0" width="1.0" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="43.9" y="1038.0"></text>
</g>
<g>
<title>[unknown_Java] (8 samples, 0.70%)</title><rect x="41.9" y="1139.0" width="8.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="44.9" y="1150.0"></text>
</g>
<g>
<title>Interpreter (2 samples, 0.17%)</title><rect x="41.9" y="1123.0" width="2.1" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="44.9" y="1134.0"></text>
</g>
<g>
<title>__pthread_cond_signal (6 samples, 0.52%)</title><rect x="44.0" y="1123.0" width="6.2" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="47.0" y="1134.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (4 samples, 0.35%)</title><rect x="46.0" y="1107.0" width="4.2" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="49.0" y="1118.0"></text>
</g>
<g>
<title>do_syscall_64 (4 samples, 0.35%)</title><rect x="46.0" y="1091.0" width="4.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="49.0" y="1102.0"></text>
</g>
<g>
<title>__x64_sys_futex (3 samples, 0.26%)</title><rect x="47.1" y="1075.0" width="3.1" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="50.1" y="1086.0"></text>
</g>
<g>
<title>do_futex (3 samples, 0.26%)</title><rect x="47.1" y="1059.0" width="3.1" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="50.1" y="1070.0"></text>
</g>
<g>
<title>futex_wake (3 samples, 0.26%)</title><rect x="47.1" y="1043.0" width="3.1" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="50.1" y="1054.0"></text>
</g>
<g>
<title>get_futex_key (1 samples, 0.09%)</title><rect x="47.1" y="1027.0" width="1.0" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="50.1" y="1038.0"></text>
</g>
<g>
<title>wake_up_q (2 samples, 0.17%)</title><rect x="48.1" y="1027.0" width="2.1" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="51.1" y="1038.0"></text>
</g>
<g>
<title>try_to_wake_up (2 samples, 0.17%)</title><rect x="48.1" y="1011.0" width="2.1" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="51.1" y="1022.0"></text>
</g>
<g>
<title>__lock_text_start (2 samples, 0.17%)</title><rect x="48.1" y="995.0" width="2.1" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="51.1" y="1006.0"></text>
</g>
<g>
<title>java/lang/Thread.run (611 samples, 53.32%)</title><rect x="50.2" y="1139.0" width="629.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="53.2" y="1150.0">java/lang/Thread.run</text>
</g>
<g>
<title>com/sun/jmx/remote/internal/ServerCommunicatorAdmin$Timeout.run (2 samples, 0.17%)</title><rect x="50.2" y="1123.0" width="2.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="53.2" y="1134.0"></text>
</g>
<g>
<title>com/sun/jmx/remote/internal/ServerCommunicatorAdmin.logtime (1 samples, 0.09%)</title><rect x="50.2" y="1107.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="53.2" y="1118.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1964884030.linkToTargetMethod (1 samples, 0.09%)</title><rect x="50.2" y="1091.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="53.2" y="1102.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/124977967.invoke (1 samples, 0.09%)</title><rect x="50.2" y="1075.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="53.2" y="1086.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/995598331.invokeStatic (1 samples, 0.09%)</title><rect x="50.2" y="1059.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="53.2" y="1070.0"></text>
</g>
<g>
<title>java/lang/StringConcatHelper.mixLen (1 samples, 0.09%)</title><rect x="50.2" y="1043.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="53.2" y="1054.0"></text>
</g>
<g>
<title>java/lang/Object.wait (1 samples, 0.09%)</title><rect x="51.2" y="1107.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="54.2" y="1118.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.09%)</title><rect x="51.2" y="1091.0" width="1.0" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="54.2" y="1102.0"></text>
</g>
<g>
<title>pthread_cond_timedwait@@GLIBC_2.3.2 (1 samples, 0.09%)</title><rect x="51.2" y="1075.0" width="1.0" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="54.2" y="1086.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.09%)</title><rect x="51.2" y="1059.0" width="1.0" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="54.2" y="1070.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.09%)</title><rect x="51.2" y="1043.0" width="1.0" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="54.2" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (609 samples, 53.14%)</title><rect x="52.2" y="1123.0" width="627.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="55.2" y="1134.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (609 samples, 53.14%)</title><rect x="52.2" y="1107.0" width="627.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="55.2" y="1118.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.09%)</title><rect x="61.5" y="1091.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="64.5" y="1102.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (2 samples, 0.17%)</title><rect x="62.5" y="1091.0" width="2.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="65.5" y="1102.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (2 samples, 0.17%)</title><rect x="62.5" y="1075.0" width="2.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="65.5" y="1086.0"></text>
</g>
<g>
<title>JVM_IsInterrupted (1 samples, 0.09%)</title><rect x="62.5" y="1059.0" width="1.0" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="65.5" y="1070.0"></text>
</g>
<g>
<title>ThreadsListHandle::~ThreadsListHandle() (1 samples, 0.09%)</title><rect x="63.5" y="1059.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="66.5" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.lock (3 samples, 0.26%)</title><rect x="64.6" y="1091.0" width="3.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="67.6" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.17%)</title><rect x="65.6" y="1075.0" width="2.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="68.6" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryAcquire (1 samples, 0.09%)</title><rect x="66.6" y="1059.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="69.6" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (111 samples, 9.69%)</title><rect x="67.7" y="1091.0" width="114.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="70.7" y="1102.0">java/util/conc..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (111 samples, 9.69%)</title><rect x="67.7" y="1075.0" width="114.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="70.7" y="1086.0">java/util/conc..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (92 samples, 8.03%)</title><rect x="67.7" y="1059.0" width="94.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="70.7" y="1070.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (3 samples, 0.26%)</title><rect x="69.7" y="1043.0" width="3.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="72.7" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (3 samples, 0.26%)</title><rect x="69.7" y="1027.0" width="3.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="72.7" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (3 samples, 0.26%)</title><rect x="69.7" y="1011.0" width="3.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="72.7" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (5 samples, 0.44%)</title><rect x="72.8" y="1043.0" width="5.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="75.8" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (5 samples, 0.44%)</title><rect x="72.8" y="1027.0" width="5.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="75.8" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.09%)</title><rect x="74.9" y="1011.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="77.9" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.09%)</title><rect x="74.9" y="995.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="77.9" y="1006.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (1 samples, 0.09%)</title><rect x="74.9" y="979.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="77.9" y="990.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.09%)</title><rect x="74.9" y="963.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="77.9" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.09%)</title><rect x="75.9" y="1011.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="78.9" y="1022.0"></text>
</g>
<g>
<title>page_fault (1 samples, 0.09%)</title><rect x="76.9" y="1011.0" width="1.1" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="79.9" y="1022.0"></text>
</g>
<g>
<title>do_page_fault (1 samples, 0.09%)</title><rect x="76.9" y="995.0" width="1.1" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="79.9" y="1006.0"></text>
</g>
<g>
<title>__do_page_fault (1 samples, 0.09%)</title><rect x="76.9" y="979.0" width="1.1" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="79.9" y="990.0"></text>
</g>
<g>
<title>do_user_addr_fault (1 samples, 0.09%)</title><rect x="76.9" y="963.0" width="1.1" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="79.9" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.isOnSyncQueue (1 samples, 0.09%)</title><rect x="78.0" y="1043.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="81.0" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.findNodeFromTail (1 samples, 0.09%)</title><rect x="78.0" y="1027.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="81.0" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (81 samples, 7.07%)</title><rect x="79.0" y="1043.0" width="83.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="82.0" y="1054.0">java/util..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (78 samples, 6.81%)</title><rect x="82.1" y="1027.0" width="80.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="85.1" y="1038.0">jdk/inter..</text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (2 samples, 0.17%)</title><rect x="83.1" y="1011.0" width="2.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="86.1" y="1022.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.235] (1 samples, 0.09%)</title><rect x="85.2" y="1011.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="88.2" y="1022.0"></text>
</g>
<g>
<title>Unsafe_Park (36 samples, 3.14%)</title><rect x="86.2" y="1011.0" width="37.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="89.2" y="1022.0">Uns..</text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (1 samples, 0.09%)</title><rect x="88.3" y="995.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="91.3" y="1006.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.09%)</title><rect x="89.3" y="995.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="92.3" y="1006.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (9 samples, 0.79%)</title><rect x="90.3" y="995.0" width="9.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="93.3" y="1006.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/ld-2.31.so (1 samples, 0.09%)</title><rect x="94.4" y="979.0" width="1.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="97.4" y="990.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (3 samples, 0.26%)</title><rect x="95.5" y="979.0" width="3.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="98.5" y="990.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/ld-2.31.so (1 samples, 0.09%)</title><rect x="97.5" y="963.0" width="1.1" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="100.5" y="974.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.09%)</title><rect x="98.6" y="979.0" width="1.0" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="101.6" y="990.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.09%)</title><rect x="99.6" y="995.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="102.6" y="1006.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.235] (1 samples, 0.09%)</title><rect x="100.6" y="995.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="103.6" y="1006.0"></text>
</g>
<g>
<title>__GI___pthread_mutex_trylock (3 samples, 0.26%)</title><rect x="101.6" y="995.0" width="3.1" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="104.6" y="1006.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (11 samples, 0.96%)</title><rect x="104.7" y="995.0" width="11.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="107.7" y="1006.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (5 samples, 0.44%)</title><rect x="110.9" y="979.0" width="5.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="113.9" y="990.0"></text>
</g>
<g>
<title>do_syscall_64 (5 samples, 0.44%)</title><rect x="110.9" y="963.0" width="5.2" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="113.9" y="974.0"></text>
</g>
<g>
<title>__x64_sys_futex (3 samples, 0.26%)</title><rect x="113.0" y="947.0" width="3.1" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="116.0" y="958.0"></text>
</g>
<g>
<title>do_futex (2 samples, 0.17%)</title><rect x="113.0" y="931.0" width="2.0" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="116.0" y="942.0"></text>
</g>
<g>
<title>futex_wake (1 samples, 0.09%)</title><rect x="114.0" y="915.0" width="1.0" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="117.0" y="926.0"></text>
</g>
<g>
<title>get_futex_key (1 samples, 0.09%)</title><rect x="114.0" y="899.0" width="1.0" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="117.0" y="910.0"></text>
</g>
<g>
<title>futex_wake (1 samples, 0.09%)</title><rect x="115.0" y="931.0" width="1.1" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="118.0" y="942.0"></text>
</g>
<g>
<title>__tls_get_addr (2 samples, 0.17%)</title><rect x="116.1" y="995.0" width="2.0" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="119.1" y="1006.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (2 samples, 0.17%)</title><rect x="118.1" y="995.0" width="2.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="121.1" y="1006.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.09%)</title><rect x="120.2" y="995.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="123.2" y="1006.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.09%)</title><rect x="121.2" y="995.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="124.2" y="1006.0"></text>
</g>
<g>
<title>pthread_mutex_trylock@plt (1 samples, 0.09%)</title><rect x="122.2" y="995.0" width="1.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="125.2" y="1006.0"></text>
</g>
<g>
<title>[unknown] (38 samples, 3.32%)</title><rect x="123.3" y="1011.0" width="39.1" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="126.3" y="1022.0">[un..</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/ld-2.31.so (2 samples, 0.17%)</title><rect x="123.3" y="995.0" width="2.0" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="126.3" y="1006.0"></text>
</g>
<g>
<title>__GI___pthread_mutex_trylock (3 samples, 0.26%)</title><rect x="125.3" y="995.0" width="3.1" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="128.3" y="1006.0"></text>
</g>
<g>
<title>__pthread_cond_wait (28 samples, 2.44%)</title><rect x="128.4" y="995.0" width="28.8" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="131.4" y="1006.0">__..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (11 samples, 0.96%)</title><rect x="145.9" y="979.0" width="11.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="148.9" y="990.0"></text>
</g>
<g>
<title>do_syscall_64 (11 samples, 0.96%)</title><rect x="145.9" y="963.0" width="11.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="148.9" y="974.0"></text>
</g>
<g>
<title>__x64_sys_futex (6 samples, 0.52%)</title><rect x="151.1" y="947.0" width="6.1" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="154.1" y="958.0"></text>
</g>
<g>
<title>do_futex (5 samples, 0.44%)</title><rect x="152.1" y="931.0" width="5.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="155.1" y="942.0"></text>
</g>
<g>
<title>futex_wait (5 samples, 0.44%)</title><rect x="152.1" y="915.0" width="5.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="155.1" y="926.0"></text>
</g>
<g>
<title>futex_wait_queue_me (2 samples, 0.17%)</title><rect x="153.1" y="899.0" width="2.1" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="156.1" y="910.0"></text>
</g>
<g>
<title>schedule (2 samples, 0.17%)</title><rect x="153.1" y="883.0" width="2.1" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="156.1" y="894.0"></text>
</g>
<g>
<title>__schedule (2 samples, 0.17%)</title><rect x="153.1" y="867.0" width="2.1" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="156.1" y="878.0"></text>
</g>
<g>
<title>futex_wait_setup (2 samples, 0.17%)</title><rect x="155.2" y="899.0" width="2.0" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="158.2" y="910.0"></text>
</g>
<g>
<title>get_futex_value_locked (1 samples, 0.09%)</title><rect x="156.2" y="883.0" width="1.0" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="159.2" y="894.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (3 samples, 0.26%)</title><rect x="157.2" y="995.0" width="3.1" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="160.2" y="1006.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (2 samples, 0.17%)</title><rect x="160.3" y="995.0" width="2.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="163.3" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.09%)</title><rect x="162.4" y="1059.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="165.4" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (1 samples, 0.09%)</title><rect x="163.4" y="1059.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="166.4" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (1 samples, 0.09%)</title><rect x="163.4" y="1043.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="166.4" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (17 samples, 1.48%)</title><rect x="164.5" y="1059.0" width="17.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="167.5" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (17 samples, 1.48%)</title><rect x="164.5" y="1043.0" width="17.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="167.5" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (17 samples, 1.48%)</title><rect x="164.5" y="1027.0" width="17.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="167.5" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (17 samples, 1.48%)</title><rect x="164.5" y="1011.0" width="17.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="167.5" y="1022.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (17 samples, 1.48%)</title><rect x="164.5" y="995.0" width="17.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="167.5" y="1006.0"></text>
</g>
<g>
<title>Unsafe_Unpark (2 samples, 0.17%)</title><rect x="164.5" y="979.0" width="2.0" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="167.5" y="990.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (1 samples, 0.09%)</title><rect x="164.5" y="963.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="167.5" y="974.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (1 samples, 0.09%)</title><rect x="165.5" y="963.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="168.5" y="974.0"></text>
</g>
<g>
<title>__pthread_cond_signal (15 samples, 1.31%)</title><rect x="166.5" y="979.0" width="15.5" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="169.5" y="990.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (12 samples, 1.05%)</title><rect x="169.6" y="963.0" width="12.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="172.6" y="974.0"></text>
</g>
<g>
<title>do_syscall_64 (12 samples, 1.05%)</title><rect x="169.6" y="947.0" width="12.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="172.6" y="958.0"></text>
</g>
<g>
<title>__x64_sys_futex (12 samples, 1.05%)</title><rect x="169.6" y="931.0" width="12.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="172.6" y="942.0"></text>
</g>
<g>
<title>do_futex (12 samples, 1.05%)</title><rect x="169.6" y="915.0" width="12.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="172.6" y="926.0"></text>
</g>
<g>
<title>futex_wake (12 samples, 1.05%)</title><rect x="169.6" y="899.0" width="12.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="172.6" y="910.0"></text>
</g>
<g>
<title>wake_up_q (12 samples, 1.05%)</title><rect x="169.6" y="883.0" width="12.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="172.6" y="894.0"></text>
</g>
<g>
<title>try_to_wake_up (11 samples, 0.96%)</title><rect x="170.6" y="867.0" width="11.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="173.6" y="878.0"></text>
</g>
<g>
<title>__lock_text_start (11 samples, 0.96%)</title><rect x="170.6" y="851.0" width="11.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="173.6" y="862.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/valaubr/LsmDAO$$Lambda$13/863125040.run (103 samples, 8.99%)</title><rect x="182.0" y="1091.0" width="106.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="185.0" y="1102.0">ru/mail/polis..</text>
</g>
<g>
<title>ru/mail/polis/dao/valaubr/LsmDAO.flushingHelper (103 samples, 8.99%)</title><rect x="182.0" y="1075.0" width="106.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="185.0" y="1086.0">ru/mail/polis..</text>
</g>
<g>
<title>ru/mail/polis/dao/valaubr/LsmDAO.flush (103 samples, 8.99%)</title><rect x="182.0" y="1059.0" width="106.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="185.0" y="1070.0">ru/mail/polis..</text>
</g>
<g>
<title>ru/mail/polis/dao/valaubr/SSTable.serialize (103 samples, 8.99%)</title><rect x="182.0" y="1043.0" width="106.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="185.0" y="1054.0">ru/mail/polis..</text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*) (1 samples, 0.09%)</title><rect x="192.3" y="1027.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="195.3" y="1038.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow_inner(JavaThread*, unsigned char*) (1 samples, 0.09%)</title><rect x="192.3" y="1011.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="195.3" y="1022.0"></text>
</g>
<g>
<title>TieredThresholdPolicy::event(methodHandle const&amp;, methodHandle const&amp;, int, int, CompLevel, CompiledMethod*, JavaThread*) (1 samples, 0.09%)</title><rect x="192.3" y="995.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="195.3" y="1006.0"></text>
</g>
<g>
<title>TieredThresholdPolicy::method_back_branch_event(methodHandle const&amp;, methodHandle const&amp;, int, CompLevel, CompiledMethod*, JavaThread*) (1 samples, 0.09%)</title><rect x="192.3" y="979.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="195.3" y="990.0"></text>
</g>
<g>
<title>bool CompilerOracle::has_option_value&lt;double&gt;(methodHandle const&amp;, char const*, double&amp;) (1 samples, 0.09%)</title><rect x="192.3" y="963.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="195.3" y="974.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1 samples, 0.09%)</title><rect x="193.3" y="1027.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="196.3" y="1038.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.09%)</title><rect x="193.3" y="1011.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="196.3" y="1022.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.09%)</title><rect x="193.3" y="995.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="196.3" y="1006.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.09%)</title><rect x="193.3" y="979.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="196.3" y="990.0"></text>
</g>
<g>
<title>java/util/Spliterators$1Adapter.hasNext (8 samples, 0.70%)</title><rect x="194.3" y="1027.0" width="8.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="197.3" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.tryAdvance (7 samples, 0.61%)</title><rect x="195.3" y="1011.0" width="7.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="198.3" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/SpinedBuffer.get (1 samples, 0.09%)</title><rect x="195.3" y="995.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="198.3" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.doAdvance (6 samples, 0.52%)</title><rect x="196.4" y="995.0" width="6.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="199.4" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/AbstractSpinedBuffer.count (1 samples, 0.09%)</title><rect x="197.4" y="979.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="200.4" y="990.0"></text>
</g>
<g>
<title>java/util/stream/SpinedBuffer.clear (1 samples, 0.09%)</title><rect x="198.4" y="979.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="201.4" y="990.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.fillBuffer (3 samples, 0.26%)</title><rect x="199.5" y="979.0" width="3.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="202.5" y="990.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator$$Lambda$112/1312109180.getAsBoolean (3 samples, 0.26%)</title><rect x="199.5" y="963.0" width="3.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="202.5" y="974.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.lambda$initPartialTraversalState$0 (3 samples, 0.26%)</title><rect x="199.5" y="947.0" width="3.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="202.5" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.tryAdvance (3 samples, 0.26%)</title><rect x="199.5" y="931.0" width="3.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="202.5" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.next (2 samples, 0.17%)</title><rect x="199.5" y="915.0" width="2.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="202.5" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.next (2 samples, 0.17%)</title><rect x="199.5" y="899.0" width="2.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="202.5" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.advance (2 samples, 0.17%)</title><rect x="199.5" y="883.0" width="2.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="202.5" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.ascend (1 samples, 0.09%)</title><rect x="200.5" y="867.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="203.5" y="878.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.09%)</title><rect x="201.5" y="915.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="204.5" y="926.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/valaubr/MemTable$$Lambda$109/2117681235.apply (1 samples, 0.09%)</title><rect x="201.5" y="899.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="204.5" y="910.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/valaubr/MemTable.lambda$iterator$0 (1 samples, 0.09%)</title><rect x="201.5" y="883.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="204.5" y="894.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/valaubr/Cell.getValue (1 samples, 0.09%)</title><rect x="202.5" y="1027.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="205.5" y="1038.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.write (82 samples, 7.16%)</title><rect x="203.6" y="1027.0" width="84.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="206.6" y="1038.0">sun/nio/ch..</text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.isOpen (2 samples, 0.17%)</title><rect x="204.6" y="1011.0" width="2.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="207.6" y="1022.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.add (1 samples, 0.09%)</title><rect x="205.6" y="995.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="208.6" y="1006.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.beginBlocking (4 samples, 0.35%)</title><rect x="206.7" y="1011.0" width="4.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="209.7" y="1022.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (3 samples, 0.26%)</title><rect x="207.7" y="995.0" width="3.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="210.7" y="1006.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (2 samples, 0.17%)</title><rect x="207.7" y="979.0" width="2.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="210.7" y="990.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.09%)</title><rect x="208.7" y="963.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="211.7" y="974.0"></text>
</g>
<g>
<title>JVM_IsInterrupted (1 samples, 0.09%)</title><rect x="208.7" y="947.0" width="1.1" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="211.7" y="958.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.217] (1 samples, 0.09%)</title><rect x="208.7" y="931.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="211.7" y="942.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (1 samples, 0.09%)</title><rect x="209.8" y="979.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="212.8" y="990.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (1 samples, 0.09%)</title><rect x="209.8" y="963.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="212.8" y="974.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (1 samples, 0.09%)</title><rect x="209.8" y="947.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="212.8" y="958.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (67 samples, 5.85%)</title><rect x="210.8" y="1011.0" width="69.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="213.8" y="1022.0">sun/nio..</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (8 samples, 0.70%)</title><rect x="210.8" y="995.0" width="8.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="213.8" y="1006.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.09%)</title><rect x="211.8" y="979.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="214.8" y="990.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.09%)</title><rect x="211.8" y="963.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="214.8" y="974.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (6 samples, 0.52%)</title><rect x="212.8" y="979.0" width="6.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="215.8" y="990.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (2 samples, 0.17%)</title><rect x="212.8" y="963.0" width="2.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="215.8" y="974.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.17%)</title><rect x="212.8" y="947.0" width="2.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="215.8" y="958.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (4 samples, 0.35%)</title><rect x="214.9" y="963.0" width="4.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="217.9" y="974.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory0 (1 samples, 0.09%)</title><rect x="214.9" y="947.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="217.9" y="958.0"></text>
</g>
<g>
<title>Unsafe_CopyMemory0 (1 samples, 0.09%)</title><rect x="214.9" y="931.0" width="1.0" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="217.9" y="942.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (3 samples, 0.26%)</title><rect x="215.9" y="947.0" width="3.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="218.9" y="958.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitivePointer (3 samples, 0.26%)</title><rect x="215.9" y="931.0" width="3.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="218.9" y="942.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPointer (1 samples, 0.09%)</title><rect x="217.0" y="915.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="220.0" y="926.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitiveArray (1 samples, 0.09%)</title><rect x="218.0" y="915.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="221.0" y="926.0"></text>
</g>
<g>
<title>java/lang/Class.getComponentType (1 samples, 0.09%)</title><rect x="218.0" y="899.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="221.0" y="910.0"></text>
</g>
<g>
<title>java/lang/Class.isArray (1 samples, 0.09%)</title><rect x="218.0" y="883.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="221.0" y="894.0"></text>
</g>
<g>
<title>JVM_IsArrayClass (1 samples, 0.09%)</title><rect x="218.0" y="867.0" width="1.0" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="221.0" y="878.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.09%)</title><rect x="218.0" y="851.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="221.0" y="862.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (54 samples, 4.71%)</title><rect x="219.0" y="995.0" width="55.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="222.0" y="1006.0">sun/n..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write (54 samples, 4.71%)</title><rect x="219.0" y="979.0" width="55.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="222.0" y="990.0">sun/n..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (53 samples, 4.62%)</title><rect x="220.1" y="963.0" width="54.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="223.1" y="974.0">sun/n..</text>
</g>
<g>
<title>__libc_write (50 samples, 4.36%)</title><rect x="222.1" y="947.0" width="51.5" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="225.1" y="958.0">__lib..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (40 samples, 3.49%)</title><rect x="232.4" y="931.0" width="41.2" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="235.4" y="942.0">ent..</text>
</g>
<g>
<title>do_syscall_64 (40 samples, 3.49%)</title><rect x="232.4" y="915.0" width="41.2" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="235.4" y="926.0">do_..</text>
</g>
<g>
<title>__x64_sys_write (31 samples, 2.71%)</title><rect x="241.7" y="899.0" width="31.9" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="244.7" y="910.0">__..</text>
</g>
<g>
<title>ksys_write (31 samples, 2.71%)</title><rect x="241.7" y="883.0" width="31.9" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="244.7" y="894.0">ks..</text>
</g>
<g>
<title>__fdget_pos (1 samples, 0.09%)</title><rect x="241.7" y="867.0" width="1.0" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="244.7" y="878.0"></text>
</g>
<g>
<title>__sb_end_write (1 samples, 0.09%)</title><rect x="242.7" y="867.0" width="1.0" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="245.7" y="878.0"></text>
</g>
<g>
<title>fput_many (1 samples, 0.09%)</title><rect x="243.7" y="867.0" width="1.1" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="246.7" y="878.0"></text>
</g>
<g>
<title>mutex_unlock (2 samples, 0.17%)</title><rect x="244.8" y="867.0" width="2.0" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="247.8" y="878.0"></text>
</g>
<g>
<title>vfs_write (26 samples, 2.27%)</title><rect x="246.8" y="867.0" width="26.8" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="249.8" y="878.0">v..</text>
</g>
<g>
<title>__vfs_write (25 samples, 2.18%)</title><rect x="246.8" y="851.0" width="25.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="249.8" y="862.0">_..</text>
</g>
<g>
<title>new_sync_write (25 samples, 2.18%)</title><rect x="246.8" y="835.0" width="25.8" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="249.8" y="846.0">n..</text>
</g>
<g>
<title>generic_file_write_iter (22 samples, 1.92%)</title><rect x="247.9" y="819.0" width="22.6" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="250.9" y="830.0">g..</text>
</g>
<g>
<title>__generic_file_write_iter (21 samples, 1.83%)</title><rect x="247.9" y="803.0" width="21.6" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="250.9" y="814.0">_..</text>
</g>
<g>
<title>generic_perform_write (19 samples, 1.66%)</title><rect x="247.9" y="787.0" width="19.5" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="250.9" y="798.0"></text>
</g>
<g>
<title>copyin (1 samples, 0.09%)</title><rect x="250.9" y="771.0" width="1.1" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="253.9" y="782.0"></text>
</g>
<g>
<title>iov_iter_advance (1 samples, 0.09%)</title><rect x="252.0" y="771.0" width="1.0" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="255.0" y="782.0"></text>
</g>
<g>
<title>iov_iter_copy_from_user_atomic (2 samples, 0.17%)</title><rect x="253.0" y="771.0" width="2.1" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="256.0" y="782.0"></text>
</g>
<g>
<title>copy_user_generic_unrolled (1 samples, 0.09%)</title><rect x="254.0" y="755.0" width="1.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="257.0" y="766.0"></text>
</g>
<g>
<title>iov_iter_fault_in_readable (3 samples, 0.26%)</title><rect x="255.1" y="771.0" width="3.1" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="258.1" y="782.0"></text>
</g>
<g>
<title>shmem_write_begin (9 samples, 0.79%)</title><rect x="258.2" y="771.0" width="9.2" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="261.2" y="782.0"></text>
</g>
<g>
<title>shmem_getpage_gfp (9 samples, 0.79%)</title><rect x="258.2" y="755.0" width="9.2" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="261.2" y="766.0"></text>
</g>
<g>
<title>find_get_entry (1 samples, 0.09%)</title><rect x="261.2" y="739.0" width="1.1" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="264.2" y="750.0"></text>
</g>
<g>
<title>find_lock_entry (4 samples, 0.35%)</title><rect x="262.3" y="739.0" width="4.1" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="265.3" y="750.0"></text>
</g>
<g>
<title>find_get_entry (3 samples, 0.26%)</title><rect x="262.3" y="723.0" width="3.1" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="265.3" y="734.0"></text>
</g>
<g>
<title>xas_start (1 samples, 0.09%)</title><rect x="264.3" y="707.0" width="1.1" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="267.3" y="718.0"></text>
</g>
<g>
<title>page_mapping (1 samples, 0.09%)</title><rect x="265.4" y="723.0" width="1.0" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="268.4" y="734.0"></text>
</g>
<g>
<title>page_mapping (1 samples, 0.09%)</title><rect x="266.4" y="739.0" width="1.0" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="269.4" y="750.0"></text>
</g>
<g>
<title>shmem_write_begin (2 samples, 0.17%)</title><rect x="267.4" y="787.0" width="2.1" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="270.4" y="798.0"></text>
</g>
<g>
<title>down_write (1 samples, 0.09%)</title><rect x="269.5" y="803.0" width="1.0" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="272.5" y="814.0"></text>
</g>
<g>
<title>generic_write_check_limits.isra.0 (2 samples, 0.17%)</title><rect x="270.5" y="819.0" width="2.1" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="273.5" y="830.0"></text>
</g>
<g>
<title>fsnotify (1 samples, 0.09%)</title><rect x="272.6" y="851.0" width="1.0" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="275.6" y="862.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.09%)</title><rect x="273.6" y="947.0" width="1.0" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="276.6" y="958.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (4 samples, 0.35%)</title><rect x="274.6" y="995.0" width="4.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="277.6" y="1006.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.17%)</title><rect x="274.6" y="979.0" width="2.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="277.6" y="990.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.17%)</title><rect x="274.6" y="963.0" width="2.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="277.6" y="974.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (2 samples, 0.17%)</title><rect x="274.6" y="947.0" width="2.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="277.6" y="958.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (2 samples, 0.17%)</title><rect x="276.7" y="979.0" width="2.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="279.7" y="990.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (1 samples, 0.09%)</title><rect x="276.7" y="963.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="279.7" y="974.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.rewind (1 samples, 0.09%)</title><rect x="277.7" y="963.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="280.7" y="974.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.offerFirstTemporaryDirectBuffer (1 samples, 0.09%)</title><rect x="278.7" y="995.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="281.7" y="1006.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.offerFirst (1 samples, 0.09%)</title><rect x="278.7" y="979.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="281.7" y="990.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.add (6 samples, 0.52%)</title><rect x="279.8" y="1011.0" width="6.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="282.8" y="1022.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (3 samples, 0.26%)</title><rect x="282.9" y="995.0" width="3.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="285.9" y="1006.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.remove (1 samples, 0.09%)</title><rect x="286.0" y="1011.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="289.0" y="1022.0"></text>
</g>
<g>
<title>unsafe_arraycopy (1 samples, 0.09%)</title><rect x="287.0" y="1011.0" width="1.0" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="290.0" y="1022.0"></text>
</g>
<g>
<title>ru/mail/polis/service/valaubr/HttpService$$Lambda$105/950754163.run (330 samples, 28.80%)</title><rect x="288.0" y="1091.0" width="339.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="291.0" y="1102.0">ru/mail/polis/service/valaubr/HttpService$$Lam..</text>
</g>
<g>
<title>ru/mail/polis/service/valaubr/HttpService.lambda$put$1 (329 samples, 28.71%)</title><rect x="289.0" y="1075.0" width="338.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="292.0" y="1086.0">ru/mail/polis/service/valaubr/HttpService.lamb..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (257 samples, 22.43%)</title><rect x="290.1" y="1059.0" width="264.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="293.1" y="1070.0">one/nio/http/HttpSession.sendResponse</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (19 samples, 1.66%)</title><rect x="295.2" y="1043.0" width="19.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="298.2" y="1054.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (19 samples, 1.66%)</title><rect x="295.2" y="1027.0" width="19.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="298.2" y="1038.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (18 samples, 1.57%)</title><rect x="296.2" y="1011.0" width="18.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="299.2" y="1022.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) [clone .part.71] (17 samples, 1.48%)</title><rect x="296.2" y="995.0" width="17.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="299.2" y="1006.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.09%)</title><rect x="313.8" y="995.0" width="1.0" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="316.8" y="1006.0"></text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (4 samples, 0.35%)</title><rect x="314.8" y="1043.0" width="4.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="317.8" y="1054.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (4 samples, 0.35%)</title><rect x="314.8" y="1027.0" width="4.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="317.8" y="1038.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (4 samples, 0.35%)</title><rect x="314.8" y="1011.0" width="4.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="317.8" y="1022.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.09%)</title><rect x="317.9" y="995.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="320.9" y="1006.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.09%)</title><rect x="317.9" y="979.0" width="1.0" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="320.9" y="990.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (221 samples, 19.28%)</title><rect x="318.9" y="1043.0" width="227.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="321.9" y="1054.0">one/nio/http/HttpSession.write..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (10 samples, 0.87%)</title><rect x="318.9" y="1027.0" width="10.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="321.9" y="1038.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (7 samples, 0.61%)</title><rect x="322.0" y="1011.0" width="7.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="325.0" y="1022.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (7 samples, 0.61%)</title><rect x="322.0" y="995.0" width="7.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="325.0" y="1006.0"></text>
</g>
<g>
<title>java/lang/String.charAt (7 samples, 0.61%)</title><rect x="322.0" y="979.0" width="7.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="325.0" y="990.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (211 samples, 18.41%)</title><rect x="329.2" y="1027.0" width="217.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="332.2" y="1038.0">one/nio/net/Session.write</text>
</g>
<g>
<title>one/nio/net/Session.write (211 samples, 18.41%)</title><rect x="329.2" y="1011.0" width="217.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="332.2" y="1022.0">one/nio/net/Session.write</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (1 samples, 0.09%)</title><rect x="330.2" y="995.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="333.2" y="1006.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (1 samples, 0.09%)</title><rect x="331.3" y="995.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="334.3" y="1006.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (208 samples, 18.15%)</title><rect x="332.3" y="995.0" width="214.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="335.3" y="1006.0">one/nio/net/Session$ArrayQue..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (208 samples, 18.15%)</title><rect x="332.3" y="979.0" width="214.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="335.3" y="990.0">one/nio/net/NativeSocket.write</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (15 samples, 1.31%)</title><rect x="333.3" y="963.0" width="15.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="336.3" y="974.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (2 samples, 0.17%)</title><rect x="336.4" y="947.0" width="2.1" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="339.4" y="958.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.09%)</title><rect x="338.5" y="947.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="341.5" y="958.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (3 samples, 0.26%)</title><rect x="339.5" y="947.0" width="3.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="342.5" y="958.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (6 samples, 0.52%)</title><rect x="342.6" y="947.0" width="6.2" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="345.6" y="958.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.09%)</title><rect x="345.7" y="931.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="348.7" y="942.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (2 samples, 0.17%)</title><rect x="346.7" y="931.0" width="2.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="349.7" y="942.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (2 samples, 0.17%)</title><rect x="348.8" y="963.0" width="2.0" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="351.8" y="974.0"></text>
</g>
<g>
<title>__send (189 samples, 16.49%)</title><rect x="350.8" y="963.0" width="194.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="353.8" y="974.0">__send</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (183 samples, 15.97%)</title><rect x="357.0" y="947.0" width="188.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="360.0" y="958.0">entry_SYSCALL_64_after_h..</text>
</g>
<g>
<title>do_syscall_64 (183 samples, 15.97%)</title><rect x="357.0" y="931.0" width="188.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="360.0" y="942.0">do_syscall_64</text>
</g>
<g>
<title>__x64_sys_sendto (179 samples, 15.62%)</title><rect x="361.1" y="915.0" width="184.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="364.1" y="926.0">__x64_sys_sendto</text>
</g>
<g>
<title>__sys_sendto (179 samples, 15.62%)</title><rect x="361.1" y="899.0" width="184.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="364.1" y="910.0">__sys_sendto</text>
</g>
<g>
<title>sock_sendmsg (176 samples, 15.36%)</title><rect x="362.1" y="883.0" width="181.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="365.1" y="894.0">sock_sendmsg</text>
</g>
<g>
<title>apparmor_socket_sendmsg (1 samples, 0.09%)</title><rect x="362.1" y="867.0" width="1.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="365.1" y="878.0"></text>
</g>
<g>
<title>inet6_sendmsg (171 samples, 14.92%)</title><rect x="363.2" y="867.0" width="176.0" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="366.2" y="878.0">inet6_sendmsg</text>
</g>
<g>
<title>tcp_sendmsg (170 samples, 14.83%)</title><rect x="363.2" y="851.0" width="175.0" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="366.2" y="862.0">tcp_sendmsg</text>
</g>
<g>
<title>_raw_spin_lock_bh (1 samples, 0.09%)</title><rect x="363.2" y="835.0" width="1.0" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="366.2" y="846.0"></text>
</g>
<g>
<title>release_sock (1 samples, 0.09%)</title><rect x="364.2" y="835.0" width="1.0" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="367.2" y="846.0"></text>
</g>
<g>
<title>tcp_release_cb (1 samples, 0.09%)</title><rect x="364.2" y="819.0" width="1.0" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="367.2" y="830.0"></text>
</g>
<g>
<title>tcp_push (1 samples, 0.09%)</title><rect x="365.2" y="835.0" width="1.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="368.2" y="846.0"></text>
</g>
<g>
<title>tcp_sendmsg_locked (167 samples, 14.57%)</title><rect x="366.3" y="835.0" width="171.9" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="369.3" y="846.0">tcp_sendmsg_locked</text>
</g>
<g>
<title>__check_object_size (1 samples, 0.09%)</title><rect x="375.5" y="819.0" width="1.1" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="378.5" y="830.0"></text>
</g>
<g>
<title>__virt_addr_valid (1 samples, 0.09%)</title><rect x="375.5" y="803.0" width="1.1" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="378.5" y="814.0"></text>
</g>
<g>
<title>__virt_addr_valid (1 samples, 0.09%)</title><rect x="376.6" y="819.0" width="1.0" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="379.6" y="830.0"></text>
</g>
<g>
<title>_copy_from_iter_full (1 samples, 0.09%)</title><rect x="377.6" y="819.0" width="1.0" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="380.6" y="830.0"></text>
</g>
<g>
<title>iov_iter_advance (1 samples, 0.09%)</title><rect x="377.6" y="803.0" width="1.0" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="380.6" y="814.0"></text>
</g>
<g>
<title>check_stack_object (1 samples, 0.09%)</title><rect x="378.6" y="819.0" width="1.1" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="381.6" y="830.0"></text>
</g>
<g>
<title>copyin (1 samples, 0.09%)</title><rect x="379.7" y="819.0" width="1.0" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="382.7" y="830.0"></text>
</g>
<g>
<title>sk_stream_alloc_skb (16 samples, 1.40%)</title><rect x="380.7" y="819.0" width="16.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="383.7" y="830.0"></text>
</g>
<g>
<title>__alloc_skb (12 samples, 1.05%)</title><rect x="382.7" y="803.0" width="12.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="385.7" y="814.0"></text>
</g>
<g>
<title>__kmalloc_reserve.isra.0 (6 samples, 0.52%)</title><rect x="384.8" y="787.0" width="6.2" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="387.8" y="798.0"></text>
</g>
<g>
<title>__kmalloc_node_track_caller (4 samples, 0.35%)</title><rect x="384.8" y="771.0" width="4.1" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="387.8" y="782.0"></text>
</g>
<g>
<title>kmalloc_slab (1 samples, 0.09%)</title><rect x="388.9" y="771.0" width="1.0" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="391.9" y="782.0"></text>
</g>
<g>
<title>memset_erms (1 samples, 0.09%)</title><rect x="389.9" y="771.0" width="1.1" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="392.9" y="782.0"></text>
</g>
<g>
<title>kmem_cache_alloc_node (2 samples, 0.17%)</title><rect x="391.0" y="787.0" width="2.0" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="394.0" y="798.0"></text>
</g>
<g>
<title>rcu_all_qs (1 samples, 0.09%)</title><rect x="392.0" y="771.0" width="1.0" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="395.0" y="782.0"></text>
</g>
<g>
<title>memset_erms (1 samples, 0.09%)</title><rect x="393.0" y="787.0" width="1.1" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="396.0" y="798.0"></text>
</g>
<g>
<title>should_failslab (1 samples, 0.09%)</title><rect x="394.1" y="787.0" width="1.0" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="397.1" y="798.0"></text>
</g>
<g>
<title>__kmalloc_reserve.isra.0 (1 samples, 0.09%)</title><rect x="395.1" y="803.0" width="1.0" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="398.1" y="814.0"></text>
</g>
<g>
<title>ksize (1 samples, 0.09%)</title><rect x="396.1" y="803.0" width="1.1" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="399.1" y="814.0"></text>
</g>
<g>
<title>tcp_chrono_start (1 samples, 0.09%)</title><rect x="397.2" y="819.0" width="1.0" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="400.2" y="830.0"></text>
</g>
<g>
<title>tcp_push (134 samples, 11.69%)</title><rect x="398.2" y="819.0" width="138.0" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="401.2" y="830.0">tcp_push</text>
</g>
<g>
<title>__tcp_push_pending_frames (134 samples, 11.69%)</title><rect x="398.2" y="803.0" width="138.0" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="401.2" y="814.0">__tcp_push_pendin..</text>
</g>
<g>
<title>__tcp_transmit_skb (1 samples, 0.09%)</title><rect x="398.2" y="787.0" width="1.0" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="401.2" y="798.0"></text>
</g>
<g>
<title>tcp_event_new_data_sent (1 samples, 0.09%)</title><rect x="399.2" y="787.0" width="1.0" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="402.2" y="798.0"></text>
</g>
<g>
<title>tcp_mtu_probe (1 samples, 0.09%)</title><rect x="400.2" y="787.0" width="1.1" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="403.2" y="798.0"></text>
</g>
<g>
<title>tcp_write_xmit (131 samples, 11.43%)</title><rect x="401.3" y="787.0" width="134.9" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="404.3" y="798.0">tcp_write_xmit</text>
</g>
<g>
<title>__tcp_select_window (1 samples, 0.09%)</title><rect x="404.4" y="771.0" width="1.0" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="407.4" y="782.0"></text>
</g>
<g>
<title>__tcp_transmit_skb (115 samples, 10.03%)</title><rect x="405.4" y="771.0" width="118.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="408.4" y="782.0">__tcp_transmit..</text>
</g>
<g>
<title>ip_queue_xmit (104 samples, 9.08%)</title><rect x="412.6" y="755.0" width="107.1" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="415.6" y="766.0">ip_queue_xmit</text>
</g>
<g>
<title>__ip_queue_xmit (103 samples, 8.99%)</title><rect x="412.6" y="739.0" width="106.1" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="415.6" y="750.0">__ip_queue_xmit</text>
</g>
<g>
<title>__sk_dst_check (2 samples, 0.17%)</title><rect x="415.7" y="723.0" width="2.0" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="418.7" y="734.0"></text>
</g>
<g>
<title>ipv4_dst_check (1 samples, 0.09%)</title><rect x="416.7" y="707.0" width="1.0" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="419.7" y="718.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_rax (1 samples, 0.09%)</title><rect x="417.7" y="723.0" width="1.1" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="420.7" y="734.0"></text>
</g>
<g>
<title>ip_local_out (96 samples, 8.38%)</title><rect x="418.8" y="723.0" width="98.8" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="421.8" y="734.0">ip_local_out</text>
</g>
<g>
<title>__ip_local_out (3 samples, 0.26%)</title><rect x="418.8" y="707.0" width="3.1" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="421.8" y="718.0"></text>
</g>
<g>
<title>ip_send_check (2 samples, 0.17%)</title><rect x="419.8" y="691.0" width="2.1" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="422.8" y="702.0"></text>
</g>
<g>
<title>ip_output (93 samples, 8.12%)</title><rect x="421.9" y="707.0" width="95.7" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="424.9" y="718.0">ip_output</text>
</g>
<g>
<title>ip_finish_output (93 samples, 8.12%)</title><rect x="421.9" y="691.0" width="95.7" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="424.9" y="702.0">ip_finish_o..</text>
</g>
<g>
<title>__cgroup_bpf_run_filter_skb (1 samples, 0.09%)</title><rect x="421.9" y="675.0" width="1.0" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="424.9" y="686.0"></text>
</g>
<g>
<title>__ip_finish_output (92 samples, 8.03%)</title><rect x="422.9" y="675.0" width="94.7" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="425.9" y="686.0">__ip_finish..</text>
</g>
<g>
<title>ip_finish_output2 (91 samples, 7.94%)</title><rect x="423.9" y="659.0" width="93.7" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="426.9" y="670.0">ip_finish_o..</text>
</g>
<g>
<title>__dev_queue_xmit (1 samples, 0.09%)</title><rect x="427.0" y="643.0" width="1.0" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="430.0" y="654.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (67 samples, 5.85%)</title><rect x="428.0" y="643.0" width="69.0" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="431.0" y="654.0">__local..</text>
</g>
<g>
<title>do_softirq.part.0 (67 samples, 5.85%)</title><rect x="428.0" y="627.0" width="69.0" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="431.0" y="638.0">do_soft..</text>
</g>
<g>
<title>do_softirq_own_stack (66 samples, 5.76%)</title><rect x="429.1" y="611.0" width="67.9" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="432.1" y="622.0">do_soft..</text>
</g>
<g>
<title>__softirqentry_text_start (66 samples, 5.76%)</title><rect x="429.1" y="595.0" width="67.9" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="432.1" y="606.0">__softi..</text>
</g>
<g>
<title>__usecs_to_jiffies (1 samples, 0.09%)</title><rect x="431.1" y="579.0" width="1.1" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="434.1" y="590.0"></text>
</g>
<g>
<title>net_rx_action (62 samples, 5.41%)</title><rect x="432.2" y="579.0" width="63.8" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="435.2" y="590.0">net_rx_..</text>
</g>
<g>
<title>process_backlog (62 samples, 5.41%)</title><rect x="432.2" y="563.0" width="63.8" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="435.2" y="574.0">process..</text>
</g>
<g>
<title>__netif_receive_skb (61 samples, 5.32%)</title><rect x="433.2" y="547.0" width="62.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="436.2" y="558.0">__neti..</text>
</g>
<g>
<title>__netif_receive_skb_one_core (61 samples, 5.32%)</title><rect x="433.2" y="531.0" width="62.8" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="436.2" y="542.0">__neti..</text>
</g>
<g>
<title>__netif_receive_skb_core (5 samples, 0.44%)</title><rect x="433.2" y="515.0" width="5.1" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="436.2" y="526.0"></text>
</g>
<g>
<title>ip_rcv (56 samples, 4.89%)</title><rect x="438.3" y="515.0" width="57.7" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="441.3" y="526.0">ip_rcv</text>
</g>
<g>
<title>ip_rcv_core.isra.0 (1 samples, 0.09%)</title><rect x="438.3" y="499.0" width="1.1" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="441.3" y="510.0"></text>
</g>
<g>
<title>ip_rcv_finish (55 samples, 4.80%)</title><rect x="439.4" y="499.0" width="56.6" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="442.4" y="510.0">ip_rcv..</text>
</g>
<g>
<title>ip_local_deliver (54 samples, 4.71%)</title><rect x="439.4" y="483.0" width="55.6" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="442.4" y="494.0">ip_lo..</text>
</g>
<g>
<title>ip_local_deliver_finish (54 samples, 4.71%)</title><rect x="439.4" y="467.0" width="55.6" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="442.4" y="478.0">ip_lo..</text>
</g>
<g>
<title>ip_protocol_deliver_rcu (54 samples, 4.71%)</title><rect x="439.4" y="451.0" width="55.6" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="442.4" y="462.0">ip_pr..</text>
</g>
<g>
<title>_raw_spin_lock (1 samples, 0.09%)</title><rect x="442.5" y="435.0" width="1.0" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="445.5" y="446.0"></text>
</g>
<g>
<title>tcp_v4_rcv (50 samples, 4.36%)</title><rect x="443.5" y="435.0" width="51.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="446.5" y="446.0">tcp_v..</text>
</g>
<g>
<title>__inet_lookup_established (3 samples, 0.26%)</title><rect x="447.6" y="419.0" width="3.1" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="450.6" y="430.0"></text>
</g>
<g>
<title>inet_ehashfn (1 samples, 0.09%)</title><rect x="449.7" y="403.0" width="1.0" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="452.7" y="414.0"></text>
</g>
<g>
<title>sk_filter_trim_cap (1 samples, 0.09%)</title><rect x="450.7" y="419.0" width="1.0" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="453.7" y="430.0"></text>
</g>
<g>
<title>security_sock_rcv_skb (1 samples, 0.09%)</title><rect x="450.7" y="403.0" width="1.0" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="453.7" y="414.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (40 samples, 3.49%)</title><rect x="451.7" y="419.0" width="41.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="454.7" y="430.0">tcp..</text>
</g>
<g>
<title>tcp_ack (1 samples, 0.09%)</title><rect x="451.7" y="403.0" width="1.1" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="454.7" y="414.0"></text>
</g>
<g>
<title>tcp_event_data_recv (1 samples, 0.09%)</title><rect x="452.8" y="403.0" width="1.0" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="455.8" y="414.0"></text>
</g>
<g>
<title>tcp_rcv_established (38 samples, 3.32%)</title><rect x="453.8" y="403.0" width="39.1" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="456.8" y="414.0">tcp..</text>
</g>
<g>
<title>__tcp_ack_snd_check (8 samples, 0.70%)</title><rect x="455.8" y="387.0" width="8.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="458.8" y="398.0"></text>
</g>
<g>
<title>tcp_send_delayed_ack (6 samples, 0.52%)</title><rect x="457.9" y="371.0" width="6.2" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="460.9" y="382.0"></text>
</g>
<g>
<title>sk_reset_timer (6 samples, 0.52%)</title><rect x="457.9" y="355.0" width="6.2" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="460.9" y="366.0"></text>
</g>
<g>
<title>mod_timer (6 samples, 0.52%)</title><rect x="457.9" y="339.0" width="6.2" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="460.9" y="350.0"></text>
</g>
<g>
<title>__lock_text_start (3 samples, 0.26%)</title><rect x="458.9" y="323.0" width="3.1" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="461.9" y="334.0"></text>
</g>
<g>
<title>lock_timer_base (2 samples, 0.17%)</title><rect x="462.0" y="323.0" width="2.1" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="465.0" y="334.0"></text>
</g>
<g>
<title>bictcp_cong_avoid (1 samples, 0.09%)</title><rect x="464.1" y="387.0" width="1.0" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="467.1" y="398.0"></text>
</g>
<g>
<title>tcp_ack (22 samples, 1.92%)</title><rect x="465.1" y="387.0" width="22.7" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="468.1" y="398.0">t..</text>
</g>
<g>
<title>rb_erase (1 samples, 0.09%)</title><rect x="469.2" y="371.0" width="1.1" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="472.2" y="382.0"></text>
</g>
<g>
<title>tcp_ack_update_rtt.isra.0 (1 samples, 0.09%)</title><rect x="470.3" y="371.0" width="1.0" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="473.3" y="382.0"></text>
</g>
<g>
<title>tcp_clean_rtx_queue (15 samples, 1.31%)</title><rect x="471.3" y="371.0" width="15.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="474.3" y="382.0"></text>
</g>
<g>
<title>__kfree_skb (12 samples, 1.05%)</title><rect x="474.4" y="355.0" width="12.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="477.4" y="366.0"></text>
</g>
<g>
<title>kfree_skbmem (3 samples, 0.26%)</title><rect x="474.4" y="339.0" width="3.1" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="477.4" y="350.0"></text>
</g>
<g>
<title>kmem_cache_free (2 samples, 0.17%)</title><rect x="475.4" y="323.0" width="2.1" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="478.4" y="334.0"></text>
</g>
<g>
<title>__slab_free (2 samples, 0.17%)</title><rect x="475.4" y="307.0" width="2.1" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="478.4" y="318.0"></text>
</g>
<g>
<title>kmem_cache_free (1 samples, 0.09%)</title><rect x="477.5" y="339.0" width="1.0" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="480.5" y="350.0"></text>
</g>
<g>
<title>skb_release_all (7 samples, 0.61%)</title><rect x="478.5" y="339.0" width="7.2" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="481.5" y="350.0"></text>
</g>
<g>
<title>skb_release_data (7 samples, 0.61%)</title><rect x="478.5" y="323.0" width="7.2" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="481.5" y="334.0"></text>
</g>
<g>
<title>skb_free_head (4 samples, 0.35%)</title><rect x="481.6" y="307.0" width="4.1" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="484.6" y="318.0"></text>
</g>
<g>
<title>kfree (4 samples, 0.35%)</title><rect x="481.6" y="291.0" width="4.1" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="484.6" y="302.0"></text>
</g>
<g>
<title>__slab_free (1 samples, 0.09%)</title><rect x="484.7" y="275.0" width="1.0" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="487.7" y="286.0"></text>
</g>
<g>
<title>skb_release_data (1 samples, 0.09%)</title><rect x="485.7" y="339.0" width="1.0" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="488.7" y="350.0"></text>
</g>
<g>
<title>tcp_rearm_rto (1 samples, 0.09%)</title><rect x="486.7" y="371.0" width="1.1" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="489.7" y="382.0"></text>
</g>
<g>
<title>tcp_data_ready (1 samples, 0.09%)</title><rect x="487.8" y="387.0" width="1.0" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="490.8" y="398.0"></text>
</g>
<g>
<title>sock_def_readable (1 samples, 0.09%)</title><rect x="487.8" y="371.0" width="1.0" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="490.8" y="382.0"></text>
</g>
<g>
<title>__wake_up_sync_key (1 samples, 0.09%)</title><rect x="487.8" y="355.0" width="1.0" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="490.8" y="366.0"></text>
</g>
<g>
<title>__wake_up_common_lock (1 samples, 0.09%)</title><rect x="487.8" y="339.0" width="1.0" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="490.8" y="350.0"></text>
</g>
<g>
<title>__lock_text_start (1 samples, 0.09%)</title><rect x="487.8" y="323.0" width="1.0" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="490.8" y="334.0"></text>
</g>
<g>
<title>tcp_event_data_recv (1 samples, 0.09%)</title><rect x="488.8" y="387.0" width="1.0" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="491.8" y="398.0"></text>
</g>
<g>
<title>tcp_queue_rcv (2 samples, 0.17%)</title><rect x="489.8" y="387.0" width="2.1" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="492.8" y="398.0"></text>
</g>
<g>
<title>tcp_send_delayed_ack (1 samples, 0.09%)</title><rect x="491.9" y="387.0" width="1.0" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="494.9" y="398.0"></text>
</g>
<g>
<title>tcp_v4_inbound_md5_hash (2 samples, 0.17%)</title><rect x="492.9" y="419.0" width="2.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="495.9" y="430.0"></text>
</g>
<g>
<title>ip_rcv_finish_core.isra.0 (1 samples, 0.09%)</title><rect x="495.0" y="483.0" width="1.0" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="498.0" y="494.0"></text>
</g>
<g>
<title>process_backlog (1 samples, 0.09%)</title><rect x="496.0" y="579.0" width="1.0" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="499.0" y="590.0"></text>
</g>
<g>
<title>dev_queue_xmit (19 samples, 1.66%)</title><rect x="497.0" y="643.0" width="19.6" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="500.0" y="654.0"></text>
</g>
<g>
<title>__dev_queue_xmit (18 samples, 1.57%)</title><rect x="497.0" y="627.0" width="18.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="500.0" y="638.0"></text>
</g>
<g>
<title>dev_hard_start_xmit (5 samples, 0.44%)</title><rect x="502.2" y="611.0" width="5.1" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="505.2" y="622.0"></text>
</g>
<g>
<title>loopback_xmit (4 samples, 0.35%)</title><rect x="503.2" y="595.0" width="4.1" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="506.2" y="606.0"></text>
</g>
<g>
<title>netif_rx (3 samples, 0.26%)</title><rect x="504.2" y="579.0" width="3.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="507.2" y="590.0"></text>
</g>
<g>
<title>netif_rx_internal (2 samples, 0.17%)</title><rect x="505.3" y="563.0" width="2.0" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="508.3" y="574.0"></text>
</g>
<g>
<title>enqueue_to_backlog (1 samples, 0.09%)</title><rect x="506.3" y="547.0" width="1.0" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="509.3" y="558.0"></text>
</g>
<g>
<title>netdev_core_pick_tx (1 samples, 0.09%)</title><rect x="507.3" y="611.0" width="1.1" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="510.3" y="622.0"></text>
</g>
<g>
<title>validate_xmit_skb (5 samples, 0.44%)</title><rect x="508.4" y="611.0" width="5.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="511.4" y="622.0"></text>
</g>
<g>
<title>netif_skb_features (3 samples, 0.26%)</title><rect x="510.4" y="595.0" width="3.1" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="513.4" y="606.0"></text>
</g>
<g>
<title>validate_xmit_xfrm (2 samples, 0.17%)</title><rect x="513.5" y="611.0" width="2.1" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="516.5" y="622.0"></text>
</g>
<g>
<title>dev_hard_start_xmit (1 samples, 0.09%)</title><rect x="515.6" y="627.0" width="1.0" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="518.6" y="638.0"></text>
</g>
<g>
<title>do_softirq.part.0 (1 samples, 0.09%)</title><rect x="516.6" y="643.0" width="1.0" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="519.6" y="654.0"></text>
</g>
<g>
<title>ip_output (1 samples, 0.09%)</title><rect x="517.6" y="723.0" width="1.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="520.6" y="734.0"></text>
</g>
<g>
<title>ip_local_out (1 samples, 0.09%)</title><rect x="518.7" y="739.0" width="1.0" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="521.7" y="750.0"></text>
</g>
<g>
<title>skb_clone (2 samples, 0.17%)</title><rect x="519.7" y="755.0" width="2.0" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="522.7" y="766.0"></text>
</g>
<g>
<title>__copy_skb_header (1 samples, 0.09%)</title><rect x="519.7" y="739.0" width="1.0" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="522.7" y="750.0"></text>
</g>
<g>
<title>__skb_clone (1 samples, 0.09%)</title><rect x="520.7" y="739.0" width="1.0" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="523.7" y="750.0"></text>
</g>
<g>
<title>tcp_update_skb_after_send (2 samples, 0.17%)</title><rect x="521.7" y="755.0" width="2.1" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="524.7" y="766.0"></text>
</g>
<g>
<title>bictcp_cwnd_event (1 samples, 0.09%)</title><rect x="523.8" y="771.0" width="1.0" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="526.8" y="782.0"></text>
</g>
<g>
<title>ip_queue_xmit (1 samples, 0.09%)</title><rect x="524.8" y="771.0" width="1.1" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="527.8" y="782.0"></text>
</g>
<g>
<title>rb_first (1 samples, 0.09%)</title><rect x="525.9" y="771.0" width="1.0" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="528.9" y="782.0"></text>
</g>
<g>
<title>read_tsc (2 samples, 0.17%)</title><rect x="526.9" y="771.0" width="2.1" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="529.9" y="782.0"></text>
</g>
<g>
<title>tcp_event_new_data_sent (3 samples, 0.26%)</title><rect x="529.0" y="771.0" width="3.0" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="532.0" y="782.0"></text>
</g>
<g>
<title>tcp_rbtree_insert (1 samples, 0.09%)</title><rect x="529.0" y="755.0" width="1.0" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="532.0" y="766.0"></text>
</g>
<g>
<title>tcp_rearm_rto (2 samples, 0.17%)</title><rect x="530.0" y="755.0" width="2.0" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="533.0" y="766.0"></text>
</g>
<g>
<title>sk_reset_timer (2 samples, 0.17%)</title><rect x="530.0" y="739.0" width="2.0" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="533.0" y="750.0"></text>
</g>
<g>
<title>mod_timer (2 samples, 0.17%)</title><rect x="530.0" y="723.0" width="2.0" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="533.0" y="734.0"></text>
</g>
<g>
<title>__lock_text_start (2 samples, 0.17%)</title><rect x="530.0" y="707.0" width="2.0" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="533.0" y="718.0"></text>
</g>
<g>
<title>tcp_options_write (1 samples, 0.09%)</title><rect x="532.0" y="771.0" width="1.1" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="535.0" y="782.0"></text>
</g>
<g>
<title>tcp_schedule_loss_probe (2 samples, 0.17%)</title><rect x="533.1" y="771.0" width="2.0" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="536.1" y="782.0"></text>
</g>
<g>
<title>tcp_v4_send_check (1 samples, 0.09%)</title><rect x="535.1" y="771.0" width="1.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="538.1" y="782.0"></text>
</g>
<g>
<title>tcp_send_mss (2 samples, 0.17%)</title><rect x="536.2" y="819.0" width="2.0" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="539.2" y="830.0"></text>
</g>
<g>
<title>tcp_current_mss (2 samples, 0.17%)</title><rect x="536.2" y="803.0" width="2.0" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="539.2" y="814.0"></text>
</g>
<g>
<title>tcp_sendmsg_locked (1 samples, 0.09%)</title><rect x="538.2" y="851.0" width="1.0" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="541.2" y="862.0"></text>
</g>
<g>
<title>security_socket_sendmsg (4 samples, 0.35%)</title><rect x="539.2" y="867.0" width="4.2" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="542.2" y="878.0"></text>
</g>
<g>
<title>apparmor_socket_sendmsg (4 samples, 0.35%)</title><rect x="539.2" y="851.0" width="4.2" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="542.2" y="862.0"></text>
</g>
<g>
<title>aa_sk_perm (4 samples, 0.35%)</title><rect x="539.2" y="835.0" width="4.2" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="542.2" y="846.0"></text>
</g>
<g>
<title>sockfd_lookup_light (2 samples, 0.17%)</title><rect x="543.4" y="883.0" width="2.0" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="546.4" y="894.0"></text>
</g>
<g>
<title>__fdget (2 samples, 0.17%)</title><rect x="543.4" y="867.0" width="2.0" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="546.4" y="878.0"></text>
</g>
<g>
<title>__fget_light (2 samples, 0.17%)</title><rect x="543.4" y="851.0" width="2.0" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="546.4" y="862.0"></text>
</g>
<g>
<title>__fget (2 samples, 0.17%)</title><rect x="543.4" y="835.0" width="2.0" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="546.4" y="846.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (1 samples, 0.09%)</title><rect x="545.4" y="963.0" width="1.1" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="548.4" y="974.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (8 samples, 0.70%)</title><rect x="546.5" y="1043.0" width="8.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="549.5" y="1054.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (6 samples, 0.52%)</title><rect x="548.5" y="1027.0" width="6.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="551.5" y="1038.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (6 samples, 0.52%)</title><rect x="548.5" y="1011.0" width="6.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="551.5" y="1022.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/valaubr/LsmDAO.upsert (70 samples, 6.11%)</title><rect x="554.7" y="1059.0" width="72.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="557.7" y="1070.0">ru/mail/..</text>
</g>
<g>
<title>ru/mail/polis/dao/valaubr/TablesPool.upsert (70 samples, 6.11%)</title><rect x="554.7" y="1043.0" width="72.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="557.7" y="1054.0">ru/mail/..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.lock (5 samples, 0.44%)</title><rect x="555.7" y="1027.0" width="5.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="558.7" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireShared (5 samples, 0.44%)</title><rect x="555.7" y="1011.0" width="5.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="558.7" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryAcquireShared (2 samples, 0.17%)</title><rect x="558.8" y="995.0" width="2.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="561.8" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$FairSync.readerShouldBlock (2 samples, 0.17%)</title><rect x="558.8" y="979.0" width="2.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="561.8" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.unlock (1 samples, 0.09%)</title><rect x="560.9" y="1027.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="563.9" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.releaseShared (1 samples, 0.09%)</title><rect x="560.9" y="1011.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="563.9" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doReleaseShared (1 samples, 0.09%)</title><rect x="560.9" y="995.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="563.9" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.09%)</title><rect x="560.9" y="979.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="563.9" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.09%)</title><rect x="560.9" y="963.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="563.9" y="974.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (1 samples, 0.09%)</title><rect x="560.9" y="947.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="563.9" y="958.0"></text>
</g>
<g>
<title>__pthread_cond_signal (1 samples, 0.09%)</title><rect x="560.9" y="931.0" width="1.0" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="563.9" y="942.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.09%)</title><rect x="560.9" y="915.0" width="1.0" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="563.9" y="926.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.09%)</title><rect x="560.9" y="899.0" width="1.0" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="563.9" y="910.0"></text>
</g>
<g>
<title>__x64_sys_futex (1 samples, 0.09%)</title><rect x="560.9" y="883.0" width="1.0" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="563.9" y="894.0"></text>
</g>
<g>
<title>do_futex (1 samples, 0.09%)</title><rect x="560.9" y="867.0" width="1.0" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="563.9" y="878.0"></text>
</g>
<g>
<title>futex_wake (1 samples, 0.09%)</title><rect x="560.9" y="851.0" width="1.0" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="563.9" y="862.0"></text>
</g>
<g>
<title>wake_up_q (1 samples, 0.09%)</title><rect x="560.9" y="835.0" width="1.0" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="563.9" y="846.0"></text>
</g>
<g>
<title>try_to_wake_up (1 samples, 0.09%)</title><rect x="560.9" y="819.0" width="1.0" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="563.9" y="830.0"></text>
</g>
<g>
<title>__lock_text_start (1 samples, 0.09%)</title><rect x="560.9" y="803.0" width="1.0" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="563.9" y="814.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/valaubr/MemTable.upsert (59 samples, 5.15%)</title><rect x="561.9" y="1027.0" width="60.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="564.9" y="1038.0">ru/mai..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.put (59 samples, 5.15%)</title><rect x="561.9" y="1011.0" width="60.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="564.9" y="1022.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.doPut (57 samples, 4.97%)</title><rect x="561.9" y="995.0" width="58.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="564.9" y="1006.0">java/u..</text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (3 samples, 0.26%)</title><rect x="566.0" y="979.0" width="3.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="569.0" y="990.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.compareAndSet (2 samples, 0.17%)</title><rect x="567.1" y="963.0" width="2.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="570.1" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$Index.&lt;init&gt; (7 samples, 0.61%)</title><rect x="569.1" y="979.0" width="7.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="572.1" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.addCount (1 samples, 0.09%)</title><rect x="576.3" y="979.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="579.3" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/LongAdder.add (1 samples, 0.09%)</title><rect x="576.3" y="963.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="579.3" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.addIndices (7 samples, 0.61%)</title><rect x="577.3" y="979.0" width="7.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="580.3" y="990.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (1 samples, 0.09%)</title><rect x="580.4" y="963.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="583.4" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.addIndices (2 samples, 0.17%)</title><rect x="581.5" y="963.0" width="2.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="584.5" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.addIndices (1 samples, 0.09%)</title><rect x="582.5" y="947.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="585.5" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.addIndices (1 samples, 0.09%)</title><rect x="582.5" y="931.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="585.5" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (1 samples, 0.09%)</title><rect x="583.5" y="963.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="586.5" y="974.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (1 samples, 0.09%)</title><rect x="583.5" y="947.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="586.5" y="958.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (1 samples, 0.09%)</title><rect x="583.5" y="931.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="586.5" y="942.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (1 samples, 0.09%)</title><rect x="583.5" y="915.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="586.5" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (35 samples, 3.05%)</title><rect x="584.6" y="979.0" width="36.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="587.6" y="990.0">jav..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (33 samples, 2.88%)</title><rect x="586.6" y="963.0" width="34.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="589.6" y="974.0">ja..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (19 samples, 1.66%)</title><rect x="601.0" y="947.0" width="19.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="604.0" y="958.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (9 samples, 0.79%)</title><rect x="601.0" y="931.0" width="9.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="604.0" y="942.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (10 samples, 0.87%)</title><rect x="610.3" y="931.0" width="10.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="613.3" y="942.0"></text>
</g>
<g>
<title>vectorizedMismatch (2 samples, 0.17%)</title><rect x="618.5" y="915.0" width="2.1" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="621.5" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryAcquireShared (2 samples, 0.17%)</title><rect x="620.6" y="995.0" width="2.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="623.6" y="1006.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/valaubr/TablesPool.putIntoFlushQueue (4 samples, 0.35%)</title><rect x="622.7" y="1027.0" width="4.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="625.7" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$WriteLock.lock (1 samples, 0.09%)</title><rect x="622.7" y="1011.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="625.7" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.09%)</title><rect x="622.7" y="995.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="625.7" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (1 samples, 0.09%)</title><rect x="622.7" y="979.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="625.7" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.setPrevRelaxed (1 samples, 0.09%)</title><rect x="622.7" y="963.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="625.7" y="974.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (1 samples, 0.09%)</title><rect x="622.7" y="947.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="625.7" y="958.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.set (1 samples, 0.09%)</title><rect x="622.7" y="931.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="625.7" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$WriteLock.unlock (2 samples, 0.17%)</title><rect x="623.7" y="1011.0" width="2.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="626.7" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.17%)</title><rect x="623.7" y="995.0" width="2.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="626.7" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.17%)</title><rect x="623.7" y="979.0" width="2.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="626.7" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock.writeLock (1 samples, 0.09%)</title><rect x="625.7" y="1011.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="628.7" y="1022.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/valaubr/TablesPool.putIntoFlushQueue (1 samples, 0.09%)</title><rect x="626.8" y="1059.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="629.8" y="1070.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler.run (50 samples, 4.36%)</title><rect x="627.8" y="1091.0" width="51.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="630.8" y="1102.0">sun/r..</text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (50 samples, 4.36%)</title><rect x="627.8" y="1075.0" width="51.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="630.8" y="1086.0">java/..</text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler$$Lambda$92/110049049.run (50 samples, 4.36%)</title><rect x="627.8" y="1059.0" width="51.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="630.8" y="1070.0">sun/r..</text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler.lambda$run$0 (50 samples, 4.36%)</title><rect x="627.8" y="1043.0" width="51.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="630.8" y="1054.0">sun/r..</text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler.run0 (50 samples, 4.36%)</title><rect x="627.8" y="1027.0" width="51.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="630.8" y="1038.0">sun/r..</text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport.handleMessages (50 samples, 4.36%)</title><rect x="627.8" y="1011.0" width="51.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="630.8" y="1022.0">sun/r..</text>
</g>
<g>
<title>java/io/FilterInputStream.read (1 samples, 0.09%)</title><rect x="627.8" y="995.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="630.8" y="1006.0"></text>
</g>
<g>
<title>java/io/BufferedInputStream.read (1 samples, 0.09%)</title><rect x="627.8" y="979.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="630.8" y="990.0"></text>
</g>
<g>
<title>java/io/BufferedInputStream.fill (1 samples, 0.09%)</title><rect x="627.8" y="963.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="630.8" y="974.0"></text>
</g>
<g>
<title>java/net/SocketInputStream.read (1 samples, 0.09%)</title><rect x="627.8" y="947.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="630.8" y="958.0"></text>
</g>
<g>
<title>java/net/SocketInputStream.read (1 samples, 0.09%)</title><rect x="627.8" y="931.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="630.8" y="942.0"></text>
</g>
<g>
<title>java/net/SocketInputStream.socketRead (1 samples, 0.09%)</title><rect x="627.8" y="915.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="630.8" y="926.0"></text>
</g>
<g>
<title>java/net/SocketInputStream.socketRead0 (1 samples, 0.09%)</title><rect x="627.8" y="899.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="630.8" y="910.0"></text>
</g>
<g>
<title>recv (1 samples, 0.09%)</title><rect x="627.8" y="883.0" width="1.0" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="630.8" y="894.0"></text>
</g>
<g>
<title>sun/rmi/transport/Transport.serviceCall (47 samples, 4.10%)</title><rect x="628.8" y="995.0" width="48.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="631.8" y="1006.0">sun/..</text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (43 samples, 3.75%)</title><rect x="628.8" y="979.0" width="44.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="631.8" y="990.0">java..</text>
</g>
<g>
<title>sun/rmi/transport/Transport$1.run (43 samples, 3.75%)</title><rect x="628.8" y="963.0" width="44.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="631.8" y="974.0">sun/..</text>
</g>
<g>
<title>sun/rmi/transport/Transport$1.run (43 samples, 3.75%)</title><rect x="628.8" y="947.0" width="44.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="631.8" y="958.0">sun/..</text>
</g>
<g>
<title>sun/rmi/server/UnicastServerRef.dispatch (43 samples, 3.75%)</title><rect x="628.8" y="931.0" width="44.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="631.8" y="942.0">sun/..</text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (22 samples, 1.92%)</title><rect x="629.9" y="915.0" width="22.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="632.9" y="926.0">j..</text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (22 samples, 1.92%)</title><rect x="629.9" y="899.0" width="22.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="632.9" y="910.0">j..</text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor33.invoke (1 samples, 0.09%)</title><rect x="629.9" y="883.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="632.9" y="894.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.getAttribute (1 samples, 0.09%)</title><rect x="629.9" y="867.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="632.9" y="878.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.doPrivilegedOperation (1 samples, 0.09%)</title><rect x="629.9" y="851.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="632.9" y="862.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl$PrivilegedOperation.run (1 samples, 0.09%)</title><rect x="629.9" y="835.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="632.9" y="846.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.doOperation (1 samples, 0.09%)</title><rect x="629.9" y="819.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="632.9" y="830.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/JmxMBeanServer.getAttribute (1 samples, 0.09%)</title><rect x="629.9" y="803.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="632.9" y="814.0"></text>
</g>
<g>
<title>com/sun/jmx/interceptor/DefaultMBeanServerInterceptor.getAttribute (1 samples, 0.09%)</title><rect x="629.9" y="787.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="632.9" y="798.0"></text>
</g>
<g>
<title>javax/management/StandardMBean.getAttribute (1 samples, 0.09%)</title><rect x="629.9" y="771.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="632.9" y="782.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/MBeanSupport.getAttribute (1 samples, 0.09%)</title><rect x="629.9" y="755.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="632.9" y="766.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/PerInterface.getAttribute (1 samples, 0.09%)</title><rect x="629.9" y="739.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="632.9" y="750.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/MBeanIntrospector.invokeM (1 samples, 0.09%)</title><rect x="629.9" y="723.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="632.9" y="734.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/MXBeanIntrospector.invokeM2 (1 samples, 0.09%)</title><rect x="629.9" y="707.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="632.9" y="718.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor40.invoke (20 samples, 1.75%)</title><rect x="630.9" y="883.0" width="20.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="633.9" y="894.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.invoke (20 samples, 1.75%)</title><rect x="630.9" y="867.0" width="20.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="633.9" y="878.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.doPrivilegedOperation (13 samples, 1.13%)</title><rect x="631.9" y="851.0" width="13.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="634.9" y="862.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl$PrivilegedOperation.run (13 samples, 1.13%)</title><rect x="631.9" y="835.0" width="13.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="634.9" y="846.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.doOperation (13 samples, 1.13%)</title><rect x="631.9" y="819.0" width="13.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="634.9" y="830.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/JmxMBeanServer.invoke (13 samples, 1.13%)</title><rect x="631.9" y="803.0" width="13.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="634.9" y="814.0"></text>
</g>
<g>
<title>com/sun/jmx/interceptor/DefaultMBeanServerInterceptor.invoke (13 samples, 1.13%)</title><rect x="631.9" y="787.0" width="13.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="634.9" y="798.0"></text>
</g>
<g>
<title>javax/management/StandardMBean.invoke (13 samples, 1.13%)</title><rect x="631.9" y="771.0" width="13.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="634.9" y="782.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/MBeanSupport.invoke (13 samples, 1.13%)</title><rect x="631.9" y="755.0" width="13.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="634.9" y="766.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/PerInterface.invoke (13 samples, 1.13%)</title><rect x="631.9" y="739.0" width="13.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="634.9" y="750.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/MBeanIntrospector.invokeM (13 samples, 1.13%)</title><rect x="631.9" y="723.0" width="13.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="634.9" y="734.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/MXBeanIntrospector.invokeM2 (13 samples, 1.13%)</title><rect x="631.9" y="707.0" width="13.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="634.9" y="718.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/MXBeanIntrospector.invokeM2 (13 samples, 1.13%)</title><rect x="631.9" y="691.0" width="13.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="634.9" y="702.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/ConvertingMethod.invokeWithOpenReturn (13 samples, 1.13%)</title><rect x="631.9" y="675.0" width="13.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="634.9" y="686.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/ConvertingMethod.invokeWithOpenReturn (13 samples, 1.13%)</title><rect x="631.9" y="659.0" width="13.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="634.9" y="670.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$NonNullMXBeanMapping.toOpenValue (10 samples, 0.87%)</title><rect x="631.9" y="643.0" width="10.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="634.9" y="654.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$ArrayMapping.toNonNullOpenValue (10 samples, 0.87%)</title><rect x="631.9" y="627.0" width="10.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="634.9" y="638.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$NonNullMXBeanMapping.toOpenValue (10 samples, 0.87%)</title><rect x="631.9" y="611.0" width="10.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="634.9" y="622.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$CompositeMapping.toNonNullOpenValue (10 samples, 0.87%)</title><rect x="631.9" y="595.0" width="10.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="634.9" y="606.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$NonNullMXBeanMapping.toOpenValue (3 samples, 0.26%)</title><rect x="631.9" y="579.0" width="3.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="634.9" y="590.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$ArrayMapping.toNonNullOpenValue (1 samples, 0.09%)</title><rect x="632.9" y="563.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="635.9" y="574.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$NonNullMXBeanMapping.toOpenValue (1 samples, 0.09%)</title><rect x="632.9" y="547.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="635.9" y="558.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$CompositeMapping.toNonNullOpenValue (1 samples, 0.09%)</title><rect x="632.9" y="531.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="635.9" y="542.0"></text>
</g>
<g>
<title>javax/management/openmbean/CompositeDataSupport.&lt;init&gt; (1 samples, 0.09%)</title><rect x="632.9" y="515.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="635.9" y="526.0"></text>
</g>
<g>
<title>javax/management/openmbean/CompositeDataSupport.makeMap (1 samples, 0.09%)</title><rect x="632.9" y="499.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="635.9" y="510.0"></text>
</g>
<g>
<title>java/util/TreeMap.containsKey (1 samples, 0.09%)</title><rect x="632.9" y="483.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="635.9" y="494.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$CompositeMapping.toNonNullOpenValue (1 samples, 0.09%)</title><rect x="634.0" y="563.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="637.0" y="574.0"></text>
</g>
<g>
<title>javax/management/openmbean/CompositeDataSupport.&lt;init&gt; (1 samples, 0.09%)</title><rect x="634.0" y="547.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="637.0" y="558.0"></text>
</g>
<g>
<title>javax/management/openmbean/CompositeDataSupport.&lt;init&gt; (1 samples, 0.09%)</title><rect x="634.0" y="531.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="637.0" y="542.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableSet.equals (1 samples, 0.09%)</title><rect x="634.0" y="515.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="637.0" y="526.0"></text>
</g>
<g>
<title>java/util/AbstractSet.equals (1 samples, 0.09%)</title><rect x="634.0" y="499.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="637.0" y="510.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.containsAll (1 samples, 0.09%)</title><rect x="634.0" y="483.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="637.0" y="494.0"></text>
</g>
<g>
<title>java/util/TreeMap$KeySet.contains (1 samples, 0.09%)</title><rect x="634.0" y="467.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="637.0" y="478.0"></text>
</g>
<g>
<title>java/util/TreeMap.containsKey (1 samples, 0.09%)</title><rect x="634.0" y="451.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="637.0" y="462.0"></text>
</g>
<g>
<title>java/util/TreeMap.getEntry (1 samples, 0.09%)</title><rect x="634.0" y="435.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="637.0" y="446.0"></text>
</g>
<g>
<title>java/util/TreeMap.getEntryUsingComparator (1 samples, 0.09%)</title><rect x="634.0" y="419.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="637.0" y="430.0"></text>
</g>
<g>
<title>java/lang/String$CaseInsensitiveComparator.compare (1 samples, 0.09%)</title><rect x="634.0" y="403.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="637.0" y="414.0"></text>
</g>
<g>
<title>java/lang/String$CaseInsensitiveComparator.compare (1 samples, 0.09%)</title><rect x="634.0" y="387.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="637.0" y="398.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.compareToCI (1 samples, 0.09%)</title><rect x="634.0" y="371.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="637.0" y="382.0"></text>
</g>
<g>
<title>javax/management/openmbean/CompositeDataSupport.&lt;init&gt; (3 samples, 0.26%)</title><rect x="635.0" y="579.0" width="3.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="638.0" y="590.0"></text>
</g>
<g>
<title>javax/management/openmbean/CompositeDataSupport.&lt;init&gt; (2 samples, 0.17%)</title><rect x="635.0" y="563.0" width="2.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="638.0" y="574.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableSet.equals (1 samples, 0.09%)</title><rect x="635.0" y="547.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="638.0" y="558.0"></text>
</g>
<g>
<title>java/util/AbstractSet.equals (1 samples, 0.09%)</title><rect x="635.0" y="531.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="638.0" y="542.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.containsAll (1 samples, 0.09%)</title><rect x="635.0" y="515.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="638.0" y="526.0"></text>
</g>
<g>
<title>java/util/TreeMap$KeySet.contains (1 samples, 0.09%)</title><rect x="635.0" y="499.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="638.0" y="510.0"></text>
</g>
<g>
<title>java/util/TreeMap.containsKey (1 samples, 0.09%)</title><rect x="635.0" y="483.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="638.0" y="494.0"></text>
</g>
<g>
<title>java/util/TreeMap.getEntry (1 samples, 0.09%)</title><rect x="635.0" y="467.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="638.0" y="478.0"></text>
</g>
<g>
<title>java/util/TreeMap.getEntryUsingComparator (1 samples, 0.09%)</title><rect x="635.0" y="451.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="638.0" y="462.0"></text>
</g>
<g>
<title>java/lang/String$CaseInsensitiveComparator.compare (1 samples, 0.09%)</title><rect x="635.0" y="435.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="638.0" y="446.0"></text>
</g>
<g>
<title>java/lang/String$CaseInsensitiveComparator.compare (1 samples, 0.09%)</title><rect x="635.0" y="419.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="638.0" y="430.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.compareToCI (1 samples, 0.09%)</title><rect x="635.0" y="403.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="638.0" y="414.0"></text>
</g>
<g>
<title>javax/management/openmbean/CompositeType.isValue (1 samples, 0.09%)</title><rect x="636.0" y="547.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="639.0" y="558.0"></text>
</g>
<g>
<title>javax/management/openmbean/CompositeType.isAssignableFrom (1 samples, 0.09%)</title><rect x="636.0" y="531.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="639.0" y="542.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.iterator (1 samples, 0.09%)</title><rect x="636.0" y="515.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="639.0" y="526.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.&lt;init&gt; (1 samples, 0.09%)</title><rect x="636.0" y="499.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="639.0" y="510.0"></text>
</g>
<g>
<title>java/util/TreeMap$KeySet.iterator (1 samples, 0.09%)</title><rect x="636.0" y="483.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="639.0" y="494.0"></text>
</g>
<g>
<title>java/util/TreeMap.keyIterator (1 samples, 0.09%)</title><rect x="636.0" y="467.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="639.0" y="478.0"></text>
</g>
<g>
<title>java/util/TreeMap.getFirstEntry (1 samples, 0.09%)</title><rect x="636.0" y="451.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="639.0" y="462.0"></text>
</g>
<g>
<title>javax/management/openmbean/CompositeDataSupport.makeMap (1 samples, 0.09%)</title><rect x="637.1" y="563.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="640.1" y="574.0"></text>
</g>
<g>
<title>java/util/TreeMap.containsKey (1 samples, 0.09%)</title><rect x="637.1" y="547.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="640.1" y="558.0"></text>
</g>
<g>
<title>java/util/TreeMap.getEntry (1 samples, 0.09%)</title><rect x="637.1" y="531.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="640.1" y="542.0"></text>
</g>
<g>
<title>java/util/TreeMap.getEntryUsingComparator (1 samples, 0.09%)</title><rect x="637.1" y="515.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="640.1" y="526.0"></text>
</g>
<g>
<title>java/lang/String$CaseInsensitiveComparator.compare (1 samples, 0.09%)</title><rect x="637.1" y="499.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="640.1" y="510.0"></text>
</g>
<g>
<title>java/lang/String$CaseInsensitiveComparator.compare (1 samples, 0.09%)</title><rect x="637.1" y="483.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="640.1" y="494.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.compareToCI (1 samples, 0.09%)</title><rect x="637.1" y="467.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="640.1" y="478.0"></text>
</g>
<g>
<title>sun/reflect/misc/MethodUtil.invoke (4 samples, 0.35%)</title><rect x="638.1" y="579.0" width="4.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="641.1" y="590.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (4 samples, 0.35%)</title><rect x="638.1" y="563.0" width="4.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="641.1" y="574.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (4 samples, 0.35%)</title><rect x="638.1" y="547.0" width="4.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="641.1" y="558.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor3.invoke (4 samples, 0.35%)</title><rect x="638.1" y="531.0" width="4.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="641.1" y="542.0"></text>
</g>
<g>
<title>sun/reflect/misc/Trampoline.invoke (4 samples, 0.35%)</title><rect x="638.1" y="515.0" width="4.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="641.1" y="526.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (2 samples, 0.17%)</title><rect x="638.1" y="499.0" width="2.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="641.1" y="510.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (2 samples, 0.17%)</title><rect x="638.1" y="483.0" width="2.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="641.1" y="494.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor12.invoke (1 samples, 0.09%)</title><rect x="638.1" y="467.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="641.1" y="478.0"></text>
</g>
<g>
<title>java/lang/management/ThreadInfo.getLockedMonitors (1 samples, 0.09%)</title><rect x="638.1" y="451.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="641.1" y="462.0"></text>
</g>
<g>
<title>java/lang/Object.clone (1 samples, 0.09%)</title><rect x="638.1" y="435.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="641.1" y="446.0"></text>
</g>
<g>
<title>JNIHandles::make_local(JNIEnv_*, oopDesc*) (1 samples, 0.09%)</title><rect x="638.1" y="419.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="641.1" y="430.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor21.invoke (1 samples, 0.09%)</title><rect x="639.1" y="467.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="642.1" y="478.0"></text>
</g>
<g>
<title>sun/reflect/misc/Trampoline.ensureInvocableMethod (2 samples, 0.17%)</title><rect x="640.2" y="499.0" width="2.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="643.2" y="510.0"></text>
</g>
<g>
<title>java/lang/Class.getName (2 samples, 0.17%)</title><rect x="640.2" y="483.0" width="2.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="643.2" y="494.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor5.invoke (1 samples, 0.09%)</title><rect x="640.2" y="467.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="643.2" y="478.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor6.invoke (1 samples, 0.09%)</title><rect x="641.2" y="467.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="644.2" y="478.0"></text>
</g>
<g>
<title>sun/reflect/misc/MethodUtil.invoke (3 samples, 0.26%)</title><rect x="642.2" y="643.0" width="3.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="645.2" y="654.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (3 samples, 0.26%)</title><rect x="642.2" y="627.0" width="3.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="645.2" y="638.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (3 samples, 0.26%)</title><rect x="642.2" y="611.0" width="3.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="645.2" y="622.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor3.invoke (3 samples, 0.26%)</title><rect x="642.2" y="595.0" width="3.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="645.2" y="606.0"></text>
</g>
<g>
<title>sun/reflect/misc/Trampoline.invoke (3 samples, 0.26%)</title><rect x="642.2" y="579.0" width="3.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="645.2" y="590.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (3 samples, 0.26%)</title><rect x="642.2" y="563.0" width="3.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="645.2" y="574.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (3 samples, 0.26%)</title><rect x="642.2" y="547.0" width="3.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="645.2" y="558.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor45.invoke (3 samples, 0.26%)</title><rect x="642.2" y="531.0" width="3.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="645.2" y="542.0"></text>
</g>
<g>
<title>sun/management/ThreadImpl.getThreadInfo (3 samples, 0.26%)</title><rect x="642.2" y="515.0" width="3.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="645.2" y="526.0"></text>
</g>
<g>
<title>sun/management/ThreadImpl.getThreadInfo1 (3 samples, 0.26%)</title><rect x="642.2" y="499.0" width="3.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="645.2" y="510.0"></text>
</g>
<g>
<title>jmm_GetThreadInfo (3 samples, 0.26%)</title><rect x="642.2" y="483.0" width="3.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="645.2" y="494.0"></text>
</g>
<g>
<title>Management::create_thread_info_instance(ThreadSnapshot*, Thread*) (3 samples, 0.26%)</title><rect x="642.2" y="467.0" width="3.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="645.2" y="478.0"></text>
</g>
<g>
<title>initialize_ThreadInfo_constructor_arguments(JavaCallArguments*, ThreadSnapshot*, Thread*) (3 samples, 0.26%)</title><rect x="642.2" y="451.0" width="3.1" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="645.2" y="462.0"></text>
</g>
<g>
<title>ThreadStackTrace::allocate_fill_stack_trace_element_array(Thread*) (2 samples, 0.17%)</title><rect x="642.2" y="435.0" width="2.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="645.2" y="446.0"></text>
</g>
<g>
<title>java_lang_StackTraceElement::create(methodHandle const&amp;, int, Thread*) (2 samples, 0.17%)</title><rect x="642.2" y="419.0" width="2.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="645.2" y="430.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance_handle(Thread*) (1 samples, 0.09%)</title><rect x="642.2" y="403.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="645.2" y="414.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.09%)</title><rect x="642.2" y="387.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="645.2" y="398.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.09%)</title><rect x="642.2" y="371.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="645.2" y="382.0"></text>
</g>
<g>
<title>ObjAllocator::initialize(HeapWord*) const (1 samples, 0.09%)</title><rect x="642.2" y="355.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="645.2" y="366.0"></text>
</g>
<g>
<title>java_lang_StackTraceElement::fill_in(Handle, InstanceKlass*, methodHandle const&amp;, int, int, Symbol*, Thread*) (1 samples, 0.09%)</title><rect x="643.2" y="403.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="646.2" y="414.0"></text>
</g>
<g>
<title>StringTable::intern(Symbol*, Thread*) (1 samples, 0.09%)</title><rect x="643.2" y="387.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="646.2" y="398.0"></text>
</g>
<g>
<title>StringTable::do_lookup(unsigned short*, int, unsigned long) (1 samples, 0.09%)</title><rect x="643.2" y="371.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="646.2" y="382.0"></text>
</g>
<g>
<title>oopFactory::new_objArray(Klass*, int, Thread*) (1 samples, 0.09%)</title><rect x="644.3" y="435.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="647.3" y="446.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.getClassLoaderFor (1 samples, 0.09%)</title><rect x="645.3" y="851.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="648.3" y="862.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.withPermissions (1 samples, 0.09%)</title><rect x="645.3" y="835.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="648.3" y="846.0"></text>
</g>
<g>
<title>java/security/AccessControlContext.&lt;init&gt; (1 samples, 0.09%)</title><rect x="645.3" y="819.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="648.3" y="830.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_virtual_call_C(JavaThread*) (1 samples, 0.09%)</title><rect x="645.3" y="803.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="648.3" y="814.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.09%)</title><rect x="645.3" y="787.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="648.3" y="798.0"></text>
</g>
<g>
<title>nmethod::is_nmethod() const (1 samples, 0.09%)</title><rect x="645.3" y="771.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="648.3" y="782.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.unwrap (5 samples, 0.44%)</title><rect x="646.3" y="851.0" width="5.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="649.3" y="862.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (2 samples, 0.17%)</title><rect x="646.3" y="835.0" width="2.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="649.3" y="846.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl$7.run (2 samples, 0.17%)</title><rect x="646.3" y="819.0" width="2.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="649.3" y="830.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl$7.run (2 samples, 0.17%)</title><rect x="646.3" y="803.0" width="2.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="649.3" y="814.0"></text>
</g>
<g>
<title>com/sun/jmx/remote/util/OrderClassLoaders.&lt;init&gt; (2 samples, 0.17%)</title><rect x="646.3" y="787.0" width="2.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="649.3" y="798.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.&lt;init&gt; (2 samples, 0.17%)</title><rect x="646.3" y="771.0" width="2.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="649.3" y="782.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.&lt;init&gt; (2 samples, 0.17%)</title><rect x="646.3" y="755.0" width="2.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="649.3" y="766.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.nameAndId (2 samples, 0.17%)</title><rect x="646.3" y="739.0" width="2.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="649.3" y="750.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.09%)</title><rect x="646.3" y="723.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="649.3" y="734.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.&lt;init&gt; (1 samples, 0.09%)</title><rect x="646.3" y="707.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="649.3" y="718.0"></text>
</g>
<g>
<title>java/lang/System.identityHashCode (1 samples, 0.09%)</title><rect x="647.4" y="723.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="650.4" y="734.0"></text>
</g>
<g>
<title>JVM_IHashCode (1 samples, 0.09%)</title><rect x="647.4" y="707.0" width="1.0" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="650.4" y="718.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.unwrap (3 samples, 0.26%)</title><rect x="648.4" y="835.0" width="3.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="651.4" y="846.0"></text>
</g>
<g>
<title>java/rmi/MarshalledObject.get (3 samples, 0.26%)</title><rect x="648.4" y="819.0" width="3.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="651.4" y="830.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject (3 samples, 0.26%)</title><rect x="648.4" y="803.0" width="3.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="651.4" y="814.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject (3 samples, 0.26%)</title><rect x="648.4" y="787.0" width="3.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="651.4" y="798.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject0 (3 samples, 0.26%)</title><rect x="648.4" y="771.0" width="3.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="651.4" y="782.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readArray (3 samples, 0.26%)</title><rect x="648.4" y="755.0" width="3.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="651.4" y="766.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readClassDesc (2 samples, 0.17%)</title><rect x="648.4" y="739.0" width="2.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="651.4" y="750.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readNonProxyDesc (2 samples, 0.17%)</title><rect x="648.4" y="723.0" width="2.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="651.4" y="734.0"></text>
</g>
<g>
<title>sun/rmi/server/MarshalInputStream.resolveClass (2 samples, 0.17%)</title><rect x="648.4" y="707.0" width="2.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="651.4" y="718.0"></text>
</g>
<g>
<title>sun/rmi/server/MarshalInputStream.latestUserDefinedLoader (2 samples, 0.17%)</title><rect x="648.4" y="691.0" width="2.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="651.4" y="702.0"></text>
</g>
<g>
<title>jdk/internal/misc/VM.latestUserDefinedLoader (2 samples, 0.17%)</title><rect x="648.4" y="675.0" width="2.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="651.4" y="686.0"></text>
</g>
<g>
<title>jdk/internal/misc/VM.latestUserDefinedLoader0 (2 samples, 0.17%)</title><rect x="648.4" y="659.0" width="2.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="651.4" y="670.0"></text>
</g>
<g>
<title>JVM_LatestUserDefinedLoader (1 samples, 0.09%)</title><rect x="648.4" y="643.0" width="1.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="651.4" y="654.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.09%)</title><rect x="648.4" y="627.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="651.4" y="638.0"></text>
</g>
<g>
<title>frame::sender_for_entry_frame(RegisterMap*) const (1 samples, 0.09%)</title><rect x="648.4" y="611.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="651.4" y="622.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.09%)</title><rect x="648.4" y="595.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="651.4" y="606.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (1 samples, 0.09%)</title><rect x="648.4" y="579.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="651.4" y="590.0"></text>
</g>
<g>
<title>Method::bcp_from(unsigned char*) const (1 samples, 0.09%)</title><rect x="649.4" y="643.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="652.4" y="654.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject0 (1 samples, 0.09%)</title><rect x="650.5" y="739.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="653.5" y="750.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readOrdinaryObject (1 samples, 0.09%)</title><rect x="650.5" y="723.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="653.5" y="734.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readClassDesc (1 samples, 0.09%)</title><rect x="650.5" y="707.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="653.5" y="718.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readNonProxyDesc (1 samples, 0.09%)</title><rect x="650.5" y="691.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="653.5" y="702.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readClassDesc (1 samples, 0.09%)</title><rect x="650.5" y="675.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="653.5" y="686.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readNonProxyDesc (1 samples, 0.09%)</title><rect x="650.5" y="659.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="653.5" y="670.0"></text>
</g>
<g>
<title>sun/rmi/server/MarshalInputStream.resolveClass (1 samples, 0.09%)</title><rect x="650.5" y="643.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="653.5" y="654.0"></text>
</g>
<g>
<title>sun/rmi/server/MarshalInputStream.latestUserDefinedLoader (1 samples, 0.09%)</title><rect x="650.5" y="627.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="653.5" y="638.0"></text>
</g>
<g>
<title>jdk/internal/misc/VM.latestUserDefinedLoader (1 samples, 0.09%)</title><rect x="650.5" y="611.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="653.5" y="622.0"></text>
</g>
<g>
<title>jdk/internal/misc/VM.latestUserDefinedLoader0 (1 samples, 0.09%)</title><rect x="650.5" y="595.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="653.5" y="606.0"></text>
</g>
<g>
<title>JVM_LatestUserDefinedLoader (1 samples, 0.09%)</title><rect x="650.5" y="579.0" width="1.0" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="653.5" y="590.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor43.invoke (1 samples, 0.09%)</title><rect x="651.5" y="883.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="654.5" y="894.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.getDefaultDomain (1 samples, 0.09%)</title><rect x="651.5" y="867.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="654.5" y="878.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.doPrivilegedOperation (1 samples, 0.09%)</title><rect x="651.5" y="851.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="654.5" y="862.0"></text>
</g>
<g>
<title>com/sun/jmx/remote/internal/ServerCommunicatorAdmin.rspOutgoing (1 samples, 0.09%)</title><rect x="651.5" y="835.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="654.5" y="846.0"></text>
</g>
<g>
<title>com/sun/jmx/remote/internal/ServerCommunicatorAdmin.logtime (1 samples, 0.09%)</title><rect x="651.5" y="819.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="654.5" y="830.0"></text>
</g>
<g>
<title>com/sun/jmx/remote/util/ClassLogger.trace (1 samples, 0.09%)</title><rect x="651.5" y="803.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="654.5" y="814.0"></text>
</g>
<g>
<title>java/lang/invoke/MethodHandle.invokeBasic (1 samples, 0.09%)</title><rect x="651.5" y="787.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="654.5" y="798.0"></text>
</g>
<g>
<title>sun/rmi/server/UnicastRef.marshalValue (11 samples, 0.96%)</title><rect x="652.5" y="915.0" width="11.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="655.5" y="926.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject (11 samples, 0.96%)</title><rect x="652.5" y="899.0" width="11.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="655.5" y="910.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (11 samples, 0.96%)</title><rect x="652.5" y="883.0" width="11.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="655.5" y="894.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeArray (8 samples, 0.70%)</title><rect x="652.5" y="867.0" width="8.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="655.5" y="878.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (8 samples, 0.70%)</title><rect x="652.5" y="851.0" width="8.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="655.5" y="862.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$BlockDataOutputStream.setBlockDataMode (1 samples, 0.09%)</title><rect x="652.5" y="835.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="655.5" y="846.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$BlockDataOutputStream.drain (1 samples, 0.09%)</title><rect x="652.5" y="819.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="655.5" y="830.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$BlockDataOutputStream.writeBlockHeader (1 samples, 0.09%)</title><rect x="652.5" y="803.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="655.5" y="814.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (7 samples, 0.61%)</title><rect x="653.5" y="835.0" width="7.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="656.5" y="846.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (7 samples, 0.61%)</title><rect x="653.5" y="819.0" width="7.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="656.5" y="830.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.defaultWriteFields (7 samples, 0.61%)</title><rect x="653.5" y="803.0" width="7.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="656.5" y="814.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (7 samples, 0.61%)</title><rect x="653.5" y="787.0" width="7.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="656.5" y="798.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (7 samples, 0.61%)</title><rect x="653.5" y="771.0" width="7.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="656.5" y="782.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (7 samples, 0.61%)</title><rect x="653.5" y="755.0" width="7.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="656.5" y="766.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.defaultWriteFields (1 samples, 0.09%)</title><rect x="653.5" y="739.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="656.5" y="750.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (1 samples, 0.09%)</title><rect x="653.5" y="723.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="656.5" y="734.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$HandleTable.lookup (1 samples, 0.09%)</title><rect x="653.5" y="707.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="656.5" y="718.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.invokeWriteObject (6 samples, 0.52%)</title><rect x="654.6" y="739.0" width="6.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="657.6" y="750.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (6 samples, 0.52%)</title><rect x="654.6" y="723.0" width="6.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="657.6" y="734.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (6 samples, 0.52%)</title><rect x="654.6" y="707.0" width="6.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="657.6" y="718.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor30.invoke (6 samples, 0.52%)</title><rect x="654.6" y="691.0" width="6.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="657.6" y="702.0"></text>
</g>
<g>
<title>java/util/TreeMap.writeObject (6 samples, 0.52%)</title><rect x="654.6" y="675.0" width="6.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="657.6" y="686.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject (6 samples, 0.52%)</title><rect x="654.6" y="659.0" width="6.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="657.6" y="670.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (5 samples, 0.44%)</title><rect x="655.6" y="643.0" width="5.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="658.6" y="654.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeArray (1 samples, 0.09%)</title><rect x="655.6" y="627.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="658.6" y="638.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (1 samples, 0.09%)</title><rect x="655.6" y="611.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="658.6" y="622.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (2 samples, 0.17%)</title><rect x="656.6" y="627.0" width="2.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="659.6" y="638.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$HandleTable.assign (1 samples, 0.09%)</title><rect x="656.6" y="611.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="659.6" y="622.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$HandleTable.growEntries (1 samples, 0.09%)</title><rect x="656.6" y="595.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="659.6" y="606.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (1 samples, 0.09%)</title><rect x="657.7" y="611.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="660.7" y="622.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.defaultWriteFields (1 samples, 0.09%)</title><rect x="657.7" y="595.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="660.7" y="606.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="657.7" y="579.0" width="1.0" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="660.7" y="590.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeString (1 samples, 0.09%)</title><rect x="658.7" y="627.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="661.7" y="638.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$BlockDataOutputStream.getUTFLength (1 samples, 0.09%)</title><rect x="658.7" y="611.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="661.7" y="622.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.lookup (1 samples, 0.09%)</title><rect x="659.7" y="627.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="662.7" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.putIfAbsent (1 samples, 0.09%)</title><rect x="659.7" y="611.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="662.7" y="622.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (2 samples, 0.17%)</title><rect x="660.8" y="867.0" width="2.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="663.8" y="878.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (2 samples, 0.17%)</title><rect x="660.8" y="851.0" width="2.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="663.8" y="862.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.invokeWriteObject (2 samples, 0.17%)</title><rect x="660.8" y="835.0" width="2.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="663.8" y="846.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (2 samples, 0.17%)</title><rect x="660.8" y="819.0" width="2.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="663.8" y="830.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (2 samples, 0.17%)</title><rect x="660.8" y="803.0" width="2.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="663.8" y="814.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor39.invoke (2 samples, 0.17%)</title><rect x="660.8" y="787.0" width="2.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="663.8" y="798.0"></text>
</g>
<g>
<title>java/util/ArrayList.writeObject (2 samples, 0.17%)</title><rect x="660.8" y="771.0" width="2.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="663.8" y="782.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject (2 samples, 0.17%)</title><rect x="660.8" y="755.0" width="2.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="663.8" y="766.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (2 samples, 0.17%)</title><rect x="660.8" y="739.0" width="2.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="663.8" y="750.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$HandleTable.lookup (1 samples, 0.09%)</title><rect x="660.8" y="723.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="663.8" y="734.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$HandleTable.hash (1 samples, 0.09%)</title><rect x="660.8" y="707.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="663.8" y="718.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (1 samples, 0.09%)</title><rect x="661.8" y="723.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="664.8" y="734.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeClassDesc (1 samples, 0.09%)</title><rect x="661.8" y="707.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="664.8" y="718.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeNonProxyDesc (1 samples, 0.09%)</title><rect x="661.8" y="691.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="664.8" y="702.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.writeNonProxy (1 samples, 0.09%)</title><rect x="661.8" y="675.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="664.8" y="686.0"></text>
</g>
<g>
<title>java/io/ObjectStreamField.getTypeString (1 samples, 0.09%)</title><rect x="661.8" y="659.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="664.8" y="670.0"></text>
</g>
<g>
<title>java/io/ObjectStreamField.isPrimitive (1 samples, 0.09%)</title><rect x="661.8" y="643.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="664.8" y="654.0"></text>
</g>
<g>
<title>java/io/ObjectStreamField.getTypeCode (1 samples, 0.09%)</title><rect x="661.8" y="627.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="664.8" y="638.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_opt_virtual_call_C(JavaThread*) (1 samples, 0.09%)</title><rect x="661.8" y="611.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="664.8" y="622.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.09%)</title><rect x="661.8" y="595.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="664.8" y="606.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_sub_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.09%)</title><rect x="661.8" y="579.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="664.8" y="590.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_info_helper(JavaThread*, vframeStream&amp;, Bytecodes::Code&amp;, CallInfo&amp;, Thread*) (1 samples, 0.09%)</title><rect x="661.8" y="563.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="664.8" y="574.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.09%)</title><rect x="661.8" y="547.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="664.8" y="558.0"></text>
</g>
<g>
<title>frame::frame(long*, long*, long*, unsigned char*) (1 samples, 0.09%)</title><rect x="661.8" y="531.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="664.8" y="542.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (1 samples, 0.09%)</title><rect x="661.8" y="515.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="664.8" y="526.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeString (1 samples, 0.09%)</title><rect x="662.8" y="867.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="665.8" y="878.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="662.8" y="851.0" width="1.0" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="665.8" y="862.0"></text>
</g>
<g>
<title>sun/rmi/server/UnicastRef.unmarshalValue (3 samples, 0.26%)</title><rect x="663.8" y="915.0" width="3.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="666.8" y="926.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject (3 samples, 0.26%)</title><rect x="663.8" y="899.0" width="3.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="666.8" y="910.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject (3 samples, 0.26%)</title><rect x="663.8" y="883.0" width="3.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="666.8" y="894.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject0 (3 samples, 0.26%)</title><rect x="663.8" y="867.0" width="3.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="666.8" y="878.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readArray (1 samples, 0.09%)</title><rect x="663.8" y="851.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="666.8" y="862.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readClassDesc (1 samples, 0.09%)</title><rect x="663.8" y="835.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="666.8" y="846.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readNonProxyDesc (1 samples, 0.09%)</title><rect x="663.8" y="819.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="666.8" y="830.0"></text>
</g>
<g>
<title>sun/rmi/server/MarshalInputStream.resolveClass (1 samples, 0.09%)</title><rect x="663.8" y="803.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="666.8" y="814.0"></text>
</g>
<g>
<title>java/rmi/server/RMIClassLoader.loadClass (1 samples, 0.09%)</title><rect x="663.8" y="787.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="666.8" y="798.0"></text>
</g>
<g>
<title>java/rmi/server/RMIClassLoader$2.loadClass (1 samples, 0.09%)</title><rect x="663.8" y="771.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="666.8" y="782.0"></text>
</g>
<g>
<title>sun/rmi/server/LoaderHandler.loadClass (1 samples, 0.09%)</title><rect x="663.8" y="755.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="666.8" y="766.0"></text>
</g>
<g>
<title>sun/rmi/server/LoaderHandler.loadClass (1 samples, 0.09%)</title><rect x="663.8" y="739.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="666.8" y="750.0"></text>
</g>
<g>
<title>java/lang/Class.forName (1 samples, 0.09%)</title><rect x="663.8" y="723.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="666.8" y="734.0"></text>
</g>
<g>
<title>java/lang/Class.forName0 (1 samples, 0.09%)</title><rect x="663.8" y="707.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="666.8" y="718.0"></text>
</g>
<g>
<title>Java_java_lang_Class_forName0 (1 samples, 0.09%)</title><rect x="663.8" y="691.0" width="1.1" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="666.8" y="702.0"></text>
</g>
<g>
<title>JVM_FindClassFromCaller (1 samples, 0.09%)</title><rect x="663.8" y="675.0" width="1.1" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="666.8" y="686.0"></text>
</g>
<g>
<title>find_class_from_class_loader(JNIEnv_*, Symbol*, unsigned char, Handle, Handle, unsigned char, Thread*) (1 samples, 0.09%)</title><rect x="663.8" y="659.0" width="1.1" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="666.8" y="670.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_or_fail(Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.09%)</title><rect x="663.8" y="643.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="666.8" y="654.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_array_class_or_null(Symbol*, Handle, Handle, Thread*) (1 samples, 0.09%)</title><rect x="663.8" y="627.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="666.8" y="638.0"></text>
</g>
<g>
<title>ObjArrayKlass::array_klass_impl(bool, int, Thread*) (1 samples, 0.09%)</title><rect x="663.8" y="611.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="666.8" y="622.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readOrdinaryObject (2 samples, 0.17%)</title><rect x="664.9" y="851.0" width="2.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="667.9" y="862.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readClassDesc (2 samples, 0.17%)</title><rect x="664.9" y="835.0" width="2.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="667.9" y="846.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readNonProxyDesc (2 samples, 0.17%)</title><rect x="664.9" y="819.0" width="2.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="667.9" y="830.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.initNonProxy (1 samples, 0.09%)</title><rect x="664.9" y="803.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="667.9" y="814.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.lookup (1 samples, 0.09%)</title><rect x="664.9" y="787.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="667.9" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.putIfAbsent (1 samples, 0.09%)</title><rect x="664.9" y="771.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="667.9" y="782.0"></text>
</g>
<g>
<title>sun/rmi/server/MarshalInputStream.resolveClass (1 samples, 0.09%)</title><rect x="665.9" y="803.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="668.9" y="814.0"></text>
</g>
<g>
<title>java/rmi/server/RMIClassLoader.loadClass (1 samples, 0.09%)</title><rect x="665.9" y="787.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="668.9" y="798.0"></text>
</g>
<g>
<title>java/rmi/server/RMIClassLoader$2.loadClass (1 samples, 0.09%)</title><rect x="665.9" y="771.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="668.9" y="782.0"></text>
</g>
<g>
<title>sun/rmi/server/LoaderHandler.loadClass (1 samples, 0.09%)</title><rect x="665.9" y="755.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="668.9" y="766.0"></text>
</g>
<g>
<title>sun/rmi/server/LoaderHandler.loadClass (1 samples, 0.09%)</title><rect x="665.9" y="739.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="668.9" y="750.0"></text>
</g>
<g>
<title>java/lang/Class.forName (1 samples, 0.09%)</title><rect x="665.9" y="723.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="668.9" y="734.0"></text>
</g>
<g>
<title>java/lang/Class.forName0 (1 samples, 0.09%)</title><rect x="665.9" y="707.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="668.9" y="718.0"></text>
</g>
<g>
<title>Java_java_lang_Class_forName0 (1 samples, 0.09%)</title><rect x="665.9" y="691.0" width="1.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="668.9" y="702.0"></text>
</g>
<g>
<title>JVM_FindClassFromCaller (1 samples, 0.09%)</title><rect x="665.9" y="675.0" width="1.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="668.9" y="686.0"></text>
</g>
<g>
<title>find_class_from_class_loader(JNIEnv_*, Symbol*, unsigned char, Handle, Handle, unsigned char, Thread*) (1 samples, 0.09%)</title><rect x="665.9" y="659.0" width="1.0" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="668.9" y="670.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_or_fail(Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.09%)</title><rect x="665.9" y="643.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="668.9" y="654.0"></text>
</g>
<g>
<title>SystemDictionary::resolve_instance_class_or_null(Symbol*, Handle, Handle, Thread*) (1 samples, 0.09%)</title><rect x="665.9" y="627.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="668.9" y="638.0"></text>
</g>
<g>
<title>Dictionary::find(unsigned int, Symbol*, Handle) (1 samples, 0.09%)</title><rect x="665.9" y="611.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="668.9" y="622.0"></text>
</g>
<g>
<title>sun/rmi/transport/StreamRemoteCall.getResultStream (3 samples, 0.26%)</title><rect x="666.9" y="915.0" width="3.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="669.9" y="926.0"></text>
</g>
<g>
<title>sun/rmi/transport/StreamRemoteCall.getOutputStream (3 samples, 0.26%)</title><rect x="666.9" y="899.0" width="3.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="669.9" y="910.0"></text>
</g>
<g>
<title>sun/rmi/transport/ConnectionOutputStream.&lt;init&gt; (3 samples, 0.26%)</title><rect x="666.9" y="883.0" width="3.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="669.9" y="894.0"></text>
</g>
<g>
<title>sun/rmi/server/MarshalOutputStream.&lt;init&gt; (3 samples, 0.26%)</title><rect x="666.9" y="867.0" width="3.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="669.9" y="878.0"></text>
</g>
<g>
<title>sun/rmi/server/MarshalOutputStream.&lt;init&gt; (3 samples, 0.26%)</title><rect x="666.9" y="851.0" width="3.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="669.9" y="862.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (3 samples, 0.26%)</title><rect x="666.9" y="835.0" width="3.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="669.9" y="846.0"></text>
</g>
<g>
<title>JVM_DoPrivileged (3 samples, 0.26%)</title><rect x="666.9" y="819.0" width="3.1" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="669.9" y="830.0"></text>
</g>
<g>
<title>vframeStreamCommon::security_get_caller_frame(int) (2 samples, 0.17%)</title><rect x="668.0" y="803.0" width="2.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="671.0" y="814.0"></text>
</g>
<g>
<title>sun/rmi/transport/StreamRemoteCall.releaseOutputStream (3 samples, 0.26%)</title><rect x="670.0" y="915.0" width="3.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="673.0" y="926.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.flush (3 samples, 0.26%)</title><rect x="670.0" y="899.0" width="3.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="673.0" y="910.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$BlockDataOutputStream.flush (3 samples, 0.26%)</title><rect x="670.0" y="883.0" width="3.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="673.0" y="894.0"></text>
</g>
<g>
<title>java/io/BufferedOutputStream.flush (3 samples, 0.26%)</title><rect x="670.0" y="867.0" width="3.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="673.0" y="878.0"></text>
</g>
<g>
<title>java/io/BufferedOutputStream.flushBuffer (3 samples, 0.26%)</title><rect x="670.0" y="851.0" width="3.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="673.0" y="862.0"></text>
</g>
<g>
<title>java/net/SocketOutputStream.write (3 samples, 0.26%)</title><rect x="670.0" y="835.0" width="3.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="673.0" y="846.0"></text>
</g>
<g>
<title>java/net/SocketOutputStream.socketWrite (3 samples, 0.26%)</title><rect x="670.0" y="819.0" width="3.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="673.0" y="830.0"></text>
</g>
<g>
<title>java/net/SocketOutputStream.socketWrite0 (3 samples, 0.26%)</title><rect x="670.0" y="803.0" width="3.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="673.0" y="814.0"></text>
</g>
<g>
<title>__send (3 samples, 0.26%)</title><rect x="670.0" y="787.0" width="3.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="673.0" y="798.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (3 samples, 0.26%)</title><rect x="670.0" y="771.0" width="3.1" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="673.0" y="782.0"></text>
</g>
<g>
<title>do_syscall_64 (3 samples, 0.26%)</title><rect x="670.0" y="755.0" width="3.1" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="673.0" y="766.0"></text>
</g>
<g>
<title>__x64_sys_sendto (3 samples, 0.26%)</title><rect x="670.0" y="739.0" width="3.1" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="673.0" y="750.0"></text>
</g>
<g>
<title>__sys_sendto (3 samples, 0.26%)</title><rect x="670.0" y="723.0" width="3.1" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="673.0" y="734.0"></text>
</g>
<g>
<title>sock_sendmsg (2 samples, 0.17%)</title><rect x="670.0" y="707.0" width="2.1" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="673.0" y="718.0"></text>
</g>
<g>
<title>inet6_sendmsg (2 samples, 0.17%)</title><rect x="670.0" y="691.0" width="2.1" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="673.0" y="702.0"></text>
</g>
<g>
<title>tcp_sendmsg (2 samples, 0.17%)</title><rect x="670.0" y="675.0" width="2.1" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="673.0" y="686.0"></text>
</g>
<g>
<title>tcp_sendmsg_locked (2 samples, 0.17%)</title><rect x="670.0" y="659.0" width="2.1" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="673.0" y="670.0"></text>
</g>
<g>
<title>tcp_push (2 samples, 0.17%)</title><rect x="670.0" y="643.0" width="2.1" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="673.0" y="654.0"></text>
</g>
<g>
<title>__tcp_push_pending_frames (2 samples, 0.17%)</title><rect x="670.0" y="627.0" width="2.1" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="673.0" y="638.0"></text>
</g>
<g>
<title>tcp_write_xmit (2 samples, 0.17%)</title><rect x="670.0" y="611.0" width="2.1" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="673.0" y="622.0"></text>
</g>
<g>
<title>tcp_event_new_data_sent (1 samples, 0.09%)</title><rect x="670.0" y="595.0" width="1.0" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="673.0" y="606.0"></text>
</g>
<g>
<title>rb_first (1 samples, 0.09%)</title><rect x="670.0" y="579.0" width="1.0" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="673.0" y="590.0"></text>
</g>
<g>
<title>tcp_v4_send_check (1 samples, 0.09%)</title><rect x="671.0" y="595.0" width="1.1" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="674.0" y="606.0"></text>
</g>
<g>
<title>sockfd_lookup_light (1 samples, 0.09%)</title><rect x="672.1" y="707.0" width="1.0" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="675.1" y="718.0"></text>
</g>
<g>
<title>__fdget (1 samples, 0.09%)</title><rect x="672.1" y="691.0" width="1.0" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="675.1" y="702.0"></text>
</g>
<g>
<title>__fget_light (1 samples, 0.09%)</title><rect x="672.1" y="675.0" width="1.0" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="675.1" y="686.0"></text>
</g>
<g>
<title>__fget (1 samples, 0.09%)</title><rect x="672.1" y="659.0" width="1.0" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="675.1" y="670.0"></text>
</g>
<g>
<title>sun/rmi/transport/StreamRemoteCall.getInputStream (4 samples, 0.35%)</title><rect x="673.1" y="979.0" width="4.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="676.1" y="990.0"></text>
</g>
<g>
<title>sun/rmi/runtime/Log$LoggerLog.log (1 samples, 0.09%)</title><rect x="673.1" y="963.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="676.1" y="974.0"></text>
</g>
<g>
<title>sun/rmi/runtime/Log.getSource (1 samples, 0.09%)</title><rect x="673.1" y="947.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="676.1" y="958.0"></text>
</g>
<g>
<title>sun/rmi/transport/ConnectionInputStream.&lt;init&gt; (3 samples, 0.26%)</title><rect x="674.1" y="963.0" width="3.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="677.1" y="974.0"></text>
</g>
<g>
<title>sun/rmi/server/MarshalInputStream.&lt;init&gt; (3 samples, 0.26%)</title><rect x="674.1" y="947.0" width="3.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="677.1" y="958.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.&lt;init&gt; (3 samples, 0.26%)</title><rect x="674.1" y="931.0" width="3.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="677.1" y="942.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.verifySubclass (1 samples, 0.09%)</title><rect x="676.2" y="915.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="679.2" y="926.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPConnection.releaseOutputStream (2 samples, 0.17%)</title><rect x="677.2" y="995.0" width="2.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="680.2" y="1006.0"></text>
</g>
<g>
<title>java/io/BufferedOutputStream.flush (2 samples, 0.17%)</title><rect x="677.2" y="979.0" width="2.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="680.2" y="990.0"></text>
</g>
<g>
<title>java/io/BufferedOutputStream.flushBuffer (2 samples, 0.17%)</title><rect x="677.2" y="963.0" width="2.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="680.2" y="974.0"></text>
</g>
<g>
<title>java/net/SocketOutputStream.write (2 samples, 0.17%)</title><rect x="677.2" y="947.0" width="2.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="680.2" y="958.0"></text>
</g>
<g>
<title>java/net/SocketOutputStream.socketWrite (2 samples, 0.17%)</title><rect x="677.2" y="931.0" width="2.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="680.2" y="942.0"></text>
</g>
<g>
<title>java/net/SocketOutputStream.socketWrite0 (2 samples, 0.17%)</title><rect x="677.2" y="915.0" width="2.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="680.2" y="926.0"></text>
</g>
<g>
<title>__send (2 samples, 0.17%)</title><rect x="677.2" y="899.0" width="2.1" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="680.2" y="910.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (2 samples, 0.17%)</title><rect x="677.2" y="883.0" width="2.1" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="680.2" y="894.0"></text>
</g>
<g>
<title>do_syscall_64 (2 samples, 0.17%)</title><rect x="677.2" y="867.0" width="2.1" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="680.2" y="878.0"></text>
</g>
<g>
<title>__x64_sys_sendto (2 samples, 0.17%)</title><rect x="677.2" y="851.0" width="2.1" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="680.2" y="862.0"></text>
</g>
<g>
<title>__sys_sendto (2 samples, 0.17%)</title><rect x="677.2" y="835.0" width="2.1" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="680.2" y="846.0"></text>
</g>
<g>
<title>sock_sendmsg (2 samples, 0.17%)</title><rect x="677.2" y="819.0" width="2.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="680.2" y="830.0"></text>
</g>
<g>
<title>inet6_sendmsg (2 samples, 0.17%)</title><rect x="677.2" y="803.0" width="2.1" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="680.2" y="814.0"></text>
</g>
<g>
<title>tcp_sendmsg (2 samples, 0.17%)</title><rect x="677.2" y="787.0" width="2.1" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="680.2" y="798.0"></text>
</g>
<g>
<title>tcp_sendmsg_locked (2 samples, 0.17%)</title><rect x="677.2" y="771.0" width="2.1" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="680.2" y="782.0"></text>
</g>
<g>
<title>tcp_push (2 samples, 0.17%)</title><rect x="677.2" y="755.0" width="2.1" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="680.2" y="766.0"></text>
</g>
<g>
<title>__tcp_push_pending_frames (2 samples, 0.17%)</title><rect x="677.2" y="739.0" width="2.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="680.2" y="750.0"></text>
</g>
<g>
<title>tcp_write_xmit (2 samples, 0.17%)</title><rect x="677.2" y="723.0" width="2.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="680.2" y="734.0"></text>
</g>
<g>
<title>__tcp_transmit_skb (2 samples, 0.17%)</title><rect x="677.2" y="707.0" width="2.1" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="680.2" y="718.0"></text>
</g>
<g>
<title>ip_queue_xmit (2 samples, 0.17%)</title><rect x="677.2" y="691.0" width="2.1" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="680.2" y="702.0"></text>
</g>
<g>
<title>__ip_queue_xmit (2 samples, 0.17%)</title><rect x="677.2" y="675.0" width="2.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="680.2" y="686.0"></text>
</g>
<g>
<title>ip_local_out (2 samples, 0.17%)</title><rect x="677.2" y="659.0" width="2.1" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="680.2" y="670.0"></text>
</g>
<g>
<title>ip_output (2 samples, 0.17%)</title><rect x="677.2" y="643.0" width="2.1" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="680.2" y="654.0"></text>
</g>
<g>
<title>ip_finish_output (2 samples, 0.17%)</title><rect x="677.2" y="627.0" width="2.1" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="680.2" y="638.0"></text>
</g>
<g>
<title>__ip_finish_output (1 samples, 0.09%)</title><rect x="678.3" y="611.0" width="1.0" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="681.3" y="622.0"></text>
</g>
<g>
<title>ip_finish_output2 (1 samples, 0.09%)</title><rect x="678.3" y="595.0" width="1.0" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="681.3" y="606.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (1 samples, 0.09%)</title><rect x="678.3" y="579.0" width="1.0" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="681.3" y="590.0"></text>
</g>
<g>
<title>do_softirq.part.0 (1 samples, 0.09%)</title><rect x="678.3" y="563.0" width="1.0" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="681.3" y="574.0"></text>
</g>
<g>
<title>do_softirq_own_stack (1 samples, 0.09%)</title><rect x="678.3" y="547.0" width="1.0" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="681.3" y="558.0"></text>
</g>
<g>
<title>__softirqentry_text_start (1 samples, 0.09%)</title><rect x="678.3" y="531.0" width="1.0" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="681.3" y="542.0"></text>
</g>
<g>
<title>net_rx_action (1 samples, 0.09%)</title><rect x="678.3" y="515.0" width="1.0" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="681.3" y="526.0"></text>
</g>
<g>
<title>process_backlog (1 samples, 0.09%)</title><rect x="678.3" y="499.0" width="1.0" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="681.3" y="510.0"></text>
</g>
<g>
<title>__netif_receive_skb (1 samples, 0.09%)</title><rect x="678.3" y="483.0" width="1.0" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="681.3" y="494.0"></text>
</g>
<g>
<title>__netif_receive_skb_one_core (1 samples, 0.09%)</title><rect x="678.3" y="467.0" width="1.0" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="681.3" y="478.0"></text>
</g>
<g>
<title>ip_rcv (1 samples, 0.09%)</title><rect x="678.3" y="451.0" width="1.0" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="681.3" y="462.0"></text>
</g>
<g>
<title>ip_rcv_finish (1 samples, 0.09%)</title><rect x="678.3" y="435.0" width="1.0" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="681.3" y="446.0"></text>
</g>
<g>
<title>ip_local_deliver (1 samples, 0.09%)</title><rect x="678.3" y="419.0" width="1.0" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="681.3" y="430.0"></text>
</g>
<g>
<title>ip_local_deliver_finish (1 samples, 0.09%)</title><rect x="678.3" y="403.0" width="1.0" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="681.3" y="414.0"></text>
</g>
<g>
<title>ip_protocol_deliver_rcu (1 samples, 0.09%)</title><rect x="678.3" y="387.0" width="1.0" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="681.3" y="398.0"></text>
</g>
<g>
<title>tcp_v4_rcv (1 samples, 0.09%)</title><rect x="678.3" y="371.0" width="1.0" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="681.3" y="382.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (1 samples, 0.09%)</title><rect x="678.3" y="355.0" width="1.0" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="681.3" y="366.0"></text>
</g>
<g>
<title>tcp_rcv_established (1 samples, 0.09%)</title><rect x="678.3" y="339.0" width="1.0" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="681.3" y="350.0"></text>
</g>
<g>
<title>tcp_ack (1 samples, 0.09%)</title><rect x="678.3" y="323.0" width="1.0" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="681.3" y="334.0"></text>
</g>
<g>
<title>tcp_ack_update_rtt.isra.0 (1 samples, 0.09%)</title><rect x="678.3" y="307.0" width="1.0" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="681.3" y="318.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (292 samples, 25.48%)</title><rect x="679.3" y="1139.0" width="300.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="682.3" y="1150.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.09%)</title><rect x="681.3" y="1123.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="684.3" y="1134.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.hasNext (1 samples, 0.09%)</title><rect x="682.4" y="1123.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="685.4" y="1134.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (59 samples, 5.15%)</title><rect x="683.4" y="1123.0" width="60.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="686.4" y="1134.0">one/ni..</text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.&lt;init&gt; (1 samples, 0.09%)</title><rect x="684.4" y="1107.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="687.4" y="1118.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.access$100 (1 samples, 0.09%)</title><rect x="684.4" y="1091.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="687.4" y="1102.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (57 samples, 4.97%)</title><rect x="685.5" y="1107.0" width="58.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="688.5" y="1118.0">one/ni..</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (2 samples, 0.17%)</title><rect x="688.6" y="1091.0" width="2.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="691.6" y="1102.0"></text>
</g>
<g>
<title>clock_gettime (2 samples, 0.17%)</title><rect x="690.6" y="1091.0" width="2.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="693.6" y="1102.0"></text>
</g>
<g>
<title>epoll_wait (50 samples, 4.36%)</title><rect x="692.7" y="1091.0" width="51.5" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="695.7" y="1102.0">epoll..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (40 samples, 3.49%)</title><rect x="703.0" y="1075.0" width="41.2" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="706.0" y="1086.0">ent..</text>
</g>
<g>
<title>do_syscall_64 (40 samples, 3.49%)</title><rect x="703.0" y="1059.0" width="41.2" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="706.0" y="1070.0">do_..</text>
</g>
<g>
<title>__x64_sys_epoll_wait (35 samples, 3.05%)</title><rect x="708.1" y="1043.0" width="36.1" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="711.1" y="1054.0">__x..</text>
</g>
<g>
<title>do_epoll_wait (35 samples, 3.05%)</title><rect x="708.1" y="1027.0" width="36.1" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="711.1" y="1038.0">do_..</text>
</g>
<g>
<title>__fdget (2 samples, 0.17%)</title><rect x="709.1" y="1011.0" width="2.1" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="712.1" y="1022.0"></text>
</g>
<g>
<title>__fget_light (2 samples, 0.17%)</title><rect x="709.1" y="995.0" width="2.1" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="712.1" y="1006.0"></text>
</g>
<g>
<title>__fget (2 samples, 0.17%)</title><rect x="709.1" y="979.0" width="2.1" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="712.1" y="990.0"></text>
</g>
<g>
<title>ep_poll (32 samples, 2.79%)</title><rect x="711.2" y="1011.0" width="33.0" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="714.2" y="1022.0">ep..</text>
</g>
<g>
<title>ep_scan_ready_list.constprop.0 (24 samples, 2.09%)</title><rect x="714.3" y="995.0" width="24.7" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="717.3" y="1006.0">e..</text>
</g>
<g>
<title>ep_send_events_proc (18 samples, 1.57%)</title><rect x="717.4" y="979.0" width="18.5" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="720.4" y="990.0"></text>
</g>
<g>
<title>ep_item_poll.isra.0 (14 samples, 1.22%)</title><rect x="720.5" y="963.0" width="14.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="723.5" y="974.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_rax (1 samples, 0.09%)</title><rect x="726.6" y="947.0" width="1.1" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="729.6" y="958.0"></text>
</g>
<g>
<title>sock_poll (6 samples, 0.52%)</title><rect x="727.7" y="947.0" width="6.2" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="730.7" y="958.0"></text>
</g>
<g>
<title>tcp_poll (2 samples, 0.17%)</title><rect x="730.8" y="931.0" width="2.0" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="733.8" y="942.0"></text>
</g>
<g>
<title>tcp_stream_memory_free (1 samples, 0.09%)</title><rect x="732.8" y="931.0" width="1.1" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="735.8" y="942.0"></text>
</g>
<g>
<title>tcp_poll (1 samples, 0.09%)</title><rect x="733.9" y="947.0" width="1.0" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="736.9" y="958.0"></text>
</g>
<g>
<title>sock_poll (1 samples, 0.09%)</title><rect x="734.9" y="963.0" width="1.0" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="737.9" y="974.0"></text>
</g>
<g>
<title>mutex_lock (3 samples, 0.26%)</title><rect x="735.9" y="979.0" width="3.1" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="738.9" y="990.0"></text>
</g>
<g>
<title>mutex_lock (2 samples, 0.17%)</title><rect x="739.0" y="995.0" width="2.1" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="742.0" y="1006.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range (3 samples, 0.26%)</title><rect x="741.1" y="995.0" width="3.1" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="744.1" y="1006.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range_clock (3 samples, 0.26%)</title><rect x="741.1" y="979.0" width="3.1" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="744.1" y="990.0"></text>
</g>
<g>
<title>schedule (3 samples, 0.26%)</title><rect x="741.1" y="963.0" width="3.1" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="744.1" y="974.0"></text>
</g>
<g>
<title>__schedule (2 samples, 0.17%)</title><rect x="742.1" y="947.0" width="2.1" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="745.1" y="958.0"></text>
</g>
<g>
<title>finish_task_switch (1 samples, 0.09%)</title><rect x="743.1" y="931.0" width="1.1" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="746.1" y="942.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (229 samples, 19.98%)</title><rect x="744.2" y="1123.0" width="235.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="747.2" y="1134.0">one/nio/net/Session.process</text>
</g>
<g>
<title>[unknown] (1 samples, 0.09%)</title><rect x="745.2" y="1107.0" width="1.0" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="748.2" y="1118.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.09%)</title><rect x="745.2" y="1091.0" width="1.0" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="748.2" y="1102.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.09%)</title><rect x="745.2" y="1075.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="748.2" y="1086.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (226 samples, 19.72%)</title><rect x="746.2" y="1107.0" width="232.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="749.2" y="1118.0">one/nio/http/HttpSession.proces..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (159 samples, 13.87%)</title><rect x="747.2" y="1091.0" width="163.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="750.2" y="1102.0">one/nio/http/HttpSess..</text>
</g>
<g>
<title>RequestHandler1_put.handleRequest (1 samples, 0.09%)</title><rect x="751.4" y="1075.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="754.4" y="1086.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.09%)</title><rect x="752.4" y="1075.0" width="1.0" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="755.4" y="1086.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.26%)</title><rect x="753.4" y="1075.0" width="3.1" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="756.4" y="1086.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (121 samples, 10.56%)</title><rect x="756.5" y="1075.0" width="124.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="759.5" y="1086.0">one/nio/http/Ht..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (121 samples, 10.56%)</title><rect x="756.5" y="1059.0" width="124.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="759.5" y="1070.0">one/nio/http/Ht..</text>
</g>
<g>
<title>RequestHandler1_put.handleRequest (106 samples, 9.25%)</title><rect x="758.6" y="1043.0" width="109.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="761.6" y="1054.0">RequestHandle..</text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (12 samples, 1.05%)</title><rect x="758.6" y="1027.0" width="12.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="761.6" y="1038.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (12 samples, 1.05%)</title><rect x="758.6" y="1011.0" width="12.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="761.6" y="1022.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.09%)</title><rect x="758.6" y="995.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="761.6" y="1006.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (1 samples, 0.09%)</title><rect x="758.6" y="979.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="761.6" y="990.0"></text>
</g>
<g>
<title>java/lang/String.substring (2 samples, 0.17%)</title><rect x="759.6" y="995.0" width="2.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="762.6" y="1006.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (2 samples, 0.17%)</title><rect x="759.6" y="979.0" width="2.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="762.6" y="990.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (1 samples, 0.09%)</title><rect x="760.6" y="963.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="763.6" y="974.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="761.7" y="995.0" width="1.0" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="764.7" y="1006.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (8 samples, 0.70%)</title><rect x="762.7" y="995.0" width="8.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="765.7" y="1006.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.26%)</title><rect x="767.8" y="979.0" width="3.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="770.8" y="990.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.26%)</title><rect x="767.8" y="963.0" width="3.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="770.8" y="974.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (3 samples, 0.26%)</title><rect x="767.8" y="947.0" width="3.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="770.8" y="958.0"></text>
</g>
<g>
<title>ru/mail/polis/service/valaubr/HttpService.put (94 samples, 8.20%)</title><rect x="770.9" y="1027.0" width="96.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="773.9" y="1038.0">ru/mail/pol..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (94 samples, 8.20%)</title><rect x="770.9" y="1011.0" width="96.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="773.9" y="1022.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (91 samples, 7.94%)</title><rect x="773.0" y="995.0" width="93.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="776.0" y="1006.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.enqueue (6 samples, 0.52%)</title><rect x="774.0" y="979.0" width="6.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="777.0" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (4 samples, 0.35%)</title><rect x="776.1" y="963.0" width="4.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="779.1" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (4 samples, 0.35%)</title><rect x="776.1" y="947.0" width="4.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="779.1" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (4 samples, 0.35%)</title><rect x="776.1" y="931.0" width="4.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="779.1" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (1 samples, 0.09%)</title><rect x="779.2" y="915.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="782.2" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetTail (1 samples, 0.09%)</title><rect x="779.2" y="899.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="782.2" y="910.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (1 samples, 0.09%)</title><rect x="779.2" y="883.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="782.2" y="894.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.compareAndSet (1 samples, 0.09%)</title><rect x="779.2" y="867.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="782.2" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.09%)</title><rect x="780.2" y="979.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="783.2" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.09%)</title><rect x="780.2" y="963.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="783.2" y="974.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (1 samples, 0.09%)</title><rect x="780.2" y="947.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="783.2" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (83 samples, 7.24%)</title><rect x="781.2" y="979.0" width="85.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="784.2" y="990.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (83 samples, 7.24%)</title><rect x="781.2" y="963.0" width="85.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="784.2" y="974.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (83 samples, 7.24%)</title><rect x="781.2" y="947.0" width="85.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="784.2" y="958.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.enqueue (1 samples, 0.09%)</title><rect x="781.2" y="931.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="784.2" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (82 samples, 7.16%)</title><rect x="782.3" y="931.0" width="84.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="785.3" y="942.0">java/util/..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (82 samples, 7.16%)</title><rect x="782.3" y="915.0" width="84.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="785.3" y="926.0">jdk/intern..</text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (2 samples, 0.17%)</title><rect x="784.3" y="899.0" width="2.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="787.3" y="910.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (3 samples, 0.26%)</title><rect x="786.4" y="899.0" width="3.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="789.4" y="910.0"></text>
</g>
<g>
<title>ThreadsListHandle::~ThreadsListHandle() (1 samples, 0.09%)</title><rect x="789.5" y="899.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="792.5" y="910.0"></text>
</g>
<g>
<title>Unsafe_Unpark (14 samples, 1.22%)</title><rect x="790.5" y="899.0" width="14.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="793.5" y="910.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/ld-2.31.so (1 samples, 0.09%)</title><rect x="790.5" y="883.0" width="1.0" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="793.5" y="894.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.235] (2 samples, 0.17%)</title><rect x="791.5" y="883.0" width="2.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="794.5" y="894.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (4 samples, 0.35%)</title><rect x="793.6" y="883.0" width="4.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="796.6" y="894.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.09%)</title><rect x="796.7" y="867.0" width="1.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="799.7" y="878.0"></text>
</g>
<g>
<title>java_lang_Thread::thread(oopDesc*) (1 samples, 0.09%)</title><rect x="797.7" y="883.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="800.7" y="894.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (1 samples, 0.09%)</title><rect x="798.7" y="883.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="801.7" y="894.0"></text>
</g>
<g>
<title>pthread_mutex_lock (4 samples, 0.35%)</title><rect x="799.8" y="883.0" width="4.1" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="802.8" y="894.0"></text>
</g>
<g>
<title>pthread_mutex_lock@plt (1 samples, 0.09%)</title><rect x="803.9" y="883.0" width="1.0" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="806.9" y="894.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.17%)</title><rect x="804.9" y="899.0" width="2.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="807.9" y="910.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/ld-2.31.so (2 samples, 0.17%)</title><rect x="804.9" y="883.0" width="2.1" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="807.9" y="894.0"></text>
</g>
<g>
<title>__pthread_cond_signal (56 samples, 4.89%)</title><rect x="807.0" y="899.0" width="57.6" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="810.0" y="910.0">__pthr..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (48 samples, 4.19%)</title><rect x="815.2" y="883.0" width="49.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="818.2" y="894.0">entry..</text>
</g>
<g>
<title>do_syscall_64 (48 samples, 4.19%)</title><rect x="815.2" y="867.0" width="49.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="818.2" y="878.0">do_sy..</text>
</g>
<g>
<title>__x64_sys_futex (43 samples, 3.75%)</title><rect x="819.3" y="851.0" width="44.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="822.3" y="862.0">__x6..</text>
</g>
<g>
<title>do_futex (42 samples, 3.66%)</title><rect x="820.3" y="835.0" width="43.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="823.3" y="846.0">do_f..</text>
</g>
<g>
<title>futex_wake (42 samples, 3.66%)</title><rect x="820.3" y="819.0" width="43.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="823.3" y="830.0">fute..</text>
</g>
<g>
<title>get_futex_key (2 samples, 0.17%)</title><rect x="821.4" y="803.0" width="2.0" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="824.4" y="814.0"></text>
</g>
<g>
<title>get_futex_key_refs.isra.0 (1 samples, 0.09%)</title><rect x="822.4" y="787.0" width="1.0" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="825.4" y="798.0"></text>
</g>
<g>
<title>mark_wake_futex (2 samples, 0.17%)</title><rect x="823.4" y="803.0" width="2.1" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="826.4" y="814.0"></text>
</g>
<g>
<title>__unqueue_futex (1 samples, 0.09%)</title><rect x="824.5" y="787.0" width="1.0" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="827.5" y="798.0"></text>
</g>
<g>
<title>wake_up_q (37 samples, 3.23%)</title><rect x="825.5" y="803.0" width="38.1" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="828.5" y="814.0">wak..</text>
</g>
<g>
<title>try_to_wake_up (37 samples, 3.23%)</title><rect x="825.5" y="787.0" width="38.1" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="828.5" y="798.0">try..</text>
</g>
<g>
<title>__lock_text_start (37 samples, 3.23%)</title><rect x="825.5" y="771.0" width="38.1" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="828.5" y="782.0">__l..</text>
</g>
<g>
<title>do_futex (1 samples, 0.09%)</title><rect x="863.6" y="851.0" width="1.0" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="866.6" y="862.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.09%)</title><rect x="864.6" y="899.0" width="1.1" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="867.6" y="910.0"></text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (1 samples, 0.09%)</title><rect x="865.7" y="899.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="868.7" y="910.0"></text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (1 samples, 0.09%)</title><rect x="866.7" y="995.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="869.7" y="1006.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.findHandlerByHost (4 samples, 0.35%)</title><rect x="867.7" y="1043.0" width="4.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="870.7" y="1054.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (4 samples, 0.35%)</title><rect x="871.8" y="1043.0" width="4.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="874.8" y="1054.0"></text>
</g>
<g>
<title>java/util/HashMap.get (4 samples, 0.35%)</title><rect x="871.8" y="1027.0" width="4.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="874.8" y="1038.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.26%)</title><rect x="871.8" y="1011.0" width="3.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="874.8" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.09%)</title><rect x="874.9" y="1011.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="877.9" y="1022.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.09%)</title><rect x="874.9" y="995.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="877.9" y="1006.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (1 samples, 0.09%)</title><rect x="874.9" y="979.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="877.9" y="990.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (5 samples, 0.44%)</title><rect x="876.0" y="1043.0" width="5.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="879.0" y="1054.0"></text>
</g>
<g>
<title>java/lang/String.substring (4 samples, 0.35%)</title><rect x="876.0" y="1027.0" width="4.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="879.0" y="1038.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (4 samples, 0.35%)</title><rect x="876.0" y="1011.0" width="4.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="879.0" y="1022.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.09%)</title><rect x="879.0" y="995.0" width="1.1" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="882.0" y="1006.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (1 samples, 0.09%)</title><rect x="880.1" y="1027.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="883.1" y="1038.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (8 samples, 0.70%)</title><rect x="881.1" y="1075.0" width="8.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="884.1" y="1086.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (1 samples, 0.09%)</title><rect x="881.1" y="1059.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="884.1" y="1070.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.09%)</title><rect x="881.1" y="1043.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="884.1" y="1054.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.09%)</title><rect x="881.1" y="1027.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="884.1" y="1038.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (1 samples, 0.09%)</title><rect x="881.1" y="1011.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="884.1" y="1022.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (5 samples, 0.44%)</title><rect x="882.1" y="1059.0" width="5.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="885.1" y="1070.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (4 samples, 0.35%)</title><rect x="883.2" y="1043.0" width="4.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="886.2" y="1054.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (2 samples, 0.17%)</title><rect x="887.3" y="1059.0" width="2.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="890.3" y="1070.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (5 samples, 0.44%)</title><rect x="889.3" y="1075.0" width="5.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="892.3" y="1086.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (5 samples, 0.44%)</title><rect x="889.3" y="1059.0" width="5.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="892.3" y="1070.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (5 samples, 0.44%)</title><rect x="889.3" y="1043.0" width="5.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="892.3" y="1054.0"></text>
</g>
<g>
<title>java/lang/Character.digit (5 samples, 0.44%)</title><rect x="889.3" y="1027.0" width="5.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="892.3" y="1038.0"></text>
</g>
<g>
<title>java/lang/Character.digit (5 samples, 0.44%)</title><rect x="889.3" y="1011.0" width="5.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="892.3" y="1022.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (3 samples, 0.26%)</title><rect x="891.4" y="995.0" width="3.1" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="894.4" y="1006.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (7 samples, 0.61%)</title><rect x="894.5" y="1075.0" width="7.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="897.5" y="1086.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (6 samples, 0.52%)</title><rect x="894.5" y="1059.0" width="6.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="897.5" y="1070.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (6 samples, 0.52%)</title><rect x="894.5" y="1043.0" width="6.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="897.5" y="1054.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.09%)</title><rect x="900.7" y="1059.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="903.7" y="1070.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (9 samples, 0.79%)</title><rect x="901.7" y="1075.0" width="9.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="904.7" y="1086.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (4 samples, 0.35%)</title><rect x="906.8" y="1059.0" width="4.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="909.8" y="1070.0"></text>
</g>
<g>
<title>page_fault (1 samples, 0.09%)</title><rect x="909.9" y="1043.0" width="1.1" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="912.9" y="1054.0"></text>
</g>
<g>
<title>do_page_fault (1 samples, 0.09%)</title><rect x="909.9" y="1027.0" width="1.1" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="912.9" y="1038.0"></text>
</g>
<g>
<title>__do_page_fault (1 samples, 0.09%)</title><rect x="909.9" y="1011.0" width="1.1" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="912.9" y="1022.0"></text>
</g>
<g>
<title>do_user_addr_fault (1 samples, 0.09%)</title><rect x="909.9" y="995.0" width="1.1" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="912.9" y="1006.0"></text>
</g>
<g>
<title>handle_mm_fault (1 samples, 0.09%)</title><rect x="909.9" y="979.0" width="1.1" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="912.9" y="990.0"></text>
</g>
<g>
<title>__handle_mm_fault (1 samples, 0.09%)</title><rect x="909.9" y="963.0" width="1.1" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="912.9" y="974.0"></text>
</g>
<g>
<title>do_anonymous_page (1 samples, 0.09%)</title><rect x="909.9" y="947.0" width="1.1" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="912.9" y="958.0"></text>
</g>
<g>
<title>alloc_pages_vma (1 samples, 0.09%)</title><rect x="909.9" y="931.0" width="1.1" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="912.9" y="942.0"></text>
</g>
<g>
<title>__alloc_pages_nodemask (1 samples, 0.09%)</title><rect x="909.9" y="915.0" width="1.1" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="912.9" y="926.0"></text>
</g>
<g>
<title>get_page_from_freelist (1 samples, 0.09%)</title><rect x="909.9" y="899.0" width="1.1" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="912.9" y="910.0"></text>
</g>
<g>
<title>clear_page_erms (1 samples, 0.09%)</title><rect x="909.9" y="883.0" width="1.1" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="912.9" y="894.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (66 samples, 5.76%)</title><rect x="911.0" y="1091.0" width="67.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="914.0" y="1102.0">one/nio..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (65 samples, 5.67%)</title><rect x="911.0" y="1075.0" width="66.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="914.0" y="1086.0">one/nio..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (14 samples, 1.22%)</title><rect x="915.1" y="1059.0" width="14.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="918.1" y="1070.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.09%)</title><rect x="917.1" y="1043.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="920.1" y="1054.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.09%)</title><rect x="918.2" y="1043.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="921.2" y="1054.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (9 samples, 0.79%)</title><rect x="919.2" y="1043.0" width="9.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="922.2" y="1054.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (2 samples, 0.17%)</title><rect x="921.3" y="1027.0" width="2.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="924.3" y="1038.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.09%)</title><rect x="923.3" y="1027.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="926.3" y="1038.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (4 samples, 0.35%)</title><rect x="924.3" y="1027.0" width="4.2" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="927.3" y="1038.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (3 samples, 0.26%)</title><rect x="925.4" y="1011.0" width="3.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="928.4" y="1022.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (1 samples, 0.09%)</title><rect x="928.5" y="1043.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="931.5" y="1054.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.09%)</title><rect x="929.5" y="1059.0" width="1.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="932.5" y="1070.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (2 samples, 0.17%)</title><rect x="930.5" y="1059.0" width="2.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="933.5" y="1070.0"></text>
</g>
<g>
<title>recv (44 samples, 3.84%)</title><rect x="932.6" y="1059.0" width="45.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="935.6" y="1070.0">recv</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (35 samples, 3.05%)</title><rect x="941.8" y="1043.0" width="36.1" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="944.8" y="1054.0">ent..</text>
</g>
<g>
<title>__x64_sys_recvfrom (1 samples, 0.09%)</title><rect x="941.8" y="1027.0" width="1.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="944.8" y="1038.0"></text>
</g>
<g>
<title>do_syscall_64 (34 samples, 2.97%)</title><rect x="942.9" y="1027.0" width="35.0" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="945.9" y="1038.0">do_..</text>
</g>
<g>
<title>__x64_sys_recvfrom (31 samples, 2.71%)</title><rect x="946.0" y="1011.0" width="31.9" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="949.0" y="1022.0">__..</text>
</g>
<g>
<title>__sys_recvfrom (29 samples, 2.53%)</title><rect x="946.0" y="995.0" width="29.8" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="949.0" y="1006.0">__..</text>
</g>
<g>
<title>__fdget (1 samples, 0.09%)</title><rect x="947.0" y="979.0" width="1.0" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="950.0" y="990.0"></text>
</g>
<g>
<title>sock_recvmsg (24 samples, 2.09%)</title><rect x="948.0" y="979.0" width="24.7" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="951.0" y="990.0">s..</text>
</g>
<g>
<title>inet6_recvmsg (19 samples, 1.66%)</title><rect x="948.0" y="963.0" width="19.6" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="951.0" y="974.0"></text>
</g>
<g>
<title>tcp_recvmsg (19 samples, 1.66%)</title><rect x="948.0" y="947.0" width="19.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="951.0" y="958.0"></text>
</g>
<g>
<title>__kfree_skb (3 samples, 0.26%)</title><rect x="952.1" y="931.0" width="3.1" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="955.1" y="942.0"></text>
</g>
<g>
<title>skb_release_all (2 samples, 0.17%)</title><rect x="952.1" y="915.0" width="2.1" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="955.1" y="926.0"></text>
</g>
<g>
<title>skb_release_data (1 samples, 0.09%)</title><rect x="952.1" y="899.0" width="1.1" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="955.1" y="910.0"></text>
</g>
<g>
<title>sock_rfree (1 samples, 0.09%)</title><rect x="953.2" y="899.0" width="1.0" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="956.2" y="910.0"></text>
</g>
<g>
<title>skb_release_head_state (1 samples, 0.09%)</title><rect x="954.2" y="915.0" width="1.0" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="957.2" y="926.0"></text>
</g>
<g>
<title>skb_copy_datagram_iter (7 samples, 0.61%)</title><rect x="955.2" y="931.0" width="7.2" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="958.2" y="942.0"></text>
</g>
<g>
<title>__skb_datagram_iter (5 samples, 0.44%)</title><rect x="956.3" y="915.0" width="5.1" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="959.3" y="926.0"></text>
</g>
<g>
<title>__check_object_size (1 samples, 0.09%)</title><rect x="958.3" y="899.0" width="1.1" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="961.3" y="910.0"></text>
</g>
<g>
<title>simple_copy_to_iter (2 samples, 0.17%)</title><rect x="959.4" y="899.0" width="2.0" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="962.4" y="910.0"></text>
</g>
<g>
<title>_copy_to_iter (2 samples, 0.17%)</title><rect x="959.4" y="883.0" width="2.0" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="962.4" y="894.0"></text>
</g>
<g>
<title>copy_user_enhanced_fast_string (1 samples, 0.09%)</title><rect x="960.4" y="867.0" width="1.0" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="963.4" y="878.0"></text>
</g>
<g>
<title>simple_copy_to_iter (1 samples, 0.09%)</title><rect x="961.4" y="915.0" width="1.0" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="964.4" y="926.0"></text>
</g>
<g>
<title>tcp_cleanup_rbuf (3 samples, 0.26%)</title><rect x="962.4" y="931.0" width="3.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="965.4" y="942.0"></text>
</g>
<g>
<title>tcp_rcv_space_adjust (1 samples, 0.09%)</title><rect x="965.5" y="931.0" width="1.1" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="968.5" y="942.0"></text>
</g>
<g>
<title>ktime_get (1 samples, 0.09%)</title><rect x="965.5" y="915.0" width="1.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="968.5" y="926.0"></text>
</g>
<g>
<title>tcp_release_cb (1 samples, 0.09%)</title><rect x="966.6" y="931.0" width="1.0" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="969.6" y="942.0"></text>
</g>
<g>
<title>security_socket_recvmsg (5 samples, 0.44%)</title><rect x="967.6" y="963.0" width="5.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="970.6" y="974.0"></text>
</g>
<g>
<title>apparmor_socket_recvmsg (4 samples, 0.35%)</title><rect x="968.6" y="947.0" width="4.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="971.6" y="958.0"></text>
</g>
<g>
<title>_cond_resched (1 samples, 0.09%)</title><rect x="968.6" y="931.0" width="1.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="971.6" y="942.0"></text>
</g>
<g>
<title>aa_sk_perm (3 samples, 0.26%)</title><rect x="969.7" y="931.0" width="3.0" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="972.7" y="942.0"></text>
</g>
<g>
<title>sockfd_lookup_light (3 samples, 0.26%)</title><rect x="972.7" y="979.0" width="3.1" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="975.7" y="990.0"></text>
</g>
<g>
<title>__fdget (2 samples, 0.17%)</title><rect x="972.7" y="963.0" width="2.1" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="975.7" y="974.0"></text>
</g>
<g>
<title>__fget_light (2 samples, 0.17%)</title><rect x="972.7" y="947.0" width="2.1" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="975.7" y="958.0"></text>
</g>
<g>
<title>__fget (2 samples, 0.17%)</title><rect x="972.7" y="931.0" width="2.1" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="975.7" y="942.0"></text>
</g>
<g>
<title>__fget_light (1 samples, 0.09%)</title><rect x="974.8" y="963.0" width="1.0" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="977.8" y="974.0"></text>
</g>
<g>
<title>import_single_range (1 samples, 0.09%)</title><rect x="975.8" y="995.0" width="1.1" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="978.8" y="1006.0"></text>
</g>
<g>
<title>sockfd_lookup_light (1 samples, 0.09%)</title><rect x="976.9" y="995.0" width="1.0" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="979.9" y="1006.0"></text>
</g>
<g>
<title>one/nio/net/Session.listen (1 samples, 0.09%)</title><rect x="977.9" y="1075.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="980.9" y="1086.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.09%)</title><rect x="978.9" y="1107.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="981.9" y="1118.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.09%)</title><rect x="978.9" y="1091.0" width="1.0" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="981.9" y="1102.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="978.9" y="1075.0" width="1.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="981.9" y="1086.0"></text>
</g>
<g>
<title>start_thread (204 samples, 17.80%)</title><rect x="979.9" y="1139.0" width="210.1" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="982.9" y="1150.0">start_thread</text>
</g>
<g>
<title>thread_native_entry(Thread*) (204 samples, 17.80%)</title><rect x="979.9" y="1123.0" width="210.1" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="982.9" y="1134.0">thread_native_entry(Thread*)</text>
</g>
<g>
<title>Thread::call_run() (204 samples, 17.80%)</title><rect x="979.9" y="1107.0" width="210.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="982.9" y="1118.0">Thread::call_run()</text>
</g>
<g>
<title>ConcurrentGCThread::run() (2 samples, 0.17%)</title><rect x="979.9" y="1091.0" width="2.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="982.9" y="1102.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::run_service() (2 samples, 0.17%)</title><rect x="979.9" y="1075.0" width="2.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="982.9" y="1086.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate(HeapRegionClosure*) const (2 samples, 0.17%)</title><rect x="979.9" y="1059.0" width="2.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="982.9" y="1070.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingClosure::do_heap_region(HeapRegion*) (2 samples, 0.17%)</title><rect x="979.9" y="1043.0" width="2.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="982.9" y="1054.0"></text>
</g>
<g>
<title>G1CollectionSet::update_young_region_prediction(HeapRegion*, unsigned long) (1 samples, 0.09%)</title><rect x="979.9" y="1027.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="982.9" y="1038.0"></text>
</g>
<g>
<title>G1Policy::predict_region_elapsed_time_ms(HeapRegion*, bool) const (1 samples, 0.09%)</title><rect x="979.9" y="1011.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="982.9" y="1022.0"></text>
</g>
<g>
<title>G1Policy::predict_yg_surv_rate(int, SurvRateGroup*) const (1 samples, 0.09%)</title><rect x="979.9" y="995.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="982.9" y="1006.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.09%)</title><rect x="981.0" y="1027.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="984.0" y="1038.0"></text>
</g>
<g>
<title>GangWorker::loop() (16 samples, 1.40%)</title><rect x="982.0" y="1091.0" width="16.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="985.0" y="1102.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (16 samples, 1.40%)</title><rect x="982.0" y="1075.0" width="16.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="985.0" y="1086.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (9 samples, 0.79%)</title><rect x="982.0" y="1059.0" width="9.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="985.0" y="1070.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (8 samples, 0.70%)</title><rect x="982.0" y="1043.0" width="8.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="985.0" y="1054.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (3 samples, 0.26%)</title><rect x="987.2" y="1027.0" width="3.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="990.2" y="1038.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.09%)</title><rect x="990.2" y="1043.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="993.2" y="1054.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (3 samples, 0.26%)</title><rect x="991.3" y="1059.0" width="3.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="994.3" y="1070.0"></text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (3 samples, 0.26%)</title><rect x="991.3" y="1043.0" width="3.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="994.3" y="1054.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (3 samples, 0.26%)</title><rect x="991.3" y="1027.0" width="3.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="994.3" y="1038.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_during_gc(CardTableEntryClosure*, unsigned int) (3 samples, 0.26%)</title><rect x="991.3" y="1011.0" width="3.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="994.3" y="1022.0"></text>
</g>
<g>
<title>G1RefineCardClosure::do_card_ptr(signed char*, unsigned int) (3 samples, 0.26%)</title><rect x="991.3" y="995.0" width="3.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="994.3" y="1006.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_partially() (3 samples, 0.26%)</title><rect x="991.3" y="979.0" width="3.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="994.3" y="990.0"></text>
</g>
<g>
<title>G1RemSet::scan_rem_set(G1ParScanThreadState*, unsigned int) (3 samples, 0.26%)</title><rect x="994.4" y="1059.0" width="3.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="997.4" y="1070.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate_from(HeapRegionClosure*, unsigned int, unsigned int) const (3 samples, 0.26%)</title><rect x="994.4" y="1043.0" width="3.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="997.4" y="1054.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::do_heap_region(HeapRegion*) (3 samples, 0.26%)</title><rect x="994.4" y="1027.0" width="3.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="997.4" y="1038.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::scan_rem_set_roots(HeapRegion*) (3 samples, 0.26%)</title><rect x="994.4" y="1011.0" width="3.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="997.4" y="1022.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_partially() (1 samples, 0.09%)</title><rect x="994.4" y="995.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="997.4" y="1006.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (1 samples, 0.09%)</title><rect x="994.4" y="979.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="997.4" y="990.0"></text>
</g>
<g>
<title>bool HeapRegion::oops_on_card_seq_iterate_careful&lt;true, G1ScanObjsDuringScanRSClosure&gt;(MemRegion, G1ScanObjsDuringScanRSClosure*) (2 samples, 0.17%)</title><rect x="995.4" y="995.0" width="2.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="998.4" y="1006.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1ScanObjsDuringScanRSClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1ScanObjsDuringScanRSClosure*, oopDesc*, Klass*) (1 samples, 0.09%)</title><rect x="996.4" y="979.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="999.4" y="990.0"></text>
</g>
<g>
<title>void G1ScanObjsDuringScanRSClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) (1 samples, 0.09%)</title><rect x="996.4" y="963.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="999.4" y="974.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int) (1 samples, 0.09%)</title><rect x="997.5" y="1059.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1000.5" y="1070.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.09%)</title><rect x="997.5" y="1043.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1000.5" y="1054.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(bool, OopClosure*, CodeBlobClosure*) (1 samples, 0.09%)</title><rect x="997.5" y="1027.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1000.5" y="1038.0"></text>
</g>
<g>
<title>JavaThread::run() (182 samples, 15.88%)</title><rect x="998.5" y="1091.0" width="187.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1001.5" y="1102.0">JavaThread::run()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (179 samples, 15.62%)</title><rect x="998.5" y="1075.0" width="184.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1001.5" y="1086.0">CompileBroker::compiler_..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (179 samples, 15.62%)</title><rect x="998.5" y="1059.0" width="184.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1001.5" y="1070.0">CompileBroker::invoke_co..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (162 samples, 14.14%)</title><rect x="998.5" y="1043.0" width="166.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1001.5" y="1054.0">C2Compiler::compile_m..</text>
</g>
<g>
<title>BarrierSetC2::create_barrier_state(Arena*) const (1 samples, 0.09%)</title><rect x="998.5" y="1027.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1001.5" y="1038.0"></text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (161 samples, 14.05%)</title><rect x="999.5" y="1027.0" width="165.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1002.5" y="1038.0">Compile::Compile(ciEn..</text>
</g>
<g>
<title>Compile::Code_Gen() (105 samples, 9.16%)</title><rect x="999.5" y="1011.0" width="108.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1002.5" y="1022.0">Compile::Code..</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.09%)</title><rect x="999.5" y="995.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1002.5" y="1006.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (1 samples, 0.09%)</title><rect x="999.5" y="979.0" width="1.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1002.5" y="990.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.09%)</title><rect x="1000.5" y="995.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1003.5" y="1006.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.09%)</title><rect x="1000.5" y="979.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1003.5" y="990.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.09%)</title><rect x="1000.5" y="963.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1003.5" y="974.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.09%)</title><rect x="1000.5" y="947.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1003.5" y="958.0"></text>
</g>
<g>
<title>Matcher::match() (6 samples, 0.52%)</title><rect x="1001.6" y="995.0" width="6.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1004.6" y="1006.0"></text>
</g>
<g>
<title>ConINode::Opcode() const (1 samples, 0.09%)</title><rect x="1001.6" y="979.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1004.6" y="990.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (5 samples, 0.44%)</title><rect x="1002.6" y="979.0" width="5.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1005.6" y="990.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.09%)</title><rect x="1004.7" y="963.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1007.7" y="974.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (2 samples, 0.17%)</title><rect x="1005.7" y="963.0" width="2.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1008.7" y="974.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node*&amp;) (2 samples, 0.17%)</title><rect x="1005.7" y="947.0" width="2.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1008.7" y="958.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node*&amp;) (1 samples, 0.09%)</title><rect x="1005.7" y="931.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1008.7" y="942.0"></text>
</g>
<g>
<title>LoadNode::bottom_type() const (1 samples, 0.09%)</title><rect x="1005.7" y="915.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1008.7" y="926.0"></text>
</g>
<g>
<title>State::DFA(int, Node const*) (1 samples, 0.09%)</title><rect x="1006.7" y="931.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1009.7" y="942.0"></text>
</g>
<g>
<title>State::_sub_Op_ConI(Node const*) (1 samples, 0.09%)</title><rect x="1006.7" y="915.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1009.7" y="926.0"></text>
</g>
<g>
<title>PhaseBlockLayout::PhaseBlockLayout(PhaseCFG&amp;) (1 samples, 0.09%)</title><rect x="1007.7" y="995.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1010.7" y="1006.0"></text>
</g>
<g>
<title>PhaseBlockLayout::reorder_traces(int) (1 samples, 0.09%)</title><rect x="1007.7" y="979.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1010.7" y="990.0"></text>
</g>
<g>
<title>Trace::fixup_blocks(PhaseCFG&amp;) (1 samples, 0.09%)</title><rect x="1007.7" y="963.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1010.7" y="974.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (10 samples, 0.87%)</title><rect x="1008.8" y="995.0" width="10.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1011.8" y="1006.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (10 samples, 0.87%)</title><rect x="1008.8" y="979.0" width="10.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1011.8" y="990.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_Stack&amp;) (4 samples, 0.35%)</title><rect x="1008.8" y="963.0" width="4.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1011.8" y="974.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (2 samples, 0.17%)</title><rect x="1008.8" y="947.0" width="2.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1011.8" y="958.0"></text>
</g>
<g>
<title>PhaseCFG::hoist_to_cheaper_block(Block*, Block*, Node*) (2 samples, 0.17%)</title><rect x="1010.8" y="947.0" width="2.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1013.8" y="958.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, long*) (1 samples, 0.09%)</title><rect x="1012.9" y="963.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1015.9" y="974.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (3 samples, 0.26%)</title><rect x="1013.9" y="963.0" width="3.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1016.9" y="974.0"></text>
</g>
<g>
<title>RegMask::Size() const (2 samples, 0.17%)</title><rect x="1015.0" y="947.0" width="2.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1018.0" y="958.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (2 samples, 0.17%)</title><rect x="1017.0" y="963.0" width="2.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1020.0" y="974.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.09%)</title><rect x="1017.0" y="947.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1020.0" y="958.0"></text>
</g>
<g>
<title>page_fault (1 samples, 0.09%)</title><rect x="1017.0" y="931.0" width="1.0" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1020.0" y="942.0"></text>
</g>
<g>
<title>do_page_fault (1 samples, 0.09%)</title><rect x="1017.0" y="915.0" width="1.0" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1020.0" y="926.0"></text>
</g>
<g>
<title>__do_page_fault (1 samples, 0.09%)</title><rect x="1017.0" y="899.0" width="1.0" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1020.0" y="910.0"></text>
</g>
<g>
<title>do_user_addr_fault (1 samples, 0.09%)</title><rect x="1017.0" y="883.0" width="1.0" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1020.0" y="894.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.09%)</title><rect x="1018.0" y="947.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1021.0" y="958.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1018.0" y="931.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1021.0" y="942.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (85 samples, 7.42%)</title><rect x="1019.1" y="995.0" width="87.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1022.1" y="1006.0">PhaseChait..</text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (2 samples, 0.17%)</title><rect x="1019.1" y="979.0" width="2.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1022.1" y="990.0"></text>
</g>
<g>
<title>GrowableArray&lt;unsigned int&gt;::raw_at_put_grow(int, unsigned int const&amp;, unsigned int const&amp;) (1 samples, 0.09%)</title><rect x="1020.1" y="963.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1023.1" y="974.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (6 samples, 0.52%)</title><rect x="1021.1" y="979.0" width="6.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1024.1" y="990.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.09%)</title><rect x="1022.2" y="963.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1025.2" y="974.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1023.2" y="963.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1026.2" y="974.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (3 samples, 0.26%)</title><rect x="1024.2" y="963.0" width="3.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1027.2" y="974.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1026.3" y="947.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1029.3" y="958.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (5 samples, 0.44%)</title><rect x="1027.3" y="979.0" width="5.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1030.3" y="990.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (4 samples, 0.35%)</title><rect x="1028.3" y="963.0" width="4.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1031.3" y="974.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.17%)</title><rect x="1030.4" y="947.0" width="2.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1033.4" y="958.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (6 samples, 0.52%)</title><rect x="1032.5" y="979.0" width="6.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1035.5" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (20 samples, 1.75%)</title><rect x="1038.6" y="979.0" width="20.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1041.6" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::add_input_to_liveout(Block*, Node*, IndexSet*, double, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (1 samples, 0.09%)</title><rect x="1040.7" y="963.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1043.7" y="974.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (1 samples, 0.09%)</title><rect x="1040.7" y="947.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1043.7" y="958.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (10 samples, 0.87%)</title><rect x="1041.7" y="963.0" width="10.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1044.7" y="974.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.09%)</title><rect x="1051.0" y="947.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1054.0" y="958.0"></text>
</g>
<g>
<title>PhaseChaitin::remove_bound_register_from_interfering_live_ranges(LRG&amp;, IndexSet*, unsigned int&amp;) (6 samples, 0.52%)</title><rect x="1052.0" y="963.0" width="6.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1055.0" y="974.0"></text>
</g>
<g>
<title>RegMask::Size() const (3 samples, 0.26%)</title><rect x="1052.0" y="947.0" width="3.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1055.0" y="958.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (3 samples, 0.26%)</title><rect x="1055.1" y="947.0" width="3.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1058.1" y="958.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (1 samples, 0.09%)</title><rect x="1058.2" y="963.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1061.2" y="974.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.09%)</title><rect x="1059.2" y="979.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1062.2" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.09%)</title><rect x="1059.2" y="963.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1062.2" y="974.0"></text>
</g>
<g>
<title>PhaseChaitin::cache_lrg_info() (1 samples, 0.09%)</title><rect x="1060.3" y="979.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1063.3" y="990.0"></text>
</g>
<g>
<title>find_hihghest_bit(unsigned int) (1 samples, 0.09%)</title><rect x="1060.3" y="963.0" width="1.0" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1063.3" y="974.0"></text>
</g>
<g>
<title>PhaseChaitin::de_ssa() (1 samples, 0.09%)</title><rect x="1061.3" y="979.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1064.3" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (6 samples, 0.52%)</title><rect x="1062.3" y="979.0" width="6.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1065.3" y="990.0"></text>
</g>
<g>
<title>RegMask::Size() const (4 samples, 0.35%)</title><rect x="1064.4" y="963.0" width="4.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1067.4" y="974.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.87] (2 samples, 0.17%)</title><rect x="1068.5" y="979.0" width="2.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1071.5" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 0.09%)</title><rect x="1070.6" y="979.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1073.6" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (18 samples, 1.57%)</title><rect x="1071.6" y="979.0" width="18.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1074.6" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (10 samples, 0.87%)</title><rect x="1079.8" y="963.0" width="10.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1082.8" y="974.0"></text>
</g>
<g>
<title>PhaseChaitin::stretch_base_pointer_live_ranges(ResourceArea*) (1 samples, 0.09%)</title><rect x="1090.1" y="979.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1093.1" y="990.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (4 samples, 0.35%)</title><rect x="1091.2" y="979.0" width="4.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1094.2" y="990.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::coalesce(Block*) (1 samples, 0.09%)</title><rect x="1091.2" y="963.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1094.2" y="974.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (3 samples, 0.26%)</title><rect x="1092.2" y="963.0" width="3.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1095.2" y="974.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (1 samples, 0.09%)</title><rect x="1093.2" y="947.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1096.2" y="958.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (1 samples, 0.09%)</title><rect x="1094.2" y="947.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1097.2" y="958.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (1 samples, 0.09%)</title><rect x="1095.3" y="979.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1098.3" y="990.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.09%)</title><rect x="1096.3" y="979.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1099.3" y="990.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (4 samples, 0.35%)</title><rect x="1097.3" y="979.0" width="4.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1100.3" y="990.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.09%)</title><rect x="1099.4" y="963.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1102.4" y="974.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1100.4" y="963.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1103.4" y="974.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.09%)</title><rect x="1101.4" y="979.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1104.4" y="990.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.09%)</title><rect x="1101.4" y="963.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1104.4" y="974.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (3 samples, 0.26%)</title><rect x="1102.5" y="979.0" width="3.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1105.5" y="990.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.09%)</title><rect x="1103.5" y="963.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1106.5" y="974.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.09%)</title><rect x="1104.5" y="963.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1107.5" y="974.0"></text>
</g>
<g>
<title>jmpConUNode::oper_input_base() const (1 samples, 0.09%)</title><rect x="1105.6" y="979.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1108.6" y="990.0"></text>
</g>
<g>
<title>PhasePeephole::do_transform() (1 samples, 0.09%)</title><rect x="1106.6" y="995.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1109.6" y="1006.0"></text>
</g>
<g>
<title>Compile::Optimize() (33 samples, 2.88%)</title><rect x="1107.6" y="1011.0" width="34.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1110.6" y="1022.0">Co..</text>
</g>
<g>
<title>Compile::optimize_loops(int&amp;, PhaseIterGVN&amp;, LoopOptsMode) [clone .part.341] (12 samples, 1.05%)</title><rect x="1107.6" y="995.0" width="12.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1110.6" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (12 samples, 1.05%)</title><rect x="1107.6" y="979.0" width="12.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1110.6" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (2 samples, 0.17%)</title><rect x="1107.6" y="963.0" width="2.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1110.6" y="974.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (2 samples, 0.17%)</title><rect x="1107.6" y="947.0" width="2.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1110.6" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (3 samples, 0.26%)</title><rect x="1109.7" y="963.0" width="3.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1112.7" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (1 samples, 0.09%)</title><rect x="1111.7" y="947.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1114.7" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (1 samples, 0.09%)</title><rect x="1111.7" y="931.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1114.7" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (3 samples, 0.26%)</title><rect x="1112.8" y="963.0" width="3.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1115.8" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (2 samples, 0.17%)</title><rect x="1113.8" y="947.0" width="2.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1116.8" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_local_phi_input(Node*) (1 samples, 0.09%)</title><rect x="1114.8" y="931.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1117.8" y="942.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 0.26%)</title><rect x="1115.9" y="963.0" width="3.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1118.9" y="974.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 0.26%)</title><rect x="1115.9" y="947.0" width="3.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1118.9" y="958.0"></text>
</g>
<g>
<title>CastIINode::Value(PhaseGVN*) const (1 samples, 0.09%)</title><rect x="1115.9" y="931.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1118.9" y="942.0"></text>
</g>
<g>
<title>TypeInt::filter_helper(Type const*, bool) const (1 samples, 0.09%)</title><rect x="1115.9" y="915.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1118.9" y="926.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.09%)</title><rect x="1115.9" y="899.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1118.9" y="910.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.09%)</title><rect x="1115.9" y="883.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1118.9" y="894.0"></text>
</g>
<g>
<title>TypeAryPtr::add_offset(long) const (1 samples, 0.09%)</title><rect x="1116.9" y="931.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1119.9" y="942.0"></text>
</g>
<g>
<title>TypeAryPtr::make(TypePtr::PTR, ciObject*, TypeAry const*, ciKlass*, bool, int, int, TypePtr const*, int, bool) (1 samples, 0.09%)</title><rect x="1116.9" y="915.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1119.9" y="926.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) (1 samples, 0.09%)</title><rect x="1116.9" y="899.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1119.9" y="910.0"></text>
</g>
<g>
<title>TypeLong::filter_helper(Type const*, bool) const (1 samples, 0.09%)</title><rect x="1117.9" y="931.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1120.9" y="942.0"></text>
</g>
<g>
<title>SuperWord::transform_loop(IdealLoopTree*, bool) (1 samples, 0.09%)</title><rect x="1119.0" y="963.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1122.0" y="974.0"></text>
</g>
<g>
<title>SuperWord::SLP_extract() (1 samples, 0.09%)</title><rect x="1119.0" y="947.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1122.0" y="958.0"></text>
</g>
<g>
<title>SuperWord::dependence_graph() (1 samples, 0.09%)</title><rect x="1119.0" y="931.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1122.0" y="942.0"></text>
</g>
<g>
<title>SWPointer::SWPointer(MemNode*, SuperWord*, Node_Stack*, bool) [clone .constprop.203] (1 samples, 0.09%)</title><rect x="1119.0" y="915.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1122.0" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.09%)</title><rect x="1120.0" y="995.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1123.0" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.09%)</title><rect x="1120.0" y="979.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1123.0" y="990.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (1 samples, 0.09%)</title><rect x="1121.0" y="995.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1124.0" y="1006.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (1 samples, 0.09%)</title><rect x="1121.0" y="979.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1124.0" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (11 samples, 0.96%)</title><rect x="1122.0" y="995.0" width="11.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1125.0" y="1006.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1122.0" y="979.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1125.0" y="990.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1122.0" y="963.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1125.0" y="974.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1122.0" y="947.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1125.0" y="958.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1122.0" y="931.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1125.0" y="942.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1122.0" y="915.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1125.0" y="926.0"></text>
</g>
<g>
<title>PhaseIdealLoop::insert_pre_post_loops(IdealLoopTree*, Node_List&amp;, bool) (1 samples, 0.09%)</title><rect x="1122.0" y="899.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1125.0" y="910.0"></text>
</g>
<g>
<title>PhaseIdealLoop::insert_post_loop(IdealLoopTree*, Node_List&amp;, CountedLoopNode*, CountedLoopEndNode*, Node*, Node*, CountedLoopNode*&amp;) (1 samples, 0.09%)</title><rect x="1122.0" y="883.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1125.0" y="894.0"></text>
</g>
<g>
<title>PhaseIdealLoop::clone_loop(IdealLoopTree*, Node_List&amp;, int, PhaseIdealLoop::CloneLoopMode, Node*) (1 samples, 0.09%)</title><rect x="1122.0" y="867.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1125.0" y="878.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.09%)</title><rect x="1122.0" y="851.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1125.0" y="862.0"></text>
</g>
<g>
<title>NodeHash::grow() (1 samples, 0.09%)</title><rect x="1122.0" y="835.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1125.0" y="846.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (2 samples, 0.17%)</title><rect x="1123.1" y="979.0" width="2.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1126.1" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 0.17%)</title><rect x="1125.1" y="979.0" width="2.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1128.1" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.09%)</title><rect x="1127.2" y="979.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1130.2" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (1 samples, 0.09%)</title><rect x="1127.2" y="963.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1130.2" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.09%)</title><rect x="1128.2" y="979.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1131.2" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (4 samples, 0.35%)</title><rect x="1129.2" y="979.0" width="4.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1132.2" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_post(Node*, bool) (1 samples, 0.09%)</title><rect x="1129.2" y="963.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1132.2" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.09%)</title><rect x="1129.2" y="947.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1132.2" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (3 samples, 0.26%)</title><rect x="1130.3" y="963.0" width="3.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1133.3" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (3 samples, 0.26%)</title><rect x="1130.3" y="947.0" width="3.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1133.3" y="958.0"></text>
</g>
<g>
<title>LoadNode::Value(PhaseGVN*) const (1 samples, 0.09%)</title><rect x="1130.3" y="931.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1133.3" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::register_new_node(Node*, Node*) (1 samples, 0.09%)</title><rect x="1131.3" y="931.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1134.3" y="942.0"></text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (1 samples, 0.09%)</title><rect x="1131.3" y="915.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1134.3" y="926.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (1 samples, 0.09%)</title><rect x="1131.3" y="899.0" width="1.0" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="1134.3" y="910.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.09%)</title><rect x="1132.3" y="931.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1135.3" y="942.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) (1 samples, 0.09%)</title><rect x="1132.3" y="915.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1135.3" y="926.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) (1 samples, 0.09%)</title><rect x="1132.3" y="899.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1135.3" y="910.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (5 samples, 0.44%)</title><rect x="1133.4" y="995.0" width="5.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1136.4" y="1006.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (5 samples, 0.44%)</title><rect x="1133.4" y="979.0" width="5.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1136.4" y="990.0"></text>
</g>
<g>
<title>CmpPNode::Opcode() const (1 samples, 0.09%)</title><rect x="1134.4" y="963.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1137.4" y="974.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1135.4" y="963.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1138.4" y="974.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.09%)</title><rect x="1135.4" y="947.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1138.4" y="958.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.09%)</title><rect x="1136.5" y="963.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1139.5" y="974.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.09%)</title><rect x="1136.5" y="947.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1139.5" y="958.0"></text>
</g>
<g>
<title>BoolNode::hash() const (1 samples, 0.09%)</title><rect x="1136.5" y="931.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1139.5" y="942.0"></text>
</g>
<g>
<title>Node::hash() const (1 samples, 0.09%)</title><rect x="1136.5" y="915.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1139.5" y="926.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1137.5" y="963.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1140.5" y="974.0"></text>
</g>
<g>
<title>Node::destruct() (1 samples, 0.09%)</title><rect x="1137.5" y="947.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1140.5" y="958.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.09%)</title><rect x="1138.5" y="995.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1141.5" y="1006.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.09%)</title><rect x="1138.5" y="979.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1141.5" y="990.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.09%)</title><rect x="1138.5" y="963.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1141.5" y="974.0"></text>
</g>
<g>
<title>Node::destruct() (1 samples, 0.09%)</title><rect x="1138.5" y="947.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1141.5" y="958.0"></text>
</g>
<g>
<title>PhaseRenumberLive::PhaseRenumberLive(PhaseGVN*, Unique_Node_List*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.09%)</title><rect x="1139.5" y="995.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1142.5" y="1006.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.09%)</title><rect x="1139.5" y="979.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1142.5" y="990.0"></text>
</g>
<g>
<title>Compile::update_dead_node_list(Unique_Node_List&amp;) (1 samples, 0.09%)</title><rect x="1139.5" y="963.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1142.5" y="974.0"></text>
</g>
<g>
<title>RootNode::bottom_type() const (1 samples, 0.09%)</title><rect x="1140.6" y="995.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1143.6" y="1006.0"></text>
</g>
<g>
<title>Compile::return_values(JVMState*) (1 samples, 0.09%)</title><rect x="1141.6" y="1011.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1144.6" y="1022.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.09%)</title><rect x="1141.6" y="995.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1144.6" y="1006.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1141.6" y="979.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1144.6" y="990.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (21 samples, 1.83%)</title><rect x="1142.6" y="1011.0" width="21.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1145.6" y="1022.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (21 samples, 1.83%)</title><rect x="1142.6" y="995.0" width="21.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1145.6" y="1006.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (21 samples, 1.83%)</title><rect x="1142.6" y="979.0" width="21.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1145.6" y="990.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (21 samples, 1.83%)</title><rect x="1142.6" y="963.0" width="21.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1145.6" y="974.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (21 samples, 1.83%)</title><rect x="1142.6" y="947.0" width="21.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1145.6" y="958.0">P..</text>
</g>
<g>
<title>Parse::do_call() (19 samples, 1.66%)</title><rect x="1143.7" y="931.0" width="19.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1146.7" y="942.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (2 samples, 0.17%)</title><rect x="1143.7" y="915.0" width="2.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1146.7" y="926.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (2 samples, 0.17%)</title><rect x="1143.7" y="899.0" width="2.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1146.7" y="910.0"></text>
</g>
<g>
<title>InlineTree::try_to_inline(ciMethod*, ciMethod*, int, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.09%)</title><rect x="1143.7" y="883.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1146.7" y="894.0"></text>
</g>
<g>
<title>ciMethod::has_unloaded_classes_in_signature() (1 samples, 0.09%)</title><rect x="1143.7" y="867.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1146.7" y="878.0"></text>
</g>
<g>
<title>Method::has_unloaded_classes_in_signature(methodHandle const&amp;, Thread*) (1 samples, 0.09%)</title><rect x="1143.7" y="851.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1146.7" y="862.0"></text>
</g>
<g>
<title>SignatureStream::as_symbol_or_null() (1 samples, 0.09%)</title><rect x="1143.7" y="835.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1146.7" y="846.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.09%)</title><rect x="1144.7" y="883.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1147.7" y="894.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.09%)</title><rect x="1144.7" y="867.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1147.7" y="878.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.09%)</title><rect x="1144.7" y="851.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1147.7" y="862.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.09%)</title><rect x="1144.7" y="835.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1147.7" y="846.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.09%)</title><rect x="1144.7" y="819.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1147.7" y="830.0"></text>
</g>
<g>
<title>ciTypeFlow::Block::compute_exceptions() (1 samples, 0.09%)</title><rect x="1144.7" y="803.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1147.7" y="814.0"></text>
</g>
<g>
<title>GenericGrowableArray::raw_allocate(int) (1 samples, 0.09%)</title><rect x="1144.7" y="787.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1147.7" y="798.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (15 samples, 1.31%)</title><rect x="1145.7" y="915.0" width="15.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1148.7" y="926.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (15 samples, 1.31%)</title><rect x="1145.7" y="899.0" width="15.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1148.7" y="910.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (14 samples, 1.22%)</title><rect x="1145.7" y="883.0" width="14.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1148.7" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_block() (14 samples, 1.22%)</title><rect x="1145.7" y="867.0" width="14.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1148.7" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (14 samples, 1.22%)</title><rect x="1145.7" y="851.0" width="14.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1148.7" y="862.0"></text>
</g>
<g>
<title>Parse::add_safepoint() (1 samples, 0.09%)</title><rect x="1145.7" y="835.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1148.7" y="846.0"></text>
</g>
<g>
<title>GraphKit::add_safepoint_edges(SafePointNode*, bool) (1 samples, 0.09%)</title><rect x="1145.7" y="819.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1148.7" y="830.0"></text>
</g>
<g>
<title>JVMState::clone_deep(Compile*) const (1 samples, 0.09%)</title><rect x="1145.7" y="803.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1148.7" y="814.0"></text>
</g>
<g>
<title>Parse::do_call() (13 samples, 1.13%)</title><rect x="1146.8" y="835.0" width="13.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1149.8" y="846.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (2 samples, 0.17%)</title><rect x="1146.8" y="819.0" width="2.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1149.8" y="830.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (2 samples, 0.17%)</title><rect x="1146.8" y="803.0" width="2.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1149.8" y="814.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (2 samples, 0.17%)</title><rect x="1146.8" y="787.0" width="2.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1149.8" y="798.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (2 samples, 0.17%)</title><rect x="1146.8" y="771.0" width="2.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1149.8" y="782.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (2 samples, 0.17%)</title><rect x="1146.8" y="755.0" width="2.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1149.8" y="766.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (2 samples, 0.17%)</title><rect x="1146.8" y="739.0" width="2.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1149.8" y="750.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (2 samples, 0.17%)</title><rect x="1146.8" y="723.0" width="2.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1149.8" y="734.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (2 samples, 0.17%)</title><rect x="1146.8" y="707.0" width="2.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1149.8" y="718.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.09%)</title><rect x="1146.8" y="691.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1149.8" y="702.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.09%)</title><rect x="1146.8" y="675.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1149.8" y="686.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1146.8" y="659.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1149.8" y="670.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1146.8" y="643.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1149.8" y="654.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(ciInstanceKlass*, ciKlass*, Symbol*, Symbol*, Bytecodes::Code, constantTag) (1 samples, 0.09%)</title><rect x="1146.8" y="627.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1149.8" y="638.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method_or_null(LinkInfo const&amp;) (1 samples, 0.09%)</title><rect x="1146.8" y="611.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1149.8" y="622.0"></text>
</g>
<g>
<title>LinkResolver::check_method_accessability(Klass*, Klass*, Klass*, methodHandle const&amp;, Thread*) (1 samples, 0.09%)</title><rect x="1146.8" y="595.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1149.8" y="606.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_putstatic(ciBytecodeStream*) (1 samples, 0.09%)</title><rect x="1147.8" y="691.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1150.8" y="702.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.09%)</title><rect x="1147.8" y="675.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1150.8" y="686.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.09%)</title><rect x="1147.8" y="659.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1150.8" y="670.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.09%)</title><rect x="1147.8" y="643.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1150.8" y="654.0"></text>
</g>
<g>
<title>ciField::initialize_from(fieldDescriptor*) (1 samples, 0.09%)</title><rect x="1147.8" y="627.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1150.8" y="638.0"></text>
</g>
<g>
<title>ciInstanceKlass::is_in_package(char const*, int) (1 samples, 0.09%)</title><rect x="1147.8" y="611.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1150.8" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (10 samples, 0.87%)</title><rect x="1148.8" y="819.0" width="10.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1151.8" y="830.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (10 samples, 0.87%)</title><rect x="1148.8" y="803.0" width="10.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1151.8" y="814.0"></text>
</g>
<g>
<title>Parse::create_entry_map() (1 samples, 0.09%)</title><rect x="1148.8" y="787.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1151.8" y="798.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**, bool) (1 samples, 0.09%)</title><rect x="1148.8" y="771.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1151.8" y="782.0"></text>
</g>
<g>
<title>BuildCutout::BuildCutout(GraphKit*, Node*, float, float) (1 samples, 0.09%)</title><rect x="1148.8" y="755.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1151.8" y="766.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.09%)</title><rect x="1148.8" y="739.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1151.8" y="750.0"></text>
</g>
<g>
<title>Compile::copy_node_notes_to(Node*, Node*) (1 samples, 0.09%)</title><rect x="1148.8" y="723.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1151.8" y="734.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (8 samples, 0.70%)</title><rect x="1149.8" y="787.0" width="8.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1152.8" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_block() (8 samples, 0.70%)</title><rect x="1149.8" y="771.0" width="8.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1152.8" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (8 samples, 0.70%)</title><rect x="1149.8" y="755.0" width="8.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1152.8" y="766.0"></text>
</g>
<g>
<title>Parse::do_call() (8 samples, 0.70%)</title><rect x="1149.8" y="739.0" width="8.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1152.8" y="750.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.09%)</title><rect x="1149.8" y="723.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1152.8" y="734.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.09%)</title><rect x="1149.8" y="707.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1152.8" y="718.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.09%)</title><rect x="1149.8" y="691.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1152.8" y="702.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.09%)</title><rect x="1149.8" y="675.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1152.8" y="686.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.09%)</title><rect x="1149.8" y="659.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1152.8" y="670.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.09%)</title><rect x="1149.8" y="643.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1152.8" y="654.0"></text>
</g>
<g>
<title>ciTypeFlow::build_loop_tree(ciTypeFlow::Block*) (1 samples, 0.09%)</title><rect x="1149.8" y="627.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1152.8" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.52%)</title><rect x="1150.9" y="723.0" width="6.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1153.9" y="734.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.52%)</title><rect x="1150.9" y="707.0" width="6.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1153.9" y="718.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 0.52%)</title><rect x="1150.9" y="691.0" width="6.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1153.9" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 0.52%)</title><rect x="1150.9" y="675.0" width="6.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1153.9" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 0.52%)</title><rect x="1150.9" y="659.0" width="6.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1153.9" y="670.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 0.52%)</title><rect x="1150.9" y="643.0" width="6.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1153.9" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.44%)</title><rect x="1150.9" y="627.0" width="5.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1153.9" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.44%)</title><rect x="1150.9" y="611.0" width="5.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1153.9" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.44%)</title><rect x="1150.9" y="595.0" width="5.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1153.9" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.44%)</title><rect x="1150.9" y="579.0" width="5.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1153.9" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.44%)</title><rect x="1150.9" y="563.0" width="5.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1153.9" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.35%)</title><rect x="1151.9" y="547.0" width="4.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1154.9" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.35%)</title><rect x="1151.9" y="531.0" width="4.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1154.9" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.35%)</title><rect x="1151.9" y="515.0" width="4.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1154.9" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.35%)</title><rect x="1151.9" y="499.0" width="4.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1154.9" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.26%)</title><rect x="1151.9" y="483.0" width="3.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1154.9" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.26%)</title><rect x="1151.9" y="467.0" width="3.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1154.9" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.17%)</title><rect x="1151.9" y="451.0" width="2.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1154.9" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.17%)</title><rect x="1151.9" y="435.0" width="2.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1154.9" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1152.9" y="419.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1155.9" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1152.9" y="403.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1155.9" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1152.9" y="387.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1155.9" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1152.9" y="371.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1155.9" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1152.9" y="355.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1155.9" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1152.9" y="339.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1155.9" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1152.9" y="323.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1155.9" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1152.9" y="307.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1155.9" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1152.9" y="291.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1155.9" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1152.9" y="275.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1155.9" y="286.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**, bool) (1 samples, 0.09%)</title><rect x="1152.9" y="259.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1155.9" y="270.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.09%)</title><rect x="1152.9" y="243.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1155.9" y="254.0"></text>
</g>
<g>
<title>Node::hash() const (1 samples, 0.09%)</title><rect x="1152.9" y="227.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1155.9" y="238.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.09%)</title><rect x="1154.0" y="451.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1157.0" y="462.0"></text>
</g>
<g>
<title>GraphKit::basic_plus_adr(Node*, Node*, Node*) (1 samples, 0.09%)</title><rect x="1154.0" y="435.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1157.0" y="446.0"></text>
</g>
<g>
<title>Parse::merge_common(Parse::Block*, int) (1 samples, 0.09%)</title><rect x="1155.0" y="483.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1158.0" y="494.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1156.0" y="627.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1159.0" y="638.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1156.0" y="611.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1159.0" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1156.0" y="595.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1159.0" y="606.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1156.0" y="579.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1159.0" y="590.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1156.0" y="563.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1159.0" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1156.0" y="547.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1159.0" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1156.0" y="531.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1159.0" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1156.0" y="515.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1159.0" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1156.0" y="499.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1159.0" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1156.0" y="483.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1159.0" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1156.0" y="467.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1159.0" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1156.0" y="451.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1159.0" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1156.0" y="435.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1159.0" y="446.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1156.0" y="419.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1159.0" y="430.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1156.0" y="403.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1159.0" y="414.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1156.0" y="387.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1159.0" y="398.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1156.0" y="371.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1159.0" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1156.0" y="355.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1159.0" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1156.0" y="339.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1159.0" y="350.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1156.0" y="323.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1159.0" y="334.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1156.0" y="307.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1159.0" y="318.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1156.0" y="291.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1159.0" y="302.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1156.0" y="275.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1159.0" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1156.0" y="259.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1159.0" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1156.0" y="243.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1159.0" y="254.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1156.0" y="227.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1159.0" y="238.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1156.0" y="211.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1159.0" y="222.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1156.0" y="195.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1159.0" y="206.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1156.0" y="179.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1159.0" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1156.0" y="163.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1159.0" y="174.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1156.0" y="147.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1159.0" y="158.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1156.0" y="131.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1159.0" y="142.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1156.0" y="115.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1159.0" y="126.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1156.0" y="99.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1159.0" y="110.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1156.0" y="83.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1159.0" y="94.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1156.0" y="67.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1159.0" y="78.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1156.0" y="51.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1159.0" y="62.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1156.0" y="35.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1159.0" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1157.1" y="723.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1160.1" y="734.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1157.1" y="707.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1160.1" y="718.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1157.1" y="691.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1160.1" y="702.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1157.1" y="675.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1160.1" y="686.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1157.1" y="659.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1160.1" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1157.1" y="643.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1160.1" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1157.1" y="627.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1160.1" y="638.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1157.1" y="611.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1160.1" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1157.1" y="595.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1160.1" y="606.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1157.1" y="579.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1160.1" y="590.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1157.1" y="563.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1160.1" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1157.1" y="547.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1160.1" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1157.1" y="531.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1160.1" y="542.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.09%)</title><rect x="1157.1" y="515.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1160.1" y="526.0"></text>
</g>
<g>
<title>Parse::Block::successor_for_bci(int) (1 samples, 0.09%)</title><rect x="1157.1" y="499.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1160.1" y="510.0"></text>
</g>
<g>
<title>ciMethod::method_data() [clone .part.84] (1 samples, 0.09%)</title><rect x="1158.1" y="787.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1161.1" y="798.0"></text>
</g>
<g>
<title>ciVirtualCallTypeData::translate_from(ProfileData const*) (1 samples, 0.09%)</title><rect x="1158.1" y="771.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1161.1" y="782.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1159.1" y="819.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1162.1" y="830.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1159.1" y="803.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1162.1" y="814.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1159.1" y="787.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1162.1" y="798.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1159.1" y="771.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1162.1" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1159.1" y="755.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1162.1" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1159.1" y="739.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1162.1" y="750.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1159.1" y="723.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1162.1" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1159.1" y="707.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1162.1" y="718.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1159.1" y="691.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1162.1" y="702.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1159.1" y="675.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1162.1" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1159.1" y="659.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1162.1" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1159.1" y="643.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1162.1" y="654.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1159.1" y="627.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1162.1" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1159.1" y="611.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1162.1" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1159.1" y="595.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1162.1" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1159.1" y="579.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1162.1" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1159.1" y="563.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1162.1" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1159.1" y="547.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1162.1" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1159.1" y="531.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1162.1" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1159.1" y="515.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1162.1" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1159.1" y="499.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1162.1" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1159.1" y="483.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1162.1" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1159.1" y="467.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1162.1" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1159.1" y="451.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1162.1" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1159.1" y="435.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1162.1" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1159.1" y="419.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1162.1" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1159.1" y="403.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1162.1" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1159.1" y="387.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1162.1" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1159.1" y="371.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1162.1" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1159.1" y="355.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1162.1" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1159.1" y="339.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1162.1" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1159.1" y="323.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1162.1" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1159.1" y="307.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1162.1" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1159.1" y="291.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1162.1" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1159.1" y="275.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1162.1" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1159.1" y="259.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1162.1" y="270.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1159.1" y="243.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1162.1" y="254.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1159.1" y="227.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1162.1" y="238.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1159.1" y="211.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1162.1" y="222.0"></text>
</g>
<g>
<title>Parse::create_entry_map() (1 samples, 0.09%)</title><rect x="1159.1" y="195.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1162.1" y="206.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**, bool) (1 samples, 0.09%)</title><rect x="1159.1" y="179.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1162.1" y="190.0"></text>
</g>
<g>
<title>BuildCutout::BuildCutout(GraphKit*, Node*, float, float) (1 samples, 0.09%)</title><rect x="1159.1" y="163.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1162.1" y="174.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.09%)</title><rect x="1159.1" y="147.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1162.1" y="158.0"></text>
</g>
<g>
<title>MergeMemNode::make(Node*) (1 samples, 0.09%)</title><rect x="1159.1" y="131.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1162.1" y="142.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/ld-2.31.so (1 samples, 0.09%)</title><rect x="1159.1" y="115.0" width="1.0" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="1162.1" y="126.0"></text>
</g>
<g>
<title>ciMethod::get_method_at_bci(int, bool&amp;, ciSignature**) (1 samples, 0.09%)</title><rect x="1160.1" y="883.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1163.1" y="894.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.17%)</title><rect x="1161.2" y="915.0" width="2.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1164.2" y="926.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.17%)</title><rect x="1161.2" y="899.0" width="2.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1164.2" y="910.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.17%)</title><rect x="1161.2" y="883.0" width="2.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1164.2" y="894.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.17%)</title><rect x="1161.2" y="867.0" width="2.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1164.2" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.17%)</title><rect x="1161.2" y="851.0" width="2.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1164.2" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.17%)</title><rect x="1161.2" y="835.0" width="2.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1164.2" y="846.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.17%)</title><rect x="1161.2" y="819.0" width="2.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1164.2" y="830.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.17%)</title><rect x="1161.2" y="803.0" width="2.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1164.2" y="814.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.17%)</title><rect x="1161.2" y="787.0" width="2.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1164.2" y="798.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.17%)</title><rect x="1161.2" y="771.0" width="2.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1164.2" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.17%)</title><rect x="1161.2" y="755.0" width="2.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1164.2" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.17%)</title><rect x="1161.2" y="739.0" width="2.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1164.2" y="750.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.17%)</title><rect x="1161.2" y="723.0" width="2.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1164.2" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.17%)</title><rect x="1161.2" y="707.0" width="2.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1164.2" y="718.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.17%)</title><rect x="1161.2" y="691.0" width="2.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1164.2" y="702.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1161.2" y="675.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1164.2" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1161.2" y="659.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1164.2" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1161.2" y="643.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1164.2" y="654.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1161.2" y="627.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1164.2" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1161.2" y="611.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1164.2" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1161.2" y="595.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1164.2" y="606.0"></text>
</g>
<g>
<title>Parse::create_entry_map() (1 samples, 0.09%)</title><rect x="1161.2" y="579.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1164.2" y="590.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**, bool) (1 samples, 0.09%)</title><rect x="1161.2" y="563.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1164.2" y="574.0"></text>
</g>
<g>
<title>TypePtr::xmeet(Type const*) const (1 samples, 0.09%)</title><rect x="1161.2" y="547.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1164.2" y="558.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.09%)</title><rect x="1161.2" y="531.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1164.2" y="542.0"></text>
</g>
<g>
<title>Parse::do_exits() (1 samples, 0.09%)</title><rect x="1162.2" y="675.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1165.2" y="686.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.09%)</title><rect x="1162.2" y="659.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1165.2" y="670.0"></text>
</g>
<g>
<title>TypeOopPtr::filter_helper(Type const*, bool) const (1 samples, 0.09%)</title><rect x="1162.2" y="643.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1165.2" y="654.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.09%)</title><rect x="1163.2" y="931.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1166.2" y="942.0"></text>
</g>
<g>
<title>AddINode::add_id() const (1 samples, 0.09%)</title><rect x="1163.2" y="915.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1166.2" y="926.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, bool, bool, RTMState) (1 samples, 0.09%)</title><rect x="1164.3" y="1011.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1167.3" y="1022.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle const&amp;, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, _jobject*, _jobject*) (1 samples, 0.09%)</title><rect x="1164.3" y="995.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1167.3" y="1006.0"></text>
</g>
<g>
<title>nmethod::nmethod(Method*, CompilerType, int, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, _jobject*, _jobject*) (1 samples, 0.09%)</title><rect x="1164.3" y="979.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1167.3" y="990.0"></text>
</g>
<g>
<title>metadata_Relocation::unpack_data() (1 samples, 0.09%)</title><rect x="1164.3" y="963.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1167.3" y="974.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (17 samples, 1.48%)</title><rect x="1165.3" y="1043.0" width="17.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1168.3" y="1054.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (17 samples, 1.48%)</title><rect x="1165.3" y="1027.0" width="17.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1168.3" y="1038.0"></text>
</g>
<g>
<title>Compilation::compile_method() (17 samples, 1.48%)</title><rect x="1165.3" y="1011.0" width="17.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1168.3" y="1022.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (16 samples, 1.40%)</title><rect x="1165.3" y="995.0" width="16.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1168.3" y="1006.0"></text>
</g>
<g>
<title>Compilation::build_hir() [clone .part.93] (5 samples, 0.44%)</title><rect x="1165.3" y="979.0" width="5.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1168.3" y="990.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (4 samples, 0.35%)</title><rect x="1165.3" y="963.0" width="4.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1168.3" y="974.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (4 samples, 0.35%)</title><rect x="1165.3" y="947.0" width="4.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1168.3" y="958.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (4 samples, 0.35%)</title><rect x="1165.3" y="931.0" width="4.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1168.3" y="942.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (4 samples, 0.35%)</title><rect x="1165.3" y="915.0" width="4.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1168.3" y="926.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (4 samples, 0.35%)</title><rect x="1165.3" y="899.0" width="4.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1168.3" y="910.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (4 samples, 0.35%)</title><rect x="1165.3" y="883.0" width="4.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1168.3" y="894.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (2 samples, 0.17%)</title><rect x="1165.3" y="867.0" width="2.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1168.3" y="878.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (2 samples, 0.17%)</title><rect x="1165.3" y="851.0" width="2.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1168.3" y="862.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (2 samples, 0.17%)</title><rect x="1165.3" y="835.0" width="2.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1168.3" y="846.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (2 samples, 0.17%)</title><rect x="1165.3" y="819.0" width="2.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1168.3" y="830.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (2 samples, 0.17%)</title><rect x="1165.3" y="803.0" width="2.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1168.3" y="814.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.09%)</title><rect x="1165.3" y="787.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1168.3" y="798.0"></text>
</g>
<g>
<title>GraphBuilder::try_method_handle_inline(ciMethod*, bool) (1 samples, 0.09%)</title><rect x="1165.3" y="771.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1168.3" y="782.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.09%)</title><rect x="1165.3" y="755.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1168.3" y="766.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.09%)</title><rect x="1165.3" y="739.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1168.3" y="750.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.09%)</title><rect x="1165.3" y="723.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1168.3" y="734.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.09%)</title><rect x="1165.3" y="707.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1168.3" y="718.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.09%)</title><rect x="1165.3" y="691.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1168.3" y="702.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.09%)</title><rect x="1165.3" y="675.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1168.3" y="686.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.09%)</title><rect x="1165.3" y="659.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1168.3" y="670.0"></text>
</g>
<g>
<title>GraphBuilder::ScopeData::add_to_work_list(BlockBegin*) (1 samples, 0.09%)</title><rect x="1165.3" y="643.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1168.3" y="654.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.09%)</title><rect x="1165.3" y="627.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1168.3" y="638.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.09%)</title><rect x="1165.3" y="611.0" width="1.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1168.3" y="622.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.09%)</title><rect x="1166.3" y="787.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1169.3" y="798.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1166.3" y="771.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1169.3" y="782.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1166.3" y="755.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1169.3" y="766.0"></text>
</g>
<g>
<title>ciObjectFactory::get_unloaded_method(ciInstanceKlass*, ciSymbol*, ciSymbol*, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1166.3" y="739.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1169.3" y="750.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(ciInstanceKlass*, ciSymbol*, ciSymbol*, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1166.3" y="723.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1169.3" y="734.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle const&amp;, ciSymbol*) (1 samples, 0.09%)</title><rect x="1166.3" y="707.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1169.3" y="718.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle const&amp;, ciSymbol*, bool) (1 samples, 0.09%)</title><rect x="1166.3" y="691.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1169.3" y="702.0"></text>
</g>
<g>
<title>ttyLocker::release_tty_if_locked() (1 samples, 0.09%)</title><rect x="1166.3" y="675.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1169.3" y="686.0"></text>
</g>
<g>
<title>syscall (1 samples, 0.09%)</title><rect x="1166.3" y="659.0" width="1.0" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1169.3" y="670.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.09%)</title><rect x="1167.3" y="867.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1170.3" y="878.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1167.3" y="851.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1170.3" y="862.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1167.3" y="835.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1170.3" y="846.0"></text>
</g>
<g>
<title>LinkResolver::resolve_special_call_or_null(LinkInfo const&amp;) (1 samples, 0.09%)</title><rect x="1167.3" y="819.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1170.3" y="830.0"></text>
</g>
<g>
<title>ciKlass::is_klass() const (1 samples, 0.09%)</title><rect x="1168.4" y="867.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1171.4" y="878.0"></text>
</g>
<g>
<title>If::visit(InstructionVisitor*) (1 samples, 0.09%)</title><rect x="1169.4" y="963.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1172.4" y="974.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (2 samples, 0.17%)</title><rect x="1170.4" y="979.0" width="2.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1173.4" y="990.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_code(BlockList*) (2 samples, 0.17%)</title><rect x="1170.4" y="963.0" width="2.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1173.4" y="974.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_call(LIR_OpJavaCall*) (1 samples, 0.09%)</title><rect x="1170.4" y="947.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1173.4" y="958.0"></text>
</g>
<g>
<title>LIR_Assembler::add_call_info(int, CodeEmitInfo*) (1 samples, 0.09%)</title><rect x="1170.4" y="931.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1173.4" y="942.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, methodHandle const&amp;, ciMethod*, int, bool, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.09%)</title><rect x="1170.4" y="915.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1173.4" y="926.0"></text>
</g>
<g>
<title>LIR_Assembler::process_debug_info(LIR_Op*) (1 samples, 0.09%)</title><rect x="1171.5" y="947.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1174.5" y="958.0"></text>
</g>
<g>
<title>LIR_Assembler::record_non_safepoint_debug_info() (1 samples, 0.09%)</title><rect x="1171.5" y="931.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1174.5" y="942.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, methodHandle const&amp;, ciMethod*, int, bool, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.09%)</title><rect x="1171.5" y="915.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1174.5" y="926.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.09%)</title><rect x="1171.5" y="899.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1174.5" y="910.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (9 samples, 0.79%)</title><rect x="1172.5" y="979.0" width="9.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1175.5" y="990.0"></text>
</g>
<g>
<title>ControlFlowOptimizer::optimize(BlockList*) (1 samples, 0.09%)</title><rect x="1172.5" y="963.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1175.5" y="974.0"></text>
</g>
<g>
<title>ControlFlowOptimizer::delete_empty_blocks(BlockList*) (1 samples, 0.09%)</title><rect x="1172.5" y="947.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1175.5" y="958.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (8 samples, 0.70%)</title><rect x="1173.5" y="963.0" width="8.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1176.5" y="974.0"></text>
</g>
<g>
<title>LinearScan::allocate_registers() (1 samples, 0.09%)</title><rect x="1173.5" y="947.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1176.5" y="958.0"></text>
</g>
<g>
<title>IntervalWalker::walk_to(int) [clone .constprop.232] (1 samples, 0.09%)</title><rect x="1173.5" y="931.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1176.5" y="942.0"></text>
</g>
<g>
<title>LinearScanWalker::activate_current() (1 samples, 0.09%)</title><rect x="1173.5" y="915.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1176.5" y="926.0"></text>
</g>
<g>
<title>LinearScanWalker::alloc_free_reg(Interval*) (1 samples, 0.09%)</title><rect x="1173.5" y="899.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1176.5" y="910.0"></text>
</g>
<g>
<title>LinearScanWalker::split_when_partial_register_available(Interval*, int) (1 samples, 0.09%)</title><rect x="1173.5" y="883.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1176.5" y="894.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num() (1 samples, 0.09%)</title><rect x="1174.6" y="947.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1177.6" y="958.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num(GrowableArray&lt;LIR_Op*&gt;*, IntervalWalker*) (1 samples, 0.09%)</title><rect x="1174.6" y="931.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1177.6" y="942.0"></text>
</g>
<g>
<title>Interval::split_child_at_op_id(int, LIR_OpVisitState::OprMode) (1 samples, 0.09%)</title><rect x="1174.6" y="915.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1177.6" y="926.0"></text>
</g>
<g>
<title>LinearScan::build_intervals() (3 samples, 0.26%)</title><rect x="1175.6" y="947.0" width="3.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1178.6" y="958.0"></text>
</g>
<g>
<title>LinearScan::create_interval(int) (1 samples, 0.09%)</title><rect x="1176.6" y="931.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1179.6" y="942.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.09%)</title><rect x="1177.6" y="931.0" width="1.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1180.6" y="942.0"></text>
</g>
<g>
<title>LinearScan::compute_global_live_sets() (1 samples, 0.09%)</title><rect x="1178.7" y="947.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.7" y="958.0"></text>
</g>
<g>
<title>LinearScan::eliminate_spill_moves() (1 samples, 0.09%)</title><rect x="1179.7" y="947.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.7" y="958.0"></text>
</g>
<g>
<title>LinearScan::resolve_data_flow() (1 samples, 0.09%)</title><rect x="1180.7" y="947.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.7" y="958.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, bool, bool, RTMState) (1 samples, 0.09%)</title><rect x="1181.8" y="995.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.8" y="1006.0"></text>
</g>
<g>
<title>NMethodSweeper::sweeper_loop() (1 samples, 0.09%)</title><rect x="1182.8" y="1075.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.8" y="1086.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.09%)</title><rect x="1182.8" y="1059.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1185.8" y="1070.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.09%)</title><rect x="1182.8" y="1043.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.8" y="1054.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.09%)</title><rect x="1182.8" y="1027.0" width="1.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1185.8" y="1038.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.09%)</title><rect x="1182.8" y="1011.0" width="1.0" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1185.8" y="1022.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.09%)</title><rect x="1182.8" y="995.0" width="1.0" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1185.8" y="1006.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (2 samples, 0.17%)</title><rect x="1183.8" y="1075.0" width="2.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1186.8" y="1086.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (2 samples, 0.17%)</title><rect x="1183.8" y="1059.0" width="2.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1186.8" y="1070.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (2 samples, 0.17%)</title><rect x="1183.8" y="1043.0" width="2.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1186.8" y="1054.0"></text>
</g>
<g>
<title>create_inline_record(nmethod*) (2 samples, 0.17%)</title><rect x="1183.8" y="1027.0" width="2.1" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1186.8" y="1038.0"></text>
</g>
<g>
<title>CompiledMethod::scope_desc_at(unsigned char*) (1 samples, 0.09%)</title><rect x="1184.9" y="1011.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1187.9" y="1022.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.09%)</title><rect x="1184.9" y="995.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1187.9" y="1006.0"></text>
</g>
<g>
<title>VMThread::run() (3 samples, 0.26%)</title><rect x="1185.9" y="1091.0" width="3.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1188.9" y="1102.0"></text>
</g>
<g>
<title>VMThread::loop() (3 samples, 0.26%)</title><rect x="1185.9" y="1075.0" width="3.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1188.9" y="1086.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (2 samples, 0.17%)</title><rect x="1185.9" y="1059.0" width="2.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1188.9" y="1070.0"></text>
</g>
<g>
<title>RuntimeService::record_safepoint_begin() (1 samples, 0.09%)</title><rect x="1185.9" y="1043.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1188.9" y="1054.0"></text>
</g>
<g>
<title>SafepointSynchronize::do_cleanup_tasks() (1 samples, 0.09%)</title><rect x="1186.9" y="1043.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1189.9" y="1054.0"></text>
</g>
<g>
<title>WorkGang::run_task(AbstractGangTask*) (1 samples, 0.09%)</title><rect x="1186.9" y="1027.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1189.9" y="1038.0"></text>
</g>
<g>
<title>SemaphoreGangTaskDispatcher::coordinator_execute_on_workers(AbstractGangTask*, unsigned int) (1 samples, 0.09%)</title><rect x="1186.9" y="1011.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1189.9" y="1022.0"></text>
</g>
<g>
<title>sem_post@@GLIBC_2.2.5 (1 samples, 0.09%)</title><rect x="1186.9" y="995.0" width="1.0" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1189.9" y="1006.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.09%)</title><rect x="1186.9" y="979.0" width="1.0" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1189.9" y="990.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.09%)</title><rect x="1186.9" y="963.0" width="1.0" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1189.9" y="974.0"></text>
</g>
<g>
<title>__x64_sys_futex (1 samples, 0.09%)</title><rect x="1186.9" y="947.0" width="1.0" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1189.9" y="958.0"></text>
</g>
<g>
<title>do_futex (1 samples, 0.09%)</title><rect x="1186.9" y="931.0" width="1.0" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1189.9" y="942.0"></text>
</g>
<g>
<title>futex_wake (1 samples, 0.09%)</title><rect x="1186.9" y="915.0" width="1.0" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1189.9" y="926.0"></text>
</g>
<g>
<title>wake_up_q (1 samples, 0.09%)</title><rect x="1186.9" y="899.0" width="1.0" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1189.9" y="910.0"></text>
</g>
<g>
<title>try_to_wake_up (1 samples, 0.09%)</title><rect x="1186.9" y="883.0" width="1.0" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1189.9" y="894.0"></text>
</g>
<g>
<title>__lock_text_start (1 samples, 0.09%)</title><rect x="1186.9" y="867.0" width="1.0" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1189.9" y="878.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) [clone .constprop.66] (1 samples, 0.09%)</title><rect x="1187.9" y="1059.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1190.9" y="1070.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (1 samples, 0.09%)</title><rect x="1187.9" y="1043.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1190.9" y="1054.0"></text>
</g>
<g>
<title>VM_ThreadDump::doit() (1 samples, 0.09%)</title><rect x="1187.9" y="1027.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1190.9" y="1038.0"></text>
</g>
<g>
<title>ThreadStackTrace::dump_stack_at_safepoint(int) (1 samples, 0.09%)</title><rect x="1187.9" y="1011.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1190.9" y="1022.0"></text>
</g>
<g>
<title>vframe::sender() const (1 samples, 0.09%)</title><rect x="1187.9" y="995.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1190.9" y="1006.0"></text>
</g>
<g>
<title>WatcherThread::run() (1 samples, 0.09%)</title><rect x="1189.0" y="1091.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1192.0" y="1102.0"></text>
</g>
<g>
<title>PeriodicTask::real_time_tick(int) (1 samples, 0.09%)</title><rect x="1189.0" y="1075.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1192.0" y="1086.0"></text>
</g>
</g>
</svg>
