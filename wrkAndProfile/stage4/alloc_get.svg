<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="966" onload="init(evt)" viewBox="0 0 1200 966" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="949"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="949"> </text>
<g id="frames">
<g>
<title>all (717,388 samples, 100.00%)</title><rect x="10.0" y="915.0" width="1180.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="13.0" y="926.0">all</text>
</g>
<g>
<title>java/lang/Thread.run (583,449 samples, 81.33%)</title><rect x="10.0" y="899.0" width="959.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="13.0" y="910.0">java/lang/Thread.run</text>
</g>
<g>
<title>com/sun/jmx/remote/internal/ServerCommunicatorAdmin$Timeout.run (490 samples, 0.07%)</title><rect x="10.0" y="883.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="13.0" y="894.0"></text>
</g>
<g>
<title>com/sun/jmx/remote/internal/ServerCommunicatorAdmin.logtime (490 samples, 0.07%)</title><rect x="10.0" y="867.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="13.0" y="878.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1984837582.linkToTargetMethod (490 samples, 0.07%)</title><rect x="10.0" y="851.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="13.0" y="862.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1567958271.invoke (490 samples, 0.07%)</title><rect x="10.0" y="835.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="13.0" y="846.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (490 samples, 0.07%)</title><rect x="10.0" y="819.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="13.0" y="830.0"></text>
</g>
<g>
<title>java/lang/invoke/StringConcatFactory$MethodHandleInlineCopyStrategy.newArray (490 samples, 0.07%)</title><rect x="10.0" y="803.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="13.0" y="814.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.allocateUninitializedArray (490 samples, 0.07%)</title><rect x="10.0" y="787.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="798.0"></text>
</g>
<g>
<title>byte[] (490 samples, 0.07%)</title><rect x="10.0" y="771.0" width="0.8" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="13.0" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (582,959 samples, 81.26%)</title><rect x="10.8" y="883.0" width="958.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="13.8" y="894.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (582,959 samples, 81.26%)</title><rect x="10.8" y="867.0" width="958.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="13.8" y="878.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (1,456 samples, 0.20%)</title><rect x="10.8" y="851.0" width="2.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="13.8" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (1,456 samples, 0.20%)</title><rect x="10.8" y="835.0" width="2.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="13.8" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (1,447 samples, 0.20%)</title><rect x="10.8" y="819.0" width="2.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="13.8" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (1,447 samples, 0.20%)</title><rect x="10.8" y="803.0" width="2.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="13.8" y="814.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$Node (1,447 samples, 0.20%)</title><rect x="10.8" y="787.0" width="2.4" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="13.8" y="798.0"></text>
</g>
<g>
<title>ru/mail/polis/service/valaubr/HttpService$$Lambda$124/1082880506.run (551,282 samples, 76.85%)</title><rect x="13.2" y="851.0" width="906.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="16.2" y="862.0">ru/mail/polis/service/valaubr/HttpService$$Lambda$124/1082880506.run</text>
</g>
<g>
<title>ru/mail/polis/service/valaubr/HttpService.lambda$get$1 (551,282 samples, 76.85%)</title><rect x="13.2" y="835.0" width="906.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="16.2" y="846.0">ru/mail/polis/service/valaubr/HttpService.lambda$get$1</text>
</g>
<g>
<title>java/lang/String.getBytes (8,096 samples, 1.13%)</title><rect x="13.2" y="819.0" width="13.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="16.2" y="830.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (8,096 samples, 1.13%)</title><rect x="13.2" y="803.0" width="13.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="16.2" y="814.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (8,096 samples, 1.13%)</title><rect x="13.2" y="787.0" width="13.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="16.2" y="798.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (8,096 samples, 1.13%)</title><rect x="13.2" y="771.0" width="13.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="16.2" y="782.0"></text>
</g>
<g>
<title>byte[] (8,096 samples, 1.13%)</title><rect x="13.2" y="755.0" width="13.3" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="16.2" y="766.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1,628 samples, 0.23%)</title><rect x="26.5" y="819.0" width="2.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="29.5" y="830.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1,628 samples, 0.23%)</title><rect x="26.5" y="803.0" width="2.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="29.5" y="814.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (1,628 samples, 0.23%)</title><rect x="26.5" y="787.0" width="2.7" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="29.5" y="798.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (2,186 samples, 0.30%)</title><rect x="29.2" y="819.0" width="3.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="32.2" y="830.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (2,186 samples, 0.30%)</title><rect x="29.2" y="803.0" width="3.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="32.2" y="814.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (1,501 samples, 0.21%)</title><rect x="29.2" y="787.0" width="2.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="32.2" y="798.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (1,501 samples, 0.21%)</title><rect x="29.2" y="771.0" width="2.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="32.2" y="782.0"></text>
</g>
<g>
<title>byte[] (1,501 samples, 0.21%)</title><rect x="29.2" y="755.0" width="2.5" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="32.2" y="766.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (685 samples, 0.10%)</title><rect x="31.7" y="787.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="34.7" y="798.0"></text>
</g>
<g>
<title>one.nio.net.Session$ArrayQueueItem (685 samples, 0.10%)</title><rect x="31.7" y="771.0" width="1.1" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="34.7" y="782.0"></text>
</g>
<g>
<title>one/nio/http/Response.ok (2,026 samples, 0.28%)</title><rect x="32.8" y="819.0" width="3.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="35.8" y="830.0"></text>
</g>
<g>
<title>one.nio.http.Response (402 samples, 0.06%)</title><rect x="32.8" y="803.0" width="0.7" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="35.8" y="814.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (1,624 samples, 0.23%)</title><rect x="33.5" y="803.0" width="2.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="36.5" y="814.0"></text>
</g>
<g>
<title>byte[] (677 samples, 0.09%)</title><rect x="33.5" y="787.0" width="1.1" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="36.5" y="798.0"></text>
</g>
<g>
<title>java.lang.String[] (544 samples, 0.08%)</title><rect x="34.6" y="787.0" width="0.9" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="37.6" y="798.0"></text>
</g>
<g>
<title>java.lang.String (403 samples, 0.06%)</title><rect x="35.5" y="787.0" width="0.6" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="38.5" y="798.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAO.get (441,732 samples, 61.58%)</title><rect x="36.1" y="819.0" width="726.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="39.1" y="830.0">ru/mail/polis/dao/DAO.get</text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.hasNext (20,957 samples, 2.92%)</title><rect x="36.1" y="803.0" width="34.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="39.1" y="814.0">co..</text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (20,957 samples, 2.92%)</title><rect x="36.1" y="787.0" width="34.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="39.1" y="798.0">co..</text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (20,957 samples, 2.92%)</title><rect x="36.1" y="771.0" width="34.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="39.1" y="782.0">co..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (20,957 samples, 2.92%)</title><rect x="36.1" y="755.0" width="34.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="39.1" y="766.0">co..</text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (20,957 samples, 2.92%)</title><rect x="36.1" y="739.0" width="34.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="39.1" y="750.0">ru..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (19,352 samples, 2.70%)</title><rect x="36.1" y="723.0" width="31.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="39.1" y="734.0">co..</text>
</g>
<g>
<title>java/util/AbstractQueue.remove (5,863 samples, 0.82%)</title><rect x="36.1" y="707.0" width="9.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="39.1" y="718.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (5,863 samples, 0.82%)</title><rect x="36.1" y="691.0" width="9.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="39.1" y="702.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (5,863 samples, 0.82%)</title><rect x="36.1" y="675.0" width="9.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="39.1" y="686.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (5,863 samples, 0.82%)</title><rect x="36.1" y="659.0" width="9.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="39.1" y="670.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (5,863 samples, 0.82%)</title><rect x="36.1" y="643.0" width="9.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="39.1" y="654.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$123/1128211044.compare (5,863 samples, 0.82%)</title><rect x="36.1" y="627.0" width="9.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="39.1" y="638.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (5,863 samples, 0.82%)</title><rect x="36.1" y="611.0" width="9.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="39.1" y="622.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$121/245356113.compare (5,863 samples, 0.82%)</title><rect x="36.1" y="595.0" width="9.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="39.1" y="606.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (5,863 samples, 0.82%)</title><rect x="36.1" y="579.0" width="9.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="39.1" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/valaubr/Cell$$Lambda$120/2095215314.apply (5,863 samples, 0.82%)</title><rect x="36.1" y="563.0" width="9.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="39.1" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/valaubr/Cell.getKey (5,863 samples, 0.82%)</title><rect x="36.1" y="547.0" width="9.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="39.1" y="558.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (5,863 samples, 0.82%)</title><rect x="36.1" y="531.0" width="9.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="39.1" y="542.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (5,863 samples, 0.82%)</title><rect x="36.1" y="515.0" width="9.7" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="39.1" y="526.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (13,489 samples, 1.88%)</title><rect x="45.8" y="707.0" width="22.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="48.8" y="718.0">j..</text>
</g>
<g>
<title>java/util/PriorityQueue.offer (13,489 samples, 1.88%)</title><rect x="45.8" y="691.0" width="22.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="48.8" y="702.0">j..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (13,489 samples, 1.88%)</title><rect x="45.8" y="675.0" width="22.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="48.8" y="686.0">j..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (13,489 samples, 1.88%)</title><rect x="45.8" y="659.0" width="22.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="48.8" y="670.0">j..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (13,489 samples, 1.88%)</title><rect x="45.8" y="643.0" width="22.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="48.8" y="654.0">c..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (13,489 samples, 1.88%)</title><rect x="45.8" y="627.0" width="22.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="48.8" y="638.0">c..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (9,662 samples, 1.35%)</title><rect x="45.8" y="611.0" width="15.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="48.8" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/valaubr/SSTable$1.next (9,662 samples, 1.35%)</title><rect x="45.8" y="595.0" width="15.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="48.8" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/valaubr/SSTable$1.next (9,662 samples, 1.35%)</title><rect x="45.8" y="579.0" width="15.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="48.8" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/valaubr/SSTable.getCell (9,662 samples, 1.35%)</title><rect x="45.8" y="563.0" width="15.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="48.8" y="574.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (3,598 samples, 0.50%)</title><rect x="45.8" y="547.0" width="5.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="48.8" y="558.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (2,395 samples, 0.33%)</title><rect x="45.8" y="531.0" width="3.9" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="48.8" y="542.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1,203 samples, 0.17%)</title><rect x="49.7" y="531.0" width="2.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="52.7" y="542.0"></text>
</g>
<g>
<title>byte[] (1,203 samples, 0.17%)</title><rect x="49.7" y="515.0" width="2.0" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="52.7" y="526.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.valaubr.Cell (387 samples, 0.05%)</title><rect x="51.7" y="547.0" width="0.6" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="54.7" y="558.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.valaubr.Value (420 samples, 0.06%)</title><rect x="52.3" y="547.0" width="0.7" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="55.3" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/valaubr/SSTable.getKey (3,994 samples, 0.56%)</title><rect x="53.0" y="547.0" width="6.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="56.0" y="558.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (2,688 samples, 0.37%)</title><rect x="53.0" y="531.0" width="4.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="56.0" y="542.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (1,720 samples, 0.24%)</title><rect x="53.0" y="515.0" width="2.8" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="56.0" y="526.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (968 samples, 0.13%)</title><rect x="55.8" y="515.0" width="1.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="58.8" y="526.0"></text>
</g>
<g>
<title>byte[] (968 samples, 0.13%)</title><rect x="55.8" y="499.0" width="1.6" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="58.8" y="510.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/valaubr/SSTable.getOffset (1,306 samples, 0.18%)</title><rect x="57.4" y="531.0" width="2.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="60.4" y="542.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1,306 samples, 0.18%)</title><rect x="57.4" y="515.0" width="2.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="60.4" y="526.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (901 samples, 0.13%)</title><rect x="57.4" y="499.0" width="1.5" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="60.4" y="510.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (405 samples, 0.06%)</title><rect x="58.9" y="499.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="61.9" y="510.0"></text>
</g>
<g>
<title>byte[] (405 samples, 0.06%)</title><rect x="58.9" y="483.0" width="0.7" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="61.9" y="494.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/valaubr/SSTable.getOffset (1,263 samples, 0.18%)</title><rect x="59.6" y="547.0" width="2.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="62.6" y="558.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1,263 samples, 0.18%)</title><rect x="59.6" y="531.0" width="2.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="62.6" y="542.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (845 samples, 0.12%)</title><rect x="59.6" y="515.0" width="1.4" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="62.6" y="526.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (418 samples, 0.06%)</title><rect x="61.0" y="515.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="64.0" y="526.0"></text>
</g>
<g>
<title>byte[] (418 samples, 0.06%)</title><rect x="61.0" y="499.0" width="0.7" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="64.0" y="510.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$123/1128211044.compare (3,827 samples, 0.53%)</title><rect x="61.7" y="611.0" width="6.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="64.7" y="622.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (3,827 samples, 0.53%)</title><rect x="61.7" y="595.0" width="6.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="64.7" y="606.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$121/245356113.compare (3,827 samples, 0.53%)</title><rect x="61.7" y="579.0" width="6.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="64.7" y="590.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (3,827 samples, 0.53%)</title><rect x="61.7" y="563.0" width="6.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="64.7" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/valaubr/Cell$$Lambda$120/2095215314.apply (3,827 samples, 0.53%)</title><rect x="61.7" y="547.0" width="6.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="64.7" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/valaubr/Cell.getKey (3,827 samples, 0.53%)</title><rect x="61.7" y="531.0" width="6.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="64.7" y="542.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (3,827 samples, 0.53%)</title><rect x="61.7" y="515.0" width="6.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="64.7" y="526.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (3,827 samples, 0.53%)</title><rect x="61.7" y="499.0" width="6.3" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="64.7" y="510.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/valaubr/LsmDAO$$Lambda$137/588755485.apply (1,605 samples, 0.22%)</title><rect x="68.0" y="723.0" width="2.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="71.0" y="734.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/valaubr/Cell.getKey (1,605 samples, 0.22%)</title><rect x="68.0" y="707.0" width="2.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="71.0" y="718.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (1,605 samples, 0.22%)</title><rect x="68.0" y="691.0" width="2.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="71.0" y="702.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (1,605 samples, 0.22%)</title><rect x="68.0" y="675.0" width="2.6" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="71.0" y="686.0"></text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.next (2,090 samples, 0.29%)</title><rect x="70.6" y="803.0" width="3.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="73.6" y="814.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$6.transform (2,090 samples, 0.29%)</title><rect x="70.6" y="787.0" width="3.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="73.6" y="798.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/valaubr/LsmDAO$$Lambda$142/286277100.apply (2,090 samples, 0.29%)</title><rect x="70.6" y="771.0" width="3.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="73.6" y="782.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/valaubr/LsmDAO.lambda$iterator$3 (2,090 samples, 0.29%)</title><rect x="70.6" y="755.0" width="3.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="73.6" y="766.0"></text>
</g>
<g>
<title>ru/mail/polis/Record.of (396 samples, 0.06%)</title><rect x="70.6" y="739.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="73.6" y="750.0"></text>
</g>
<g>
<title>ru.mail.polis.Record (396 samples, 0.06%)</title><rect x="70.6" y="723.0" width="0.6" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="73.6" y="734.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/valaubr/Cell.getKey (887 samples, 0.12%)</title><rect x="71.2" y="739.0" width="1.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="74.2" y="750.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (887 samples, 0.12%)</title><rect x="71.2" y="723.0" width="1.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="74.2" y="734.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (887 samples, 0.12%)</title><rect x="71.2" y="707.0" width="1.5" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="74.2" y="718.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/valaubr/Value.getData (807 samples, 0.11%)</title><rect x="72.7" y="739.0" width="1.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="75.7" y="750.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (807 samples, 0.11%)</title><rect x="72.7" y="723.0" width="1.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="75.7" y="734.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (807 samples, 0.11%)</title><rect x="72.7" y="707.0" width="1.3" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="75.7" y="718.0"></text>
</g>
<g>
<title>ru/mail/polis/Record.getKey (821 samples, 0.11%)</title><rect x="74.0" y="803.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="77.0" y="814.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.asReadOnlyBuffer (821 samples, 0.11%)</title><rect x="74.0" y="787.0" width="1.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="77.0" y="798.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.duplicate (821 samples, 0.11%)</title><rect x="74.0" y="771.0" width="1.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="77.0" y="782.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (821 samples, 0.11%)</title><rect x="74.0" y="755.0" width="1.4" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="77.0" y="766.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/valaubr/LsmDAO.iterator (417,864 samples, 58.25%)</title><rect x="75.4" y="803.0" width="687.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="78.4" y="814.0">ru/mail/polis/dao/valaubr/LsmDAO.iterator</text>
</g>
<g>
<title>com/google/common/collect/Iterators.filter (601 samples, 0.08%)</title><rect x="75.4" y="787.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="78.4" y="798.0"></text>
</g>
<g>
<title>com.google.common.collect.Iterators$5 (601 samples, 0.08%)</title><rect x="75.4" y="771.0" width="1.0" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="78.4" y="782.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/valaubr/LsmDAO.cellIterator (417,139 samples, 58.15%)</title><rect x="76.6" y="787.0" width="686.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="79.6" y="798.0">ru/mail/polis/dao/valaubr/LsmDAO.cellIterator</text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (91,451 samples, 12.75%)</title><rect x="76.6" y="771.0" width="150.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="79.6" y="782.0">com/google/common/c..</text>
</g>
<g>
<title>com.google.common.collect.Iterators$MergingIterator (241 samples, 0.03%)</title><rect x="76.6" y="755.0" width="0.4" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="79.6" y="766.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (91,210 samples, 12.71%)</title><rect x="77.0" y="755.0" width="150.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="80.0" y="766.0">com/google/common/c..</text>
</g>
<g>
<title>com.google.common.collect.Iterators$MergingIterator$1 (334 samples, 0.05%)</title><rect x="77.0" y="739.0" width="0.5" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="80.0" y="750.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (1,798 samples, 0.25%)</title><rect x="77.5" y="739.0" width="3.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="80.5" y="750.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (1,798 samples, 0.25%)</title><rect x="77.5" y="723.0" width="3.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="80.5" y="734.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (1,798 samples, 0.25%)</title><rect x="77.5" y="707.0" width="3.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="80.5" y="718.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (1,798 samples, 0.25%)</title><rect x="77.5" y="691.0" width="3.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="80.5" y="702.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (341 samples, 0.05%)</title><rect x="77.5" y="675.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="80.5" y="686.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.hasNext (341 samples, 0.05%)</title><rect x="77.5" y="659.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="80.5" y="670.0"></text>
</g>
<g>
<title>java/util/Spliterators$1Adapter.hasNext (341 samples, 0.05%)</title><rect x="77.5" y="643.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="80.5" y="654.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.tryAdvance (341 samples, 0.05%)</title><rect x="77.5" y="627.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="80.5" y="638.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.doAdvance (341 samples, 0.05%)</title><rect x="77.5" y="611.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="80.5" y="622.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.fillBuffer (341 samples, 0.05%)</title><rect x="77.5" y="595.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="80.5" y="606.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator$$Lambda$119/1873832746.getAsBoolean (341 samples, 0.05%)</title><rect x="77.5" y="579.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="80.5" y="590.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.lambda$initPartialTraversalState$0 (341 samples, 0.05%)</title><rect x="77.5" y="563.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="80.5" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.tryAdvance (341 samples, 0.05%)</title><rect x="77.5" y="547.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="80.5" y="558.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (341 samples, 0.05%)</title><rect x="77.5" y="531.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="80.5" y="542.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/valaubr/MemTable$$Lambda$116/1241406125.apply (341 samples, 0.05%)</title><rect x="77.5" y="515.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="80.5" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/valaubr/MemTable.lambda$iterator$0 (341 samples, 0.05%)</title><rect x="77.5" y="499.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="80.5" y="510.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.valaubr.Cell (341 samples, 0.05%)</title><rect x="77.5" y="483.0" width="0.6" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="80.5" y="494.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/valaubr/TablesPool$$Lambda$126/1846732865.apply (1,457 samples, 0.20%)</title><rect x="78.1" y="675.0" width="2.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="81.1" y="686.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/valaubr/Cell.getKey (1,457 samples, 0.20%)</title><rect x="78.1" y="659.0" width="2.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="81.1" y="670.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (1,457 samples, 0.20%)</title><rect x="78.1" y="643.0" width="2.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="81.1" y="654.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (1,457 samples, 0.20%)</title><rect x="78.1" y="627.0" width="2.4" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="81.1" y="638.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators.peekingIterator (3,032 samples, 0.42%)</title><rect x="80.5" y="739.0" width="5.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="83.5" y="750.0"></text>
</g>
<g>
<title>com.google.common.collect.Iterators$PeekingImpl (3,032 samples, 0.42%)</title><rect x="80.5" y="723.0" width="5.0" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="83.5" y="734.0"></text>
</g>
<g>
<title>java.util.PriorityQueue (477 samples, 0.07%)</title><rect x="85.5" y="739.0" width="0.8" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="88.5" y="750.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.&lt;init&gt; (343 samples, 0.05%)</title><rect x="86.3" y="739.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="89.3" y="750.0"></text>
</g>
<g>
<title>java.lang.Object[] (343 samples, 0.05%)</title><rect x="86.3" y="723.0" width="0.5" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="89.3" y="734.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (85,226 samples, 11.88%)</title><rect x="86.8" y="739.0" width="140.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="89.8" y="750.0">java/util/Priority..</text>
</g>
<g>
<title>java/util/PriorityQueue.offer (85,226 samples, 11.88%)</title><rect x="86.8" y="723.0" width="140.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="89.8" y="734.0">java/util/Priority..</text>
</g>
<g>
<title>java/util/PriorityQueue.grow (2,072 samples, 0.29%)</title><rect x="86.8" y="707.0" width="3.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="89.8" y="718.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2,072 samples, 0.29%)</title><rect x="86.8" y="691.0" width="3.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="89.8" y="702.0"></text>
</g>
<g>
<title>java.lang.Object[] (2,072 samples, 0.29%)</title><rect x="86.8" y="675.0" width="3.4" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="89.8" y="686.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (83,154 samples, 11.59%)</title><rect x="90.2" y="707.0" width="136.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="93.2" y="718.0">java/util/Priorit..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (83,154 samples, 11.59%)</title><rect x="90.2" y="691.0" width="136.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="93.2" y="702.0">java/util/Priorit..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (83,154 samples, 11.59%)</title><rect x="90.2" y="675.0" width="136.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="93.2" y="686.0">com/google/common..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (83,154 samples, 11.59%)</title><rect x="90.2" y="659.0" width="136.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="93.2" y="670.0">com/google/common..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (63,539 samples, 8.86%)</title><rect x="90.2" y="643.0" width="104.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="93.2" y="654.0">com/google/c..</text>
</g>
<g>
<title>ru/mail/polis/dao/valaubr/SSTable$1.next (63,539 samples, 8.86%)</title><rect x="90.2" y="627.0" width="104.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="93.2" y="638.0">ru/mail/poli..</text>
</g>
<g>
<title>ru/mail/polis/dao/valaubr/SSTable$1.next (63,539 samples, 8.86%)</title><rect x="90.2" y="611.0" width="104.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="93.2" y="622.0">ru/mail/poli..</text>
</g>
<g>
<title>ru/mail/polis/dao/valaubr/SSTable.getCell (63,539 samples, 8.86%)</title><rect x="90.2" y="595.0" width="104.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="93.2" y="606.0">ru/mail/poli..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (24,678 samples, 3.44%)</title><rect x="90.2" y="579.0" width="40.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="93.2" y="590.0">jav..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (16,417 samples, 2.29%)</title><rect x="90.2" y="563.0" width="27.0" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="93.2" y="574.0">j..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (8,261 samples, 1.15%)</title><rect x="117.2" y="563.0" width="13.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="120.2" y="574.0"></text>
</g>
<g>
<title>byte[] (8,261 samples, 1.15%)</title><rect x="117.2" y="547.0" width="13.6" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="120.2" y="558.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.valaubr.Cell (2,699 samples, 0.38%)</title><rect x="130.8" y="579.0" width="4.5" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="133.8" y="590.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.valaubr.Value (2,793 samples, 0.39%)</title><rect x="135.3" y="579.0" width="4.5" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="138.3" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/valaubr/SSTable.getKey (25,158 samples, 3.51%)</title><rect x="139.8" y="579.0" width="41.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="142.8" y="590.0">ru/..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (17,094 samples, 2.38%)</title><rect x="139.8" y="563.0" width="28.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="142.8" y="574.0">ja..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (10,886 samples, 1.52%)</title><rect x="139.8" y="547.0" width="18.0" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="142.8" y="558.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (6,208 samples, 0.87%)</title><rect x="157.8" y="547.0" width="10.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="160.8" y="558.0"></text>
</g>
<g>
<title>byte[] (6,208 samples, 0.87%)</title><rect x="157.8" y="531.0" width="10.2" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="160.8" y="542.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/valaubr/SSTable.getOffset (8,064 samples, 1.12%)</title><rect x="168.0" y="563.0" width="13.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="171.0" y="574.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (8,064 samples, 1.12%)</title><rect x="168.0" y="547.0" width="13.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="171.0" y="558.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (5,295 samples, 0.74%)</title><rect x="168.0" y="531.0" width="8.7" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="171.0" y="542.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2,769 samples, 0.39%)</title><rect x="176.7" y="531.0" width="4.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="179.7" y="542.0"></text>
</g>
<g>
<title>byte[] (2,769 samples, 0.39%)</title><rect x="176.7" y="515.0" width="4.5" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="179.7" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/valaubr/SSTable.getOffset (8,211 samples, 1.14%)</title><rect x="181.2" y="579.0" width="13.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="184.2" y="590.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (8,211 samples, 1.14%)</title><rect x="181.2" y="563.0" width="13.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="184.2" y="574.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (5,393 samples, 0.75%)</title><rect x="181.2" y="547.0" width="8.9" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="184.2" y="558.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2,818 samples, 0.39%)</title><rect x="190.1" y="547.0" width="4.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="193.1" y="558.0"></text>
</g>
<g>
<title>byte[] (2,818 samples, 0.39%)</title><rect x="190.1" y="531.0" width="4.6" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="193.1" y="542.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$123/1128211044.compare (19,615 samples, 2.73%)</title><rect x="194.7" y="643.0" width="32.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="197.7" y="654.0">ja..</text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (19,615 samples, 2.73%)</title><rect x="194.7" y="627.0" width="32.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="197.7" y="638.0">ja..</text>
</g>
<g>
<title>java/util/Comparator$$Lambda$121/245356113.compare (19,615 samples, 2.73%)</title><rect x="194.7" y="611.0" width="32.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="197.7" y="622.0">ja..</text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (19,615 samples, 2.73%)</title><rect x="194.7" y="595.0" width="32.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="197.7" y="606.0">ja..</text>
</g>
<g>
<title>ru/mail/polis/dao/valaubr/Cell$$Lambda$120/2095215314.apply (19,615 samples, 2.73%)</title><rect x="194.7" y="579.0" width="32.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="197.7" y="590.0">ru..</text>
</g>
<g>
<title>ru/mail/polis/dao/valaubr/Cell.getKey (19,615 samples, 2.73%)</title><rect x="194.7" y="563.0" width="32.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="197.7" y="574.0">ru..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (19,615 samples, 2.73%)</title><rect x="194.7" y="547.0" width="32.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="197.7" y="558.0">ja..</text>
</g>
<g>
<title>java.nio.HeapByteBufferR (19,615 samples, 2.73%)</title><rect x="194.7" y="531.0" width="32.3" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="197.7" y="542.0">ja..</text>
</g>
<g>
<title>java.util.ArrayList (437 samples, 0.06%)</title><rect x="227.0" y="771.0" width="0.7" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="230.0" y="782.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (287,827 samples, 40.12%)</title><rect x="227.7" y="771.0" width="473.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="230.7" y="782.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$Values.iterator (619 samples, 0.09%)</title><rect x="227.7" y="755.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="230.7" y="766.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapValueIterator (619 samples, 0.09%)</title><rect x="227.7" y="739.0" width="1.0" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="230.7" y="750.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/valaubr/LsmDAO$$Lambda$134/108010129.accept (287,208 samples, 40.04%)</title><rect x="228.7" y="755.0" width="472.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="231.7" y="766.0">ru/mail/polis/dao/valaubr/LsmDAO$$Lambda$134/108010129.accept</text>
</g>
<g>
<title>ru/mail/polis/dao/valaubr/LsmDAO.lambda$cellIterator$4 (287,208 samples, 40.04%)</title><rect x="228.7" y="739.0" width="472.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="231.7" y="750.0">ru/mail/polis/dao/valaubr/LsmDAO.lambda$cellIterator$4</text>
</g>
<g>
<title>ru/mail/polis/dao/valaubr/SSTable.iterator (287,208 samples, 40.04%)</title><rect x="228.7" y="723.0" width="472.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="231.7" y="734.0">ru/mail/polis/dao/valaubr/SSTable.iterator</text>
</g>
<g>
<title>ru.mail.polis.dao.valaubr.SSTable$1 (2,740 samples, 0.38%)</title><rect x="228.7" y="707.0" width="4.5" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="231.7" y="718.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/valaubr/SSTable$1.&lt;init&gt; (284,468 samples, 39.65%)</title><rect x="233.2" y="707.0" width="468.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="236.2" y="718.0">ru/mail/polis/dao/valaubr/SSTable$1.&lt;init&gt;</text>
</g>
<g>
<title>ru/mail/polis/dao/valaubr/SSTable.getPosition (284,468 samples, 39.65%)</title><rect x="233.2" y="691.0" width="468.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="236.2" y="702.0">ru/mail/polis/dao/valaubr/SSTable.getPosition</text>
</g>
<g>
<title>ru/mail/polis/dao/valaubr/SSTable.getKey (284,468 samples, 39.65%)</title><rect x="233.2" y="675.0" width="468.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="236.2" y="686.0">ru/mail/polis/dao/valaubr/SSTable.getKey</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (245,188 samples, 34.18%)</title><rect x="233.2" y="659.0" width="403.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="236.2" y="670.0">java/nio/ByteBuffer.allocate</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (156,634 samples, 21.83%)</title><rect x="233.2" y="643.0" width="257.7" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="236.2" y="654.0">java.nio.HeapByteBuffer</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (88,554 samples, 12.34%)</title><rect x="490.9" y="643.0" width="145.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="493.9" y="654.0">java/nio/HeapByteB..</text>
</g>
<g>
<title>byte[] (88,554 samples, 12.34%)</title><rect x="490.9" y="627.0" width="145.6" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="493.9" y="638.0">byte[]</text>
</g>
<g>
<title>ru/mail/polis/dao/valaubr/SSTable.getOffset (39,280 samples, 5.48%)</title><rect x="636.5" y="659.0" width="64.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="639.5" y="670.0">ru/mail..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (39,276 samples, 5.47%)</title><rect x="636.5" y="643.0" width="64.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="639.5" y="654.0">java/ni..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (39,276 samples, 5.47%)</title><rect x="636.5" y="627.0" width="64.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="639.5" y="638.0">java/ni..</text>
</g>
<g>
<title>byte[] (39,276 samples, 5.47%)</title><rect x="636.5" y="611.0" width="64.6" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="639.5" y="622.0">byte[]</text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (910 samples, 0.13%)</title><rect x="701.2" y="771.0" width="1.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="704.2" y="782.0"></text>
</g>
<g>
<title>java.lang.Object[] (910 samples, 0.13%)</title><rect x="701.2" y="755.0" width="1.5" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="704.2" y="766.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (21,375 samples, 2.98%)</title><rect x="702.7" y="771.0" width="35.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="705.7" y="782.0">ru/..</text>
</g>
<g>
<title>ru.mail.polis.dao.Iters$CollapseEqualsIterator (489 samples, 0.07%)</title><rect x="702.7" y="755.0" width="0.8" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="705.7" y="766.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (20,886 samples, 2.91%)</title><rect x="703.5" y="755.0" width="34.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="706.5" y="766.0">ru..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (20,886 samples, 2.91%)</title><rect x="703.5" y="739.0" width="34.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="706.5" y="750.0">co..</text>
</g>
<g>
<title>java/util/AbstractQueue.remove (6,124 samples, 0.85%)</title><rect x="703.5" y="723.0" width="10.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="706.5" y="734.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (6,124 samples, 0.85%)</title><rect x="703.5" y="707.0" width="10.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="706.5" y="718.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (6,124 samples, 0.85%)</title><rect x="703.5" y="691.0" width="10.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="706.5" y="702.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (6,124 samples, 0.85%)</title><rect x="703.5" y="675.0" width="10.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="706.5" y="686.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (6,124 samples, 0.85%)</title><rect x="703.5" y="659.0" width="10.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="706.5" y="670.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$123/1128211044.compare (6,124 samples, 0.85%)</title><rect x="703.5" y="643.0" width="10.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="706.5" y="654.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (6,124 samples, 0.85%)</title><rect x="703.5" y="627.0" width="10.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="706.5" y="638.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$121/245356113.compare (6,124 samples, 0.85%)</title><rect x="703.5" y="611.0" width="10.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="706.5" y="622.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (6,124 samples, 0.85%)</title><rect x="703.5" y="595.0" width="10.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="706.5" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/valaubr/Cell$$Lambda$120/2095215314.apply (6,124 samples, 0.85%)</title><rect x="703.5" y="579.0" width="10.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="706.5" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/valaubr/Cell.getKey (6,124 samples, 0.85%)</title><rect x="703.5" y="563.0" width="10.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="706.5" y="574.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (6,124 samples, 0.85%)</title><rect x="703.5" y="547.0" width="10.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="706.5" y="558.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (6,124 samples, 0.85%)</title><rect x="703.5" y="531.0" width="10.0" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="706.5" y="542.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (14,762 samples, 2.06%)</title><rect x="713.5" y="723.0" width="24.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="716.5" y="734.0">j..</text>
</g>
<g>
<title>java/util/PriorityQueue.offer (14,762 samples, 2.06%)</title><rect x="713.5" y="707.0" width="24.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="716.5" y="718.0">j..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (14,762 samples, 2.06%)</title><rect x="713.5" y="691.0" width="24.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="716.5" y="702.0">j..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (14,762 samples, 2.06%)</title><rect x="713.5" y="675.0" width="24.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="716.5" y="686.0">j..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (14,762 samples, 2.06%)</title><rect x="713.5" y="659.0" width="24.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="716.5" y="670.0">c..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (14,762 samples, 2.06%)</title><rect x="713.5" y="643.0" width="24.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="716.5" y="654.0">c..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (10,736 samples, 1.50%)</title><rect x="713.5" y="627.0" width="17.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="716.5" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/valaubr/SSTable$1.next (10,736 samples, 1.50%)</title><rect x="713.5" y="611.0" width="17.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="716.5" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/valaubr/SSTable$1.next (10,736 samples, 1.50%)</title><rect x="713.5" y="595.0" width="17.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="716.5" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/valaubr/SSTable.getCell (10,736 samples, 1.50%)</title><rect x="713.5" y="579.0" width="17.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="716.5" y="590.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (4,142 samples, 0.58%)</title><rect x="713.5" y="563.0" width="6.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="716.5" y="574.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (2,691 samples, 0.38%)</title><rect x="713.5" y="547.0" width="4.5" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="716.5" y="558.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1,451 samples, 0.20%)</title><rect x="718.0" y="547.0" width="2.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="721.0" y="558.0"></text>
</g>
<g>
<title>byte[] (1,451 samples, 0.20%)</title><rect x="718.0" y="531.0" width="2.3" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="721.0" y="542.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.valaubr.Cell (510 samples, 0.07%)</title><rect x="720.3" y="563.0" width="0.9" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="723.3" y="574.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.valaubr.Value (424 samples, 0.06%)</title><rect x="721.2" y="563.0" width="0.7" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="724.2" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/valaubr/SSTable.getKey (4,298 samples, 0.60%)</title><rect x="721.9" y="563.0" width="7.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="724.9" y="574.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (2,906 samples, 0.41%)</title><rect x="721.9" y="547.0" width="4.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="724.9" y="558.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (1,798 samples, 0.25%)</title><rect x="721.9" y="531.0" width="2.9" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="724.9" y="542.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1,108 samples, 0.15%)</title><rect x="724.8" y="531.0" width="1.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="727.8" y="542.0"></text>
</g>
<g>
<title>byte[] (1,108 samples, 0.15%)</title><rect x="724.8" y="515.0" width="1.9" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="727.8" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/valaubr/SSTable.getOffset (1,392 samples, 0.19%)</title><rect x="726.7" y="547.0" width="2.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="729.7" y="558.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1,392 samples, 0.19%)</title><rect x="726.7" y="531.0" width="2.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="729.7" y="542.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (929 samples, 0.13%)</title><rect x="726.7" y="515.0" width="1.5" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="729.7" y="526.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (463 samples, 0.06%)</title><rect x="728.2" y="515.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="731.2" y="526.0"></text>
</g>
<g>
<title>byte[] (463 samples, 0.06%)</title><rect x="728.2" y="499.0" width="0.7" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="731.2" y="510.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/valaubr/SSTable.getOffset (1,362 samples, 0.19%)</title><rect x="728.9" y="563.0" width="2.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="731.9" y="574.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1,362 samples, 0.19%)</title><rect x="728.9" y="547.0" width="2.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="731.9" y="558.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (899 samples, 0.13%)</title><rect x="728.9" y="531.0" width="1.5" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="731.9" y="542.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (463 samples, 0.06%)</title><rect x="730.4" y="531.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="733.4" y="542.0"></text>
</g>
<g>
<title>byte[] (463 samples, 0.06%)</title><rect x="730.4" y="515.0" width="0.8" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="733.4" y="526.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$123/1128211044.compare (4,026 samples, 0.56%)</title><rect x="731.2" y="627.0" width="6.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="734.2" y="638.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (4,026 samples, 0.56%)</title><rect x="731.2" y="611.0" width="6.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="734.2" y="622.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$121/245356113.compare (4,026 samples, 0.56%)</title><rect x="731.2" y="595.0" width="6.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="734.2" y="606.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (4,026 samples, 0.56%)</title><rect x="731.2" y="579.0" width="6.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="734.2" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/valaubr/Cell$$Lambda$120/2095215314.apply (4,026 samples, 0.56%)</title><rect x="731.2" y="563.0" width="6.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="734.2" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/valaubr/Cell.getKey (4,026 samples, 0.56%)</title><rect x="731.2" y="547.0" width="6.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="734.2" y="558.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (4,026 samples, 0.56%)</title><rect x="731.2" y="531.0" width="6.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="734.2" y="542.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (4,026 samples, 0.56%)</title><rect x="731.2" y="515.0" width="6.6" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="734.2" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/valaubr/TablesPool.iterator (15,139 samples, 2.11%)</title><rect x="737.8" y="771.0" width="24.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="740.8" y="782.0">r..</text>
</g>
<g>
<title>com/google/common/collect/Iterators.filter (616 samples, 0.09%)</title><rect x="737.8" y="755.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="740.8" y="766.0"></text>
</g>
<g>
<title>com.google.common.collect.Iterators$5 (616 samples, 0.09%)</title><rect x="737.8" y="739.0" width="1.0" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="740.8" y="750.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (6,114 samples, 0.85%)</title><rect x="738.8" y="755.0" width="10.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="741.8" y="766.0"></text>
</g>
<g>
<title>com.google.common.collect.Iterators$MergingIterator (328 samples, 0.05%)</title><rect x="738.8" y="739.0" width="0.6" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="741.8" y="750.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (5,786 samples, 0.81%)</title><rect x="739.4" y="739.0" width="9.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="742.4" y="750.0"></text>
</g>
<g>
<title>com.google.common.collect.Iterators$MergingIterator$1 (456 samples, 0.06%)</title><rect x="739.4" y="723.0" width="0.7" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="742.4" y="734.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators.peekingIterator (478 samples, 0.07%)</title><rect x="740.1" y="723.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="743.1" y="734.0"></text>
</g>
<g>
<title>com.google.common.collect.Iterators$PeekingImpl (478 samples, 0.07%)</title><rect x="740.1" y="707.0" width="0.8" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="743.1" y="718.0"></text>
</g>
<g>
<title>java.util.PriorityQueue (607 samples, 0.08%)</title><rect x="740.9" y="723.0" width="1.0" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="743.9" y="734.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.&lt;init&gt; (442 samples, 0.06%)</title><rect x="741.9" y="723.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="744.9" y="734.0"></text>
</g>
<g>
<title>java.lang.Object[] (442 samples, 0.06%)</title><rect x="741.9" y="707.0" width="0.7" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="744.9" y="718.0"></text>
</g>
<g>
<title>java/util/Spliterators$1Adapter.hasNext (3,803 samples, 0.53%)</title><rect x="742.6" y="723.0" width="6.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="745.6" y="734.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.tryAdvance (3,803 samples, 0.53%)</title><rect x="742.6" y="707.0" width="6.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="745.6" y="718.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.doAdvance (3,803 samples, 0.53%)</title><rect x="742.6" y="691.0" width="6.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="745.6" y="702.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.fillBuffer (453 samples, 0.06%)</title><rect x="742.6" y="675.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="745.6" y="686.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator$$Lambda$119/1873832746.getAsBoolean (453 samples, 0.06%)</title><rect x="742.6" y="659.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="745.6" y="670.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.lambda$initPartialTraversalState$0 (453 samples, 0.06%)</title><rect x="742.6" y="643.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="745.6" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.tryAdvance (453 samples, 0.06%)</title><rect x="742.6" y="627.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="745.6" y="638.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (453 samples, 0.06%)</title><rect x="742.6" y="611.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="745.6" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/valaubr/MemTable$$Lambda$116/1241406125.apply (453 samples, 0.06%)</title><rect x="742.6" y="595.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="745.6" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/valaubr/MemTable.lambda$iterator$0 (453 samples, 0.06%)</title><rect x="742.6" y="579.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="745.6" y="590.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.valaubr.Cell (453 samples, 0.06%)</title><rect x="742.6" y="563.0" width="0.8" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="745.6" y="574.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.initPartialTraversalState (3,350 samples, 0.47%)</title><rect x="743.4" y="675.0" width="5.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="746.4" y="686.0"></text>
</g>
<g>
<title>java.util.stream.SpinedBuffer (771 samples, 0.11%)</title><rect x="743.4" y="659.0" width="1.2" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="746.4" y="670.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (612 samples, 0.09%)</title><rect x="744.6" y="659.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="747.6" y="670.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (612 samples, 0.09%)</title><rect x="744.6" y="643.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="747.6" y="654.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator$$Lambda$118/32402475.get$Lambda (284 samples, 0.04%)</title><rect x="744.6" y="627.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="747.6" y="638.0"></text>
</g>
<g>
<title>java.util.stream.StreamSpliterators$WrappingSpliterator$$Lambda$118 (284 samples, 0.04%)</title><rect x="744.6" y="611.0" width="0.5" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="747.6" y="622.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator$$Lambda$119/1873832746.get$Lambda (328 samples, 0.05%)</title><rect x="745.1" y="627.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="748.1" y="638.0"></text>
</g>
<g>
<title>java.util.stream.StreamSpliterators$WrappingSpliterator$$Lambda$119 (328 samples, 0.05%)</title><rect x="745.1" y="611.0" width="0.5" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="748.1" y="622.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (424 samples, 0.06%)</title><rect x="745.6" y="659.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="748.6" y="670.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3.opWrapSink (424 samples, 0.06%)</title><rect x="745.6" y="643.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="748.6" y="654.0"></text>
</g>
<g>
<title>java.util.stream.ReferencePipeline$3$1 (424 samples, 0.06%)</title><rect x="745.6" y="627.0" width="0.7" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="748.6" y="638.0"></text>
</g>
<g>
<title>java/util/stream/SpinedBuffer.&lt;init&gt; (1,543 samples, 0.22%)</title><rect x="746.3" y="659.0" width="2.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="749.3" y="670.0"></text>
</g>
<g>
<title>java.lang.Object[] (1,543 samples, 0.22%)</title><rect x="746.3" y="643.0" width="2.6" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="749.3" y="654.0"></text>
</g>
<g>
<title>java.util.ArrayList (484 samples, 0.07%)</title><rect x="748.9" y="755.0" width="0.8" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="751.9" y="766.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (445 samples, 0.06%)</title><rect x="749.7" y="755.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="752.7" y="766.0"></text>
</g>
<g>
<title>java.lang.Object[] (445 samples, 0.06%)</title><rect x="749.7" y="739.0" width="0.7" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="752.7" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$Values.iterator (576 samples, 0.08%)</title><rect x="750.4" y="755.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="753.4" y="766.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$ValueIterator (576 samples, 0.08%)</title><rect x="750.4" y="739.0" width="1.0" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="753.4" y="750.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (905 samples, 0.13%)</title><rect x="751.4" y="755.0" width="1.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="754.4" y="766.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.Iters$CollapseEqualsIterator (473 samples, 0.07%)</title><rect x="751.4" y="739.0" width="0.7" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="754.4" y="750.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (432 samples, 0.06%)</title><rect x="752.1" y="739.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="755.1" y="750.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (432 samples, 0.06%)</title><rect x="752.1" y="723.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="755.1" y="734.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.hasNext (432 samples, 0.06%)</title><rect x="752.1" y="707.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="755.1" y="718.0"></text>
</g>
<g>
<title>java/util/Spliterators$1Adapter.hasNext (432 samples, 0.06%)</title><rect x="752.1" y="691.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="755.1" y="702.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.tryAdvance (432 samples, 0.06%)</title><rect x="752.1" y="675.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="755.1" y="686.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.doAdvance (432 samples, 0.06%)</title><rect x="752.1" y="659.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="755.1" y="670.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.fillBuffer (432 samples, 0.06%)</title><rect x="752.1" y="643.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="755.1" y="654.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator$$Lambda$119/1873832746.getAsBoolean (432 samples, 0.06%)</title><rect x="752.1" y="627.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="755.1" y="638.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.lambda$initPartialTraversalState$0 (432 samples, 0.06%)</title><rect x="752.1" y="611.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="755.1" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.tryAdvance (432 samples, 0.06%)</title><rect x="752.1" y="595.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="755.1" y="606.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (432 samples, 0.06%)</title><rect x="752.1" y="579.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="755.1" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/valaubr/MemTable$$Lambda$116/1241406125.apply (432 samples, 0.06%)</title><rect x="752.1" y="563.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="755.1" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/valaubr/MemTable.lambda$iterator$0 (432 samples, 0.06%)</title><rect x="752.1" y="547.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="755.1" y="558.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.valaubr.Cell (432 samples, 0.06%)</title><rect x="752.1" y="531.0" width="0.7" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="755.1" y="542.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/valaubr/MemTable.iterator (5,995 samples, 0.84%)</title><rect x="752.8" y="755.0" width="9.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="755.8" y="766.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1,724 samples, 0.24%)</title><rect x="752.8" y="739.0" width="2.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="755.8" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$EntrySet.spliterator (652 samples, 0.09%)</title><rect x="752.8" y="723.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="755.8" y="734.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapEntryIterator (652 samples, 0.09%)</title><rect x="752.8" y="707.0" width="1.1" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="755.8" y="718.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1,072 samples, 0.15%)</title><rect x="753.9" y="723.0" width="1.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="756.9" y="734.0"></text>
</g>
<g>
<title>java.util.stream.ReferencePipeline$Head (1,072 samples, 0.15%)</title><rect x="753.9" y="707.0" width="1.8" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="756.9" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.entrySet (294 samples, 0.04%)</title><rect x="755.7" y="739.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="758.7" y="750.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$EntrySet (294 samples, 0.04%)</title><rect x="755.7" y="723.0" width="0.5" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="758.7" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (922 samples, 0.13%)</title><rect x="756.2" y="739.0" width="1.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="759.2" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (922 samples, 0.13%)</title><rect x="756.2" y="723.0" width="1.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="759.2" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (922 samples, 0.13%)</title><rect x="756.2" y="707.0" width="1.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="759.2" y="718.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$SubMap (922 samples, 0.13%)</title><rect x="756.2" y="691.0" width="1.5" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="759.2" y="702.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.iterator (1,760 samples, 0.25%)</title><rect x="757.7" y="739.0" width="2.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="760.7" y="750.0"></text>
</g>
<g>
<title>java/util/Spliterators.iterator (483 samples, 0.07%)</title><rect x="757.7" y="723.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="760.7" y="734.0"></text>
</g>
<g>
<title>java.util.Spliterators$1Adapter (483 samples, 0.07%)</title><rect x="757.7" y="707.0" width="0.8" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="760.7" y="718.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.spliterator (1,277 samples, 0.18%)</title><rect x="758.5" y="723.0" width="2.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="761.5" y="734.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (338 samples, 0.05%)</title><rect x="758.5" y="707.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="761.5" y="718.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (338 samples, 0.05%)</title><rect x="758.5" y="691.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="761.5" y="702.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline$$Lambda$117/843319054.get$Lambda (338 samples, 0.05%)</title><rect x="758.5" y="675.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="761.5" y="686.0"></text>
</g>
<g>
<title>java.util.stream.AbstractPipeline$$Lambda$117 (338 samples, 0.05%)</title><rect x="758.5" y="659.0" width="0.5" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="761.5" y="670.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.wrap (939 samples, 0.13%)</title><rect x="759.0" y="707.0" width="1.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="762.0" y="718.0"></text>
</g>
<g>
<title>java.util.stream.StreamSpliterators$WrappingSpliterator (939 samples, 0.13%)</title><rect x="759.0" y="691.0" width="1.6" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="762.0" y="702.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.map (1,295 samples, 0.18%)</title><rect x="760.6" y="739.0" width="2.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="763.6" y="750.0"></text>
</g>
<g>
<title>java.util.stream.ReferencePipeline$3 (1,295 samples, 0.18%)</title><rect x="760.6" y="723.0" width="2.1" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="763.6" y="734.0"></text>
</g>
<g>
<title>ru/mail/polis/service/valaubr/HttpService.converterFromByteBuffer (404 samples, 0.06%)</title><rect x="762.7" y="819.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="765.7" y="830.0"></text>
</g>
<g>
<title>byte[] (404 samples, 0.06%)</title><rect x="762.7" y="803.0" width="0.7" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="765.7" y="814.0"></text>
</g>
<g>
<title>ru/mail/polis/service/valaubr/HttpService.proxy (95,210 samples, 13.27%)</title><rect x="763.4" y="819.0" width="156.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="766.4" y="830.0">ru/mail/polis/servic..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (1,144 samples, 0.16%)</title><rect x="763.4" y="803.0" width="1.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="766.4" y="814.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/416153648.invoke (1,144 samples, 0.16%)</title><rect x="763.4" y="787.0" width="1.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="766.4" y="798.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1,144 samples, 0.16%)</title><rect x="763.4" y="771.0" width="1.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="766.4" y="782.0"></text>
</g>
<g>
<title>java/lang/StringConcatHelper.newString (352 samples, 0.05%)</title><rect x="763.4" y="755.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="766.4" y="766.0"></text>
</g>
<g>
<title>java.lang.String (352 samples, 0.05%)</title><rect x="763.4" y="739.0" width="0.6" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="766.4" y="750.0"></text>
</g>
<g>
<title>java/lang/invoke/StringConcatFactory$MethodHandleInlineCopyStrategy.newArray (792 samples, 0.11%)</title><rect x="764.0" y="755.0" width="1.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="767.0" y="766.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.allocateUninitializedArray (792 samples, 0.11%)</title><rect x="764.0" y="739.0" width="1.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="767.0" y="750.0"></text>
</g>
<g>
<title>byte[] (792 samples, 0.11%)</title><rect x="764.0" y="723.0" width="1.3" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="767.0" y="734.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (91,274 samples, 12.72%)</title><rect x="765.3" y="803.0" width="150.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="768.3" y="814.0">one/nio/http/HttpCl..</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (91,274 samples, 12.72%)</title><rect x="765.3" y="787.0" width="150.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="768.3" y="798.0">one/nio/http/HttpCl..</text>
</g>
<g>
<title>one.nio.http.HttpClient$ResponseReader (584 samples, 0.08%)</title><rect x="765.3" y="771.0" width="0.9" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="768.3" y="782.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.&lt;init&gt; (81,526 samples, 11.36%)</title><rect x="766.2" y="771.0" width="134.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="769.2" y="782.0">one/nio/http/Http..</text>
</g>
<g>
<title>byte[] (5,614 samples, 0.78%)</title><rect x="766.2" y="755.0" width="9.3" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="769.2" y="766.0"></text>
</g>
<g>
<title>byte[] (75,912 samples, 10.58%)</title><rect x="775.5" y="755.0" width="124.8" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="778.5" y="766.0">byte[]</text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readResponse (5,954 samples, 0.83%)</title><rect x="900.3" y="771.0" width="9.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="903.3" y="782.0"></text>
</g>
<g>
<title>byte[] (480 samples, 0.07%)</title><rect x="900.3" y="755.0" width="0.8" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="903.3" y="766.0"></text>
</g>
<g>
<title>java/lang/String.substring (236 samples, 0.03%)</title><rect x="901.1" y="755.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="904.1" y="766.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (236 samples, 0.03%)</title><rect x="901.1" y="739.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="904.1" y="750.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readLine (4,122 samples, 0.57%)</title><rect x="901.7" y="755.0" width="6.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="904.7" y="766.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (4,122 samples, 0.57%)</title><rect x="901.7" y="739.0" width="6.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="904.7" y="750.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (4,122 samples, 0.57%)</title><rect x="901.7" y="723.0" width="6.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="904.7" y="734.0"></text>
</g>
<g>
<title>char[] (2,179 samples, 0.30%)</title><rect x="901.7" y="707.0" width="3.6" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="904.7" y="718.0"></text>
</g>
<g>
<title>java.lang.String (988 samples, 0.14%)</title><rect x="905.3" y="707.0" width="1.6" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="908.3" y="718.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (955 samples, 0.13%)</title><rect x="906.9" y="707.0" width="1.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="909.9" y="718.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (955 samples, 0.13%)</title><rect x="906.9" y="691.0" width="1.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="909.9" y="702.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (955 samples, 0.13%)</title><rect x="906.9" y="675.0" width="1.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="909.9" y="686.0"></text>
</g>
<g>
<title>byte[] (955 samples, 0.13%)</title><rect x="906.9" y="659.0" width="1.6" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="909.9" y="670.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (871 samples, 0.12%)</title><rect x="908.7" y="755.0" width="1.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="911.7" y="766.0"></text>
</g>
<g>
<title>java/lang/String.substring (871 samples, 0.12%)</title><rect x="908.7" y="739.0" width="1.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="911.7" y="750.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (871 samples, 0.12%)</title><rect x="908.7" y="723.0" width="1.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="911.7" y="734.0"></text>
</g>
<g>
<title>java.lang.String (441 samples, 0.06%)</title><rect x="908.7" y="707.0" width="0.7" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="911.7" y="718.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (430 samples, 0.06%)</title><rect x="909.4" y="707.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="912.4" y="718.0"></text>
</g>
<g>
<title>byte[] (430 samples, 0.06%)</title><rect x="909.4" y="691.0" width="0.7" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="912.4" y="702.0"></text>
</g>
<g>
<title>one/nio/http/Request.toBytes (1,778 samples, 0.25%)</title><rect x="910.1" y="771.0" width="2.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="913.1" y="782.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (1,778 samples, 0.25%)</title><rect x="910.1" y="755.0" width="2.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="913.1" y="766.0"></text>
</g>
<g>
<title>byte[] (1,778 samples, 0.25%)</title><rect x="910.1" y="739.0" width="2.9" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="913.1" y="750.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (1,030 samples, 0.14%)</title><rect x="913.0" y="771.0" width="1.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="916.0" y="782.0"></text>
</g>
<g>
<title>java/lang/String.substring (1,030 samples, 0.14%)</title><rect x="913.0" y="755.0" width="1.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="916.0" y="766.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1,030 samples, 0.14%)</title><rect x="913.0" y="739.0" width="1.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="916.0" y="750.0"></text>
</g>
<g>
<title>java.lang.String (458 samples, 0.06%)</title><rect x="913.0" y="723.0" width="0.8" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="916.0" y="734.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (572 samples, 0.08%)</title><rect x="913.8" y="723.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="916.8" y="734.0"></text>
</g>
<g>
<title>byte[] (572 samples, 0.08%)</title><rect x="913.8" y="707.0" width="0.9" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="916.8" y="718.0"></text>
</g>
<g>
<title>one/nio/pool/Pool.returnObject (402 samples, 0.06%)</title><rect x="914.7" y="771.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="917.7" y="782.0"></text>
</g>
<g>
<title>java/util/LinkedList.addFirst (402 samples, 0.06%)</title><rect x="914.7" y="755.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="917.7" y="766.0"></text>
</g>
<g>
<title>java/util/LinkedList.linkFirst (402 samples, 0.06%)</title><rect x="914.7" y="739.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="917.7" y="750.0"></text>
</g>
<g>
<title>java.util.LinkedList$Node (402 samples, 0.06%)</title><rect x="914.7" y="723.0" width="0.7" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="917.7" y="734.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (2,792 samples, 0.39%)</title><rect x="915.4" y="803.0" width="4.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="918.4" y="814.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (2,792 samples, 0.39%)</title><rect x="915.4" y="787.0" width="4.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="918.4" y="798.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (2,071 samples, 0.29%)</title><rect x="915.4" y="771.0" width="3.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="918.4" y="782.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (2,071 samples, 0.29%)</title><rect x="915.4" y="755.0" width="3.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="918.4" y="766.0"></text>
</g>
<g>
<title>byte[] (2,071 samples, 0.29%)</title><rect x="915.4" y="739.0" width="3.4" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="918.4" y="750.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (721 samples, 0.10%)</title><rect x="918.8" y="771.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="921.8" y="782.0"></text>
</g>
<g>
<title>one.nio.net.Session$ArrayQueueItem (721 samples, 0.10%)</title><rect x="918.8" y="755.0" width="1.2" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="921.8" y="766.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler.run (30,220 samples, 4.21%)</title><rect x="920.0" y="851.0" width="49.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="923.0" y="862.0">sun/r..</text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (30,220 samples, 4.21%)</title><rect x="920.0" y="835.0" width="49.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="923.0" y="846.0">java/..</text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler$$Lambda$98/1319750932.run (30,220 samples, 4.21%)</title><rect x="920.0" y="819.0" width="49.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="923.0" y="830.0">sun/r..</text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler.lambda$run$0 (30,220 samples, 4.21%)</title><rect x="920.0" y="803.0" width="49.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="923.0" y="814.0">sun/r..</text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler.run0 (30,220 samples, 4.21%)</title><rect x="920.0" y="787.0" width="49.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="923.0" y="798.0">sun/r..</text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport.handleMessages (30,220 samples, 4.21%)</title><rect x="920.0" y="771.0" width="49.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="923.0" y="782.0">sun/r..</text>
</g>
<g>
<title>java.io.DataOutputStream (482 samples, 0.07%)</title><rect x="920.0" y="755.0" width="0.8" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="923.0" y="766.0"></text>
</g>
<g>
<title>sun/rmi/transport/Transport.serviceCall (29,738 samples, 4.15%)</title><rect x="920.8" y="755.0" width="48.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="923.8" y="766.0">sun/..</text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (26,922 samples, 3.75%)</title><rect x="920.8" y="739.0" width="44.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="923.8" y="750.0">java..</text>
</g>
<g>
<title>sun/rmi/transport/Transport$1.run (26,922 samples, 3.75%)</title><rect x="920.8" y="723.0" width="44.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="923.8" y="734.0">sun/..</text>
</g>
<g>
<title>sun/rmi/transport/Transport$1.run (26,922 samples, 3.75%)</title><rect x="920.8" y="707.0" width="44.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="923.8" y="718.0">sun/..</text>
</g>
<g>
<title>sun/rmi/server/UnicastServerRef.dispatch (26,922 samples, 3.75%)</title><rect x="920.8" y="691.0" width="44.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="923.8" y="702.0">sun/..</text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (16,316 samples, 2.27%)</title><rect x="920.8" y="675.0" width="26.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="923.8" y="686.0">j..</text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (16,316 samples, 2.27%)</title><rect x="920.8" y="659.0" width="26.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="923.8" y="670.0">j..</text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor40.invoke (16,266 samples, 2.27%)</title><rect x="920.9" y="643.0" width="26.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="923.9" y="654.0">j..</text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.invoke (16,266 samples, 2.27%)</title><rect x="920.9" y="627.0" width="26.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="923.9" y="638.0">j..</text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.doPrivilegedOperation (15,029 samples, 2.09%)</title><rect x="920.9" y="611.0" width="24.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="923.9" y="622.0">j..</text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl$PrivilegedOperation.run (15,028 samples, 2.09%)</title><rect x="920.9" y="595.0" width="24.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="923.9" y="606.0">j..</text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.doOperation (15,028 samples, 2.09%)</title><rect x="920.9" y="579.0" width="24.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="923.9" y="590.0">j..</text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/JmxMBeanServer.invoke (15,028 samples, 2.09%)</title><rect x="920.9" y="563.0" width="24.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="923.9" y="574.0">c..</text>
</g>
<g>
<title>com/sun/jmx/interceptor/DefaultMBeanServerInterceptor.invoke (15,028 samples, 2.09%)</title><rect x="920.9" y="547.0" width="24.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="923.9" y="558.0">c..</text>
</g>
<g>
<title>javax/management/StandardMBean.invoke (15,028 samples, 2.09%)</title><rect x="920.9" y="531.0" width="24.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="923.9" y="542.0">j..</text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/MBeanSupport.invoke (15,028 samples, 2.09%)</title><rect x="920.9" y="515.0" width="24.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="923.9" y="526.0">c..</text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/PerInterface.invoke (15,028 samples, 2.09%)</title><rect x="920.9" y="499.0" width="24.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="923.9" y="510.0">c..</text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/MBeanIntrospector.invokeM (15,028 samples, 2.09%)</title><rect x="920.9" y="483.0" width="24.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="923.9" y="494.0">c..</text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/MXBeanIntrospector.invokeM2 (15,028 samples, 2.09%)</title><rect x="920.9" y="467.0" width="24.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="923.9" y="478.0">c..</text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/MXBeanIntrospector.invokeM2 (15,028 samples, 2.09%)</title><rect x="920.9" y="451.0" width="24.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="923.9" y="462.0">c..</text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/ConvertingMethod.invokeWithOpenReturn (15,028 samples, 2.09%)</title><rect x="920.9" y="435.0" width="24.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="923.9" y="446.0">c..</text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/ConvertingMethod.invokeWithOpenReturn (15,028 samples, 2.09%)</title><rect x="920.9" y="419.0" width="24.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="923.9" y="430.0">c..</text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$NonNullMXBeanMapping.toOpenValue (13,401 samples, 1.87%)</title><rect x="920.9" y="403.0" width="22.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="923.9" y="414.0">c..</text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$ArrayMapping.toNonNullOpenValue (13,401 samples, 1.87%)</title><rect x="920.9" y="387.0" width="22.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="923.9" y="398.0">c..</text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$NonNullMXBeanMapping.toOpenValue (13,312 samples, 1.86%)</title><rect x="920.9" y="371.0" width="21.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="923.9" y="382.0">c..</text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$CompositeMapping.toNonNullOpenValue (13,312 samples, 1.86%)</title><rect x="920.9" y="355.0" width="21.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="923.9" y="366.0">c..</text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$NonNullMXBeanMapping.toOpenValue (4,769 samples, 0.66%)</title><rect x="920.9" y="339.0" width="7.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="923.9" y="350.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$ArrayMapping.toNonNullOpenValue (4,047 samples, 0.56%)</title><rect x="920.9" y="323.0" width="6.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="923.9" y="334.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$NonNullMXBeanMapping.toOpenValue (3,702 samples, 0.52%)</title><rect x="920.9" y="307.0" width="6.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="923.9" y="318.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$CompositeMapping.toNonNullOpenValue (3,702 samples, 0.52%)</title><rect x="920.9" y="291.0" width="6.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="923.9" y="302.0"></text>
</g>
<g>
<title>javax/management/openmbean/CompositeDataSupport.&lt;init&gt; (2,167 samples, 0.30%)</title><rect x="921.1" y="275.0" width="3.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="924.1" y="286.0"></text>
</g>
<g>
<title>javax/management/openmbean/CompositeDataSupport.&lt;init&gt; (188 samples, 0.03%)</title><rect x="921.1" y="259.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="924.1" y="270.0"></text>
</g>
<g>
<title>javax/management/openmbean/CompositeDataSupport.makeMap (1,979 samples, 0.28%)</title><rect x="921.4" y="259.0" width="3.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="924.4" y="270.0"></text>
</g>
<g>
<title>java.util.TreeMap (258 samples, 0.04%)</title><rect x="921.4" y="243.0" width="0.4" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="924.4" y="254.0"></text>
</g>
<g>
<title>java/util/TreeMap.put (1,721 samples, 0.24%)</title><rect x="921.8" y="243.0" width="2.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="924.8" y="254.0"></text>
</g>
<g>
<title>java.util.TreeMap$Entry (1,721 samples, 0.24%)</title><rect x="921.8" y="227.0" width="2.9" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="924.8" y="238.0"></text>
</g>
<g>
<title>sun/reflect/misc/MethodUtil.invoke (1,396 samples, 0.19%)</title><rect x="924.7" y="275.0" width="2.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="927.7" y="286.0"></text>
</g>
<g>
<title>java.lang.Object[] (1,396 samples, 0.19%)</title><rect x="924.7" y="259.0" width="2.2" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="927.7" y="270.0"></text>
</g>
<g>
<title>java/lang/reflect/Array.newInstance (345 samples, 0.05%)</title><rect x="926.9" y="307.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="929.9" y="318.0"></text>
</g>
<g>
<title>javax.management.openmbean.CompositeData[] (345 samples, 0.05%)</title><rect x="926.9" y="291.0" width="0.6" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="929.9" y="302.0"></text>
</g>
<g>
<title>com/sun/jmx/mbeanserver/DefaultMXBeanMappingFactory$CompositeMapping.toNonNullOpenValue (722 samples, 0.10%)</title><rect x="927.5" y="323.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="930.5" y="334.0"></text>
</g>
<g>
<title>javax/management/openmbean/CompositeDataSupport.&lt;init&gt; (517 samples, 0.07%)</title><rect x="927.7" y="307.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="930.7" y="318.0"></text>
</g>
<g>
<title>javax/management/openmbean/CompositeDataSupport.&lt;init&gt; (186 samples, 0.03%)</title><rect x="927.7" y="291.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="930.7" y="302.0"></text>
</g>
<g>
<title>javax/management/openmbean/CompositeDataSupport.makeMap (331 samples, 0.05%)</title><rect x="928.0" y="291.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="931.0" y="302.0"></text>
</g>
<g>
<title>java/util/TreeMap.put (299 samples, 0.04%)</title><rect x="928.0" y="275.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="931.0" y="286.0"></text>
</g>
<g>
<title>java.util.TreeMap$Entry (299 samples, 0.04%)</title><rect x="928.0" y="259.0" width="0.5" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="931.0" y="270.0"></text>
</g>
<g>
<title>java.lang.Object[] (301 samples, 0.04%)</title><rect x="928.7" y="339.0" width="0.5" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="931.7" y="350.0"></text>
</g>
<g>
<title>java.lang.Object[] (161 samples, 0.02%)</title><rect x="929.2" y="339.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="932.2" y="350.0"></text>
</g>
<g>
<title>javax/management/openmbean/CompositeDataSupport.&lt;init&gt; (4,283 samples, 0.60%)</title><rect x="929.6" y="339.0" width="7.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="932.6" y="350.0"></text>
</g>
<g>
<title>javax/management/openmbean/CompositeDataSupport.&lt;init&gt; (512 samples, 0.07%)</title><rect x="929.6" y="323.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="932.6" y="334.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.iterator (183 samples, 0.03%)</title><rect x="929.6" y="307.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="932.6" y="318.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.&lt;init&gt; (183 samples, 0.03%)</title><rect x="929.6" y="291.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="932.6" y="302.0"></text>
</g>
<g>
<title>java/util/TreeMap$KeySet.iterator (183 samples, 0.03%)</title><rect x="929.6" y="275.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="932.6" y="286.0"></text>
</g>
<g>
<title>java/util/TreeMap.keyIterator (183 samples, 0.03%)</title><rect x="929.6" y="259.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="932.6" y="270.0"></text>
</g>
<g>
<title>java.util.TreeMap$KeyIterator (183 samples, 0.03%)</title><rect x="929.6" y="243.0" width="0.3" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="932.6" y="254.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableSet.equals (220 samples, 0.03%)</title><rect x="929.9" y="307.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="932.9" y="318.0"></text>
</g>
<g>
<title>java/util/AbstractSet.equals (220 samples, 0.03%)</title><rect x="929.9" y="291.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="932.9" y="302.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.containsAll (220 samples, 0.03%)</title><rect x="929.9" y="275.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="932.9" y="286.0"></text>
</g>
<g>
<title>java/util/TreeMap$KeySet.iterator (220 samples, 0.03%)</title><rect x="929.9" y="259.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="932.9" y="270.0"></text>
</g>
<g>
<title>java/util/TreeMap.keyIterator (220 samples, 0.03%)</title><rect x="929.9" y="243.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="932.9" y="254.0"></text>
</g>
<g>
<title>java.util.TreeMap$KeyIterator (220 samples, 0.03%)</title><rect x="929.9" y="227.0" width="0.4" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="932.9" y="238.0"></text>
</g>
<g>
<title>javax/management/openmbean/CompositeDataSupport.makeMap (3,771 samples, 0.53%)</title><rect x="930.4" y="323.0" width="6.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="933.4" y="334.0"></text>
</g>
<g>
<title>java.util.TreeMap (347 samples, 0.05%)</title><rect x="930.4" y="307.0" width="0.6" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="933.4" y="318.0"></text>
</g>
<g>
<title>java/util/TreeMap.put (3,424 samples, 0.48%)</title><rect x="931.0" y="307.0" width="5.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="934.0" y="318.0"></text>
</g>
<g>
<title>java.util.TreeMap$Entry (3,424 samples, 0.48%)</title><rect x="931.0" y="291.0" width="5.6" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="934.0" y="302.0"></text>
</g>
<g>
<title>sun/reflect/misc/MethodUtil.invoke (3,714 samples, 0.52%)</title><rect x="936.6" y="339.0" width="6.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="939.6" y="350.0"></text>
</g>
<g>
<title>java.lang.Object[] (3,479 samples, 0.48%)</title><rect x="936.6" y="323.0" width="5.8" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="939.6" y="334.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (235 samples, 0.03%)</title><rect x="942.4" y="323.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="945.4" y="334.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (235 samples, 0.03%)</title><rect x="942.4" y="307.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="945.4" y="318.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor3.invoke (235 samples, 0.03%)</title><rect x="942.4" y="291.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="945.4" y="302.0"></text>
</g>
<g>
<title>sun/reflect/misc/Trampoline.invoke (235 samples, 0.03%)</title><rect x="942.4" y="275.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="945.4" y="286.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (235 samples, 0.03%)</title><rect x="942.4" y="259.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="945.4" y="270.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (235 samples, 0.03%)</title><rect x="942.4" y="243.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="945.4" y="254.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor15.invoke (153 samples, 0.02%)</title><rect x="942.4" y="227.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="945.4" y="238.0"></text>
</g>
<g>
<title>java/lang/management/ThreadInfo.getStackTrace (153 samples, 0.02%)</title><rect x="942.4" y="211.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="945.4" y="222.0"></text>
</g>
<g>
<title>java.lang.StackTraceElement[] (153 samples, 0.02%)</title><rect x="942.4" y="195.0" width="0.3" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="945.4" y="206.0"></text>
</g>
<g>
<title>sun/reflect/misc/MethodUtil.invoke (1,627 samples, 0.23%)</title><rect x="942.9" y="403.0" width="2.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="945.9" y="414.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (1,626 samples, 0.23%)</title><rect x="942.9" y="387.0" width="2.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="945.9" y="398.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (1,626 samples, 0.23%)</title><rect x="942.9" y="371.0" width="2.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="945.9" y="382.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor3.invoke (1,626 samples, 0.23%)</title><rect x="942.9" y="355.0" width="2.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="945.9" y="366.0"></text>
</g>
<g>
<title>sun/reflect/misc/Trampoline.invoke (1,626 samples, 0.23%)</title><rect x="942.9" y="339.0" width="2.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="945.9" y="350.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (1,626 samples, 0.23%)</title><rect x="942.9" y="323.0" width="2.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="945.9" y="334.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (1,626 samples, 0.23%)</title><rect x="942.9" y="307.0" width="2.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="945.9" y="318.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor45.invoke (1,626 samples, 0.23%)</title><rect x="942.9" y="291.0" width="2.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="945.9" y="302.0"></text>
</g>
<g>
<title>sun/management/ThreadImpl.getThreadInfo (1,626 samples, 0.23%)</title><rect x="942.9" y="275.0" width="2.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="945.9" y="286.0"></text>
</g>
<g>
<title>sun/management/ThreadImpl.getThreadInfo1 (1,626 samples, 0.23%)</title><rect x="942.9" y="259.0" width="2.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="945.9" y="270.0"></text>
</g>
<g>
<title>java.lang.StackTraceElement (318 samples, 0.04%)</title><rect x="942.9" y="243.0" width="0.5" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="945.9" y="254.0"></text>
</g>
<g>
<title>java.lang.management.ThreadInfo (245 samples, 0.03%)</title><rect x="943.4" y="243.0" width="0.5" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="946.4" y="254.0"></text>
</g>
<g>
<title>java.lang.management.ThreadInfo (194 samples, 0.03%)</title><rect x="943.9" y="243.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="946.9" y="254.0"></text>
</g>
<g>
<title>java/lang/management/ThreadInfo.&lt;init&gt; (856 samples, 0.12%)</title><rect x="944.2" y="243.0" width="1.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="947.2" y="254.0"></text>
</g>
<g>
<title>java/lang/management/ThreadInfo.initialize (856 samples, 0.12%)</title><rect x="944.2" y="227.0" width="1.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="947.2" y="238.0"></text>
</g>
<g>
<title>java.lang.management.LockInfo (235 samples, 0.03%)</title><rect x="944.2" y="211.0" width="0.4" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="947.2" y="222.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (620 samples, 0.09%)</title><rect x="944.6" y="211.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="947.6" y="222.0"></text>
</g>
<g>
<title>java/lang/invoke/DelegatingMethodHandle$Holder.reinvoke_L (620 samples, 0.09%)</title><rect x="944.6" y="195.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="947.6" y="206.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/501187768.invoke (620 samples, 0.09%)</title><rect x="944.6" y="179.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="947.6" y="190.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (620 samples, 0.09%)</title><rect x="944.6" y="163.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="947.6" y="174.0"></text>
</g>
<g>
<title>java/lang/StringConcatHelper.newString (160 samples, 0.02%)</title><rect x="944.6" y="147.0" width="0.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="947.6" y="158.0"></text>
</g>
<g>
<title>java.lang.String (160 samples, 0.02%)</title><rect x="944.6" y="131.0" width="0.2" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="947.6" y="142.0"></text>
</g>
<g>
<title>java/lang/invoke/StringConcatFactory$MethodHandleInlineCopyStrategy.newArray (460 samples, 0.06%)</title><rect x="944.8" y="147.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="947.8" y="158.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.allocateUninitializedArray (460 samples, 0.06%)</title><rect x="944.8" y="131.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="947.8" y="142.0"></text>
</g>
<g>
<title>byte[] (351 samples, 0.05%)</title><rect x="944.8" y="115.0" width="0.6" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="947.8" y="126.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.getClassLoaderFor (237 samples, 0.03%)</title><rect x="945.6" y="611.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="948.6" y="622.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.withPermissions (196 samples, 0.03%)</title><rect x="945.6" y="595.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="948.6" y="606.0"></text>
</g>
<g>
<title>java/security/Permissions.add (196 samples, 0.03%)</title><rect x="945.6" y="579.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="948.6" y="590.0"></text>
</g>
<g>
<title>java/security/Permissions.getPermissionCollection (194 samples, 0.03%)</title><rect x="945.6" y="563.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="948.6" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.computeIfAbsent (194 samples, 0.03%)</title><rect x="945.6" y="547.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="948.6" y="558.0"></text>
</g>
<g>
<title>java/security/Permissions$1.apply (162 samples, 0.02%)</title><rect x="945.7" y="531.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="948.7" y="542.0"></text>
</g>
<g>
<title>java/security/Permissions$1.apply (162 samples, 0.02%)</title><rect x="945.7" y="515.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="948.7" y="526.0"></text>
</g>
<g>
<title>java.security.PermissionsHash (162 samples, 0.02%)</title><rect x="945.7" y="499.0" width="0.3" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="948.7" y="510.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.unwrap (1,000 samples, 0.14%)</title><rect x="946.0" y="611.0" width="1.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="949.0" y="622.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (307 samples, 0.04%)</title><rect x="946.0" y="595.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="949.0" y="606.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl$7.run (307 samples, 0.04%)</title><rect x="946.0" y="579.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="949.0" y="590.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl$7.run (307 samples, 0.04%)</title><rect x="946.0" y="563.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="949.0" y="574.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl$CombinedClassLoader.&lt;init&gt; (304 samples, 0.04%)</title><rect x="946.0" y="547.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="949.0" y="558.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl$CombinedClassLoader$ClassLoaderWrapper.&lt;init&gt; (196 samples, 0.03%)</title><rect x="946.2" y="531.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="949.2" y="542.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.&lt;init&gt; (196 samples, 0.03%)</title><rect x="946.2" y="515.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="949.2" y="526.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.&lt;init&gt; (196 samples, 0.03%)</title><rect x="946.2" y="499.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="949.2" y="510.0"></text>
</g>
<g>
<title>java/security/ProtectionDomain.&lt;init&gt; (162 samples, 0.02%)</title><rect x="946.2" y="483.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="949.2" y="494.0"></text>
</g>
<g>
<title>java.security.ProtectionDomain$Key (162 samples, 0.02%)</title><rect x="946.2" y="467.0" width="0.3" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="949.2" y="478.0"></text>
</g>
<g>
<title>javax/management/remote/rmi/RMIConnectionImpl.unwrap (693 samples, 0.10%)</title><rect x="946.5" y="595.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="949.5" y="606.0"></text>
</g>
<g>
<title>java/rmi/MarshalledObject.get (693 samples, 0.10%)</title><rect x="946.5" y="579.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="949.5" y="590.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject (244 samples, 0.03%)</title><rect x="946.5" y="563.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="949.5" y="574.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject (244 samples, 0.03%)</title><rect x="946.5" y="547.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="949.5" y="558.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject0 (244 samples, 0.03%)</title><rect x="946.5" y="531.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="949.5" y="542.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readArray (244 samples, 0.03%)</title><rect x="946.5" y="515.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="949.5" y="526.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject0 (244 samples, 0.03%)</title><rect x="946.5" y="499.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="949.5" y="510.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readOrdinaryObject (242 samples, 0.03%)</title><rect x="946.5" y="483.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="949.5" y="494.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readClassDesc (242 samples, 0.03%)</title><rect x="946.5" y="467.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="949.5" y="478.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readNonProxyDesc (242 samples, 0.03%)</title><rect x="946.5" y="451.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="949.5" y="462.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readClassDescriptor (242 samples, 0.03%)</title><rect x="946.5" y="435.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="949.5" y="446.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.readNonProxy (209 samples, 0.03%)</title><rect x="946.5" y="419.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="949.5" y="430.0"></text>
</g>
<g>
<title>char[] (160 samples, 0.02%)</title><rect x="946.5" y="403.0" width="0.3" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="949.5" y="414.0"></text>
</g>
<g>
<title>java/rmi/MarshalledObject$MarshalledObjectInputStream.&lt;init&gt; (449 samples, 0.06%)</title><rect x="946.9" y="563.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="949.9" y="574.0"></text>
</g>
<g>
<title>sun/rmi/server/MarshalInputStream.&lt;init&gt; (449 samples, 0.06%)</title><rect x="946.9" y="547.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="949.9" y="558.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.&lt;init&gt; (449 samples, 0.06%)</title><rect x="946.9" y="531.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="949.9" y="542.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream$BlockDataInputStream.&lt;init&gt; (286 samples, 0.04%)</title><rect x="946.9" y="515.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="949.9" y="526.0"></text>
</g>
<g>
<title>char[] (204 samples, 0.03%)</title><rect x="946.9" y="499.0" width="0.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="949.9" y="510.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream$HandleTable.&lt;init&gt; (163 samples, 0.02%)</title><rect x="947.3" y="515.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="950.3" y="526.0"></text>
</g>
<g>
<title>byte[] (162 samples, 0.02%)</title><rect x="947.3" y="499.0" width="0.3" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="950.3" y="510.0"></text>
</g>
<g>
<title>sun/rmi/server/UnicastRef.marshalValue (5,754 samples, 0.80%)</title><rect x="947.6" y="675.0" width="9.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="950.6" y="686.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject (5,754 samples, 0.80%)</title><rect x="947.6" y="659.0" width="9.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="950.6" y="670.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (5,754 samples, 0.80%)</title><rect x="947.6" y="643.0" width="9.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="950.6" y="654.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeArray (5,754 samples, 0.80%)</title><rect x="947.6" y="627.0" width="9.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="950.6" y="638.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (5,754 samples, 0.80%)</title><rect x="947.6" y="611.0" width="9.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="950.6" y="622.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (5,582 samples, 0.78%)</title><rect x="947.6" y="595.0" width="9.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="950.6" y="606.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (5,566 samples, 0.78%)</title><rect x="947.6" y="579.0" width="9.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="950.6" y="590.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.defaultWriteFields (5,566 samples, 0.78%)</title><rect x="947.6" y="563.0" width="9.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="950.6" y="574.0"></text>
</g>
<g>
<title>java.lang.Object[] (236 samples, 0.03%)</title><rect x="947.6" y="547.0" width="0.4" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="950.6" y="558.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (5,330 samples, 0.74%)</title><rect x="948.0" y="547.0" width="8.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="951.0" y="558.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (4,983 samples, 0.69%)</title><rect x="948.0" y="531.0" width="8.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="951.0" y="542.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (4,982 samples, 0.69%)</title><rect x="948.0" y="515.0" width="8.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="951.0" y="526.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.defaultWriteFields (504 samples, 0.07%)</title><rect x="948.1" y="499.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="951.1" y="510.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (504 samples, 0.07%)</title><rect x="948.1" y="483.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="951.1" y="494.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (504 samples, 0.07%)</title><rect x="948.1" y="467.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="951.1" y="478.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (504 samples, 0.07%)</title><rect x="948.1" y="451.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="951.1" y="462.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.invokeWriteObject (484 samples, 0.07%)</title><rect x="948.2" y="435.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="951.2" y="446.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (484 samples, 0.07%)</title><rect x="948.2" y="419.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="951.2" y="430.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (484 samples, 0.07%)</title><rect x="948.2" y="403.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="951.2" y="414.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor30.invoke (484 samples, 0.07%)</title><rect x="948.2" y="387.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="951.2" y="398.0"></text>
</g>
<g>
<title>java/util/TreeMap.writeObject (484 samples, 0.07%)</title><rect x="948.2" y="371.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="951.2" y="382.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject (355 samples, 0.05%)</title><rect x="948.4" y="355.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="951.4" y="366.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (355 samples, 0.05%)</title><rect x="948.4" y="339.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="951.4" y="350.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (271 samples, 0.04%)</title><rect x="948.4" y="323.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="951.4" y="334.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (271 samples, 0.04%)</title><rect x="948.4" y="307.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="951.4" y="318.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.defaultWriteFields (271 samples, 0.04%)</title><rect x="948.4" y="291.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="951.4" y="302.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (251 samples, 0.03%)</title><rect x="948.4" y="275.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="951.4" y="286.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (248 samples, 0.03%)</title><rect x="948.4" y="259.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="951.4" y="270.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (248 samples, 0.03%)</title><rect x="948.4" y="243.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="951.4" y="254.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.defaultWriteFields (248 samples, 0.03%)</title><rect x="948.4" y="227.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="951.4" y="238.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (248 samples, 0.03%)</title><rect x="948.4" y="211.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="951.4" y="222.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (243 samples, 0.03%)</title><rect x="948.4" y="195.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="951.4" y="206.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (218 samples, 0.03%)</title><rect x="948.4" y="179.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="951.4" y="190.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.invokeWriteObject (193 samples, 0.03%)</title><rect x="948.5" y="163.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="951.5" y="174.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (191 samples, 0.03%)</title><rect x="948.5" y="147.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="951.5" y="158.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (191 samples, 0.03%)</title><rect x="948.5" y="131.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="951.5" y="142.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor30.invoke (191 samples, 0.03%)</title><rect x="948.5" y="115.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="951.5" y="126.0"></text>
</g>
<g>
<title>java/util/TreeMap.writeObject (191 samples, 0.03%)</title><rect x="948.5" y="99.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="951.5" y="110.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject (191 samples, 0.03%)</title><rect x="948.5" y="83.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="951.5" y="94.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (191 samples, 0.03%)</title><rect x="948.5" y="67.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="951.5" y="78.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.lookup (190 samples, 0.03%)</title><rect x="948.5" y="51.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="951.5" y="62.0"></text>
</g>
<g>
<title>java.io.ObjectStreamClass$WeakClassKey (190 samples, 0.03%)</title><rect x="948.5" y="35.0" width="0.3" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="951.5" y="46.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.invokeWriteObject (4,419 samples, 0.62%)</title><rect x="949.0" y="499.0" width="7.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="952.0" y="510.0"></text>
</g>
<g>
<title>java.lang.Object[] (172 samples, 0.02%)</title><rect x="949.0" y="483.0" width="0.2" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="952.0" y="494.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (4,247 samples, 0.59%)</title><rect x="949.2" y="483.0" width="7.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="952.2" y="494.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (4,247 samples, 0.59%)</title><rect x="949.2" y="467.0" width="7.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="952.2" y="478.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor30.invoke (4,247 samples, 0.59%)</title><rect x="949.2" y="451.0" width="7.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="952.2" y="462.0"></text>
</g>
<g>
<title>java/util/TreeMap.writeObject (4,247 samples, 0.59%)</title><rect x="949.2" y="435.0" width="7.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="952.2" y="446.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject (4,138 samples, 0.58%)</title><rect x="949.4" y="419.0" width="6.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="952.4" y="430.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (4,138 samples, 0.58%)</title><rect x="949.4" y="403.0" width="6.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="952.4" y="414.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeArray (1,277 samples, 0.18%)</title><rect x="949.4" y="387.0" width="2.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="952.4" y="398.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$HandleTable.assign (474 samples, 0.07%)</title><rect x="949.4" y="371.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="952.4" y="382.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$HandleTable.growEntries (474 samples, 0.07%)</title><rect x="949.4" y="355.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="952.4" y="366.0"></text>
</g>
<g>
<title>int[] (237 samples, 0.03%)</title><rect x="949.4" y="339.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="952.4" y="350.0"></text>
</g>
<g>
<title>java.lang.Object[] (237 samples, 0.03%)</title><rect x="949.7" y="339.0" width="0.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="952.7" y="350.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (803 samples, 0.11%)</title><rect x="950.1" y="371.0" width="1.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="953.1" y="382.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (635 samples, 0.09%)</title><rect x="950.1" y="355.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="953.1" y="366.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (633 samples, 0.09%)</title><rect x="950.1" y="339.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="953.1" y="350.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.defaultWriteFields (633 samples, 0.09%)</title><rect x="950.1" y="323.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="953.1" y="334.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (584 samples, 0.08%)</title><rect x="950.2" y="307.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="953.2" y="318.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (358 samples, 0.05%)</title><rect x="950.2" y="291.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="953.2" y="302.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (358 samples, 0.05%)</title><rect x="950.2" y="275.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="953.2" y="286.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.invokeWriteObject (340 samples, 0.05%)</title><rect x="950.2" y="259.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="953.2" y="270.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (304 samples, 0.04%)</title><rect x="950.3" y="243.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="953.3" y="254.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (304 samples, 0.04%)</title><rect x="950.3" y="227.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="953.3" y="238.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor30.invoke (304 samples, 0.04%)</title><rect x="950.3" y="211.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="953.3" y="222.0"></text>
</g>
<g>
<title>java/util/TreeMap.writeObject (304 samples, 0.04%)</title><rect x="950.3" y="195.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="953.3" y="206.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.lookup (226 samples, 0.03%)</title><rect x="950.8" y="291.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="953.8" y="302.0"></text>
</g>
<g>
<title>java.io.ObjectStreamClass$WeakClassKey (226 samples, 0.03%)</title><rect x="950.8" y="275.0" width="0.4" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="953.8" y="286.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.lookup (168 samples, 0.02%)</title><rect x="951.2" y="355.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="954.2" y="366.0"></text>
</g>
<g>
<title>java.io.ObjectStreamClass$WeakClassKey (168 samples, 0.02%)</title><rect x="951.2" y="339.0" width="0.3" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="954.2" y="350.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (1,416 samples, 0.20%)</title><rect x="951.5" y="387.0" width="2.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="954.5" y="398.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$HandleTable.assign (642 samples, 0.09%)</title><rect x="951.5" y="371.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="954.5" y="382.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$HandleTable.growEntries (450 samples, 0.06%)</title><rect x="951.5" y="355.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="954.5" y="366.0"></text>
</g>
<g>
<title>int[] (210 samples, 0.03%)</title><rect x="951.5" y="339.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="954.5" y="350.0"></text>
</g>
<g>
<title>java.lang.Object[] (240 samples, 0.03%)</title><rect x="951.8" y="339.0" width="0.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="954.8" y="350.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$HandleTable.growSpine (192 samples, 0.03%)</title><rect x="952.2" y="355.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="955.2" y="366.0"></text>
</g>
<g>
<title>int[] (192 samples, 0.03%)</title><rect x="952.2" y="339.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="955.2" y="350.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (774 samples, 0.11%)</title><rect x="952.5" y="371.0" width="1.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="955.5" y="382.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.defaultWriteFields (774 samples, 0.11%)</title><rect x="952.5" y="355.0" width="1.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="955.5" y="366.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (742 samples, 0.10%)</title><rect x="952.6" y="339.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="955.6" y="350.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (707 samples, 0.10%)</title><rect x="952.6" y="323.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="955.6" y="334.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (707 samples, 0.10%)</title><rect x="952.6" y="307.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="955.6" y="318.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.invokeWriteObject (574 samples, 0.08%)</title><rect x="952.8" y="291.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="955.8" y="302.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (556 samples, 0.08%)</title><rect x="952.8" y="275.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="955.8" y="286.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (556 samples, 0.08%)</title><rect x="952.8" y="259.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="955.8" y="270.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor30.invoke (556 samples, 0.08%)</title><rect x="952.8" y="243.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="955.8" y="254.0"></text>
</g>
<g>
<title>java/util/TreeMap.writeObject (556 samples, 0.08%)</title><rect x="952.8" y="227.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="955.8" y="238.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject (509 samples, 0.07%)</title><rect x="952.9" y="211.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="955.9" y="222.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (509 samples, 0.07%)</title><rect x="952.9" y="195.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="955.9" y="206.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (422 samples, 0.06%)</title><rect x="952.9" y="179.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="955.9" y="190.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$HandleTable.assign (422 samples, 0.06%)</title><rect x="952.9" y="163.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="955.9" y="174.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$HandleTable.growEntries (422 samples, 0.06%)</title><rect x="952.9" y="147.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="955.9" y="158.0"></text>
</g>
<g>
<title>int[] (182 samples, 0.03%)</title><rect x="952.9" y="131.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="955.9" y="142.0"></text>
</g>
<g>
<title>java.lang.Object[] (218 samples, 0.03%)</title><rect x="953.2" y="131.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="956.2" y="142.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.lookup (1,405 samples, 0.20%)</title><rect x="953.9" y="387.0" width="2.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="956.9" y="398.0"></text>
</g>
<g>
<title>java.io.ObjectStreamClass$WeakClassKey (1,405 samples, 0.20%)</title><rect x="953.9" y="371.0" width="2.3" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="956.9" y="382.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.lookup (347 samples, 0.05%)</title><rect x="956.2" y="531.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="959.2" y="542.0"></text>
</g>
<g>
<title>java.io.ObjectStreamClass$WeakClassKey (347 samples, 0.05%)</title><rect x="956.2" y="515.0" width="0.6" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="959.2" y="526.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.lookup (172 samples, 0.02%)</title><rect x="956.8" y="595.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="959.8" y="606.0"></text>
</g>
<g>
<title>java.io.ObjectStreamClass$WeakClassKey (172 samples, 0.02%)</title><rect x="956.8" y="579.0" width="0.3" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="959.8" y="590.0"></text>
</g>
<g>
<title>sun/rmi/server/UnicastRef.unmarshalValue (1,802 samples, 0.25%)</title><rect x="957.1" y="675.0" width="2.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="960.1" y="686.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream$$Lambda$103/24522835.readString (168 samples, 0.02%)</title><rect x="957.1" y="659.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="960.1" y="670.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readString (168 samples, 0.02%)</title><rect x="957.1" y="643.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="960.1" y="654.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject (168 samples, 0.02%)</title><rect x="957.1" y="627.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="960.1" y="638.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject0 (168 samples, 0.02%)</title><rect x="957.1" y="611.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="960.1" y="622.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readString (168 samples, 0.02%)</title><rect x="957.1" y="595.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="960.1" y="606.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream$BlockDataInputStream.readUTF (168 samples, 0.02%)</title><rect x="957.1" y="579.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="960.1" y="590.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream$BlockDataInputStream.readUTFBody (168 samples, 0.02%)</title><rect x="957.1" y="563.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="960.1" y="574.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject (1,634 samples, 0.23%)</title><rect x="957.4" y="659.0" width="2.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="960.4" y="670.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject (1,634 samples, 0.23%)</title><rect x="957.4" y="643.0" width="2.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="960.4" y="654.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject0 (1,634 samples, 0.23%)</title><rect x="957.4" y="627.0" width="2.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="960.4" y="638.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readArray (415 samples, 0.06%)</title><rect x="957.4" y="611.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="960.4" y="622.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readClassDesc (413 samples, 0.06%)</title><rect x="957.4" y="595.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="960.4" y="606.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readNonProxyDesc (413 samples, 0.06%)</title><rect x="957.4" y="579.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="960.4" y="590.0"></text>
</g>
<g>
<title>java.io.ObjectStreamClass (194 samples, 0.03%)</title><rect x="957.4" y="563.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="960.4" y="574.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readClassDescriptor (208 samples, 0.03%)</title><rect x="957.7" y="563.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="960.7" y="574.0"></text>
</g>
<g>
<title>java.io.ObjectStreamClass (195 samples, 0.03%)</title><rect x="957.7" y="547.0" width="0.3" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="960.7" y="558.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readOrdinaryObject (1,219 samples, 0.17%)</title><rect x="958.0" y="611.0" width="2.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="961.0" y="622.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readSerialData (1,217 samples, 0.17%)</title><rect x="958.0" y="595.0" width="2.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="961.0" y="606.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.invokeReadObject (1,211 samples, 0.17%)</title><rect x="958.0" y="579.0" width="2.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="961.0" y="590.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (1,211 samples, 0.17%)</title><rect x="958.0" y="563.0" width="2.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="961.0" y="574.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (1,211 samples, 0.17%)</title><rect x="958.0" y="547.0" width="2.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="961.0" y="558.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor2.invoke (972 samples, 0.14%)</title><rect x="958.0" y="531.0" width="1.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="961.0" y="542.0"></text>
</g>
<g>
<title>javax/management/ObjectName.readObject (972 samples, 0.14%)</title><rect x="958.0" y="515.0" width="1.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="961.0" y="526.0"></text>
</g>
<g>
<title>javax/management/ObjectName.construct (971 samples, 0.14%)</title><rect x="958.1" y="499.0" width="1.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="961.1" y="510.0"></text>
</g>
<g>
<title>java.lang.String[] (190 samples, 0.03%)</title><rect x="958.3" y="483.0" width="0.3" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="961.3" y="494.0"></text>
</g>
<g>
<title>javax/management/ObjectName.setCanonicalName (290 samples, 0.04%)</title><rect x="959.2" y="483.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="962.2" y="494.0"></text>
</g>
<g>
<title>javax.management.ObjectName$Property[] (181 samples, 0.03%)</title><rect x="959.4" y="467.0" width="0.2" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="962.4" y="478.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor36.invoke (239 samples, 0.03%)</title><rect x="959.6" y="531.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="962.6" y="542.0"></text>
</g>
<g>
<title>java/rmi/MarshalledObject.readObject (239 samples, 0.03%)</title><rect x="959.6" y="515.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="962.6" y="526.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.defaultReadObject (239 samples, 0.03%)</title><rect x="959.6" y="499.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="962.6" y="510.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.defaultReadFields (239 samples, 0.03%)</title><rect x="959.6" y="483.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="962.6" y="494.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject0 (197 samples, 0.03%)</title><rect x="959.7" y="467.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="962.7" y="478.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readArray (197 samples, 0.03%)</title><rect x="959.7" y="451.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="962.7" y="462.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readClassDesc (197 samples, 0.03%)</title><rect x="959.7" y="435.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="962.7" y="446.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readNonProxyDesc (197 samples, 0.03%)</title><rect x="959.7" y="419.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="962.7" y="430.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readClassDescriptor (163 samples, 0.02%)</title><rect x="959.7" y="403.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="962.7" y="414.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.readNonProxy (162 samples, 0.02%)</title><rect x="959.7" y="387.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="962.7" y="398.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readUTF (162 samples, 0.02%)</title><rect x="959.7" y="371.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="962.7" y="382.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream$BlockDataInputStream.readUTF (162 samples, 0.02%)</title><rect x="959.7" y="355.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="962.7" y="366.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream$BlockDataInputStream.readUTFBody (162 samples, 0.02%)</title><rect x="959.7" y="339.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="962.7" y="350.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (162 samples, 0.02%)</title><rect x="959.7" y="323.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="962.7" y="334.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (162 samples, 0.02%)</title><rect x="959.7" y="307.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="962.7" y="318.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (162 samples, 0.02%)</title><rect x="959.7" y="291.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="962.7" y="302.0"></text>
</g>
<g>
<title>byte[] (162 samples, 0.02%)</title><rect x="959.7" y="275.0" width="0.3" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="962.7" y="286.0"></text>
</g>
<g>
<title>sun/rmi/transport/StreamRemoteCall.getResultStream (3,035 samples, 0.42%)</title><rect x="960.0" y="675.0" width="5.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="963.0" y="686.0"></text>
</g>
<g>
<title>sun/rmi/transport/StreamRemoteCall.getOutputStream (3,034 samples, 0.42%)</title><rect x="960.0" y="659.0" width="5.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="963.0" y="670.0"></text>
</g>
<g>
<title>sun/rmi/transport/ConnectionOutputStream.&lt;init&gt; (3,032 samples, 0.42%)</title><rect x="960.1" y="643.0" width="4.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="963.1" y="654.0"></text>
</g>
<g>
<title>sun/rmi/server/MarshalOutputStream.&lt;init&gt; (3,032 samples, 0.42%)</title><rect x="960.1" y="627.0" width="4.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="963.1" y="638.0"></text>
</g>
<g>
<title>sun/rmi/server/MarshalOutputStream.&lt;init&gt; (3,032 samples, 0.42%)</title><rect x="960.1" y="611.0" width="4.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="963.1" y="622.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.&lt;init&gt; (3,032 samples, 0.42%)</title><rect x="960.1" y="595.0" width="4.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="963.1" y="606.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$BlockDataOutputStream.&lt;init&gt; (1,578 samples, 0.22%)</title><rect x="960.3" y="579.0" width="2.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="963.3" y="590.0"></text>
</g>
<g>
<title>byte[] (472 samples, 0.07%)</title><rect x="960.3" y="563.0" width="0.7" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="963.3" y="574.0"></text>
</g>
<g>
<title>char[] (1,007 samples, 0.14%)</title><rect x="961.1" y="563.0" width="1.7" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="964.1" y="574.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$HandleTable.&lt;init&gt; (596 samples, 0.08%)</title><rect x="962.9" y="579.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="965.9" y="590.0"></text>
</g>
<g>
<title>int[] (386 samples, 0.05%)</title><rect x="962.9" y="563.0" width="0.6" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="965.9" y="574.0"></text>
</g>
<g>
<title>java.lang.Object[] (210 samples, 0.03%)</title><rect x="963.5" y="563.0" width="0.3" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="966.5" y="574.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$ReplaceTable.&lt;init&gt; (732 samples, 0.10%)</title><rect x="963.8" y="579.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="966.8" y="590.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$HandleTable.&lt;init&gt; (683 samples, 0.10%)</title><rect x="963.9" y="563.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="966.9" y="574.0"></text>
</g>
<g>
<title>int[] (474 samples, 0.07%)</title><rect x="963.9" y="547.0" width="0.8" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="966.9" y="558.0"></text>
</g>
<g>
<title>java.lang.Object[] (167 samples, 0.02%)</title><rect x="964.8" y="547.0" width="0.2" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="967.8" y="558.0"></text>
</g>
<g>
<title>sun/rmi/transport/StreamRemoteCall.getInputStream (2,812 samples, 0.39%)</title><rect x="965.1" y="739.0" width="4.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="968.1" y="750.0"></text>
</g>
<g>
<title>sun/rmi/transport/ConnectionInputStream.&lt;init&gt; (2,810 samples, 0.39%)</title><rect x="965.1" y="723.0" width="4.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="968.1" y="734.0"></text>
</g>
<g>
<title>sun/rmi/server/MarshalInputStream.&lt;init&gt; (2,810 samples, 0.39%)</title><rect x="965.1" y="707.0" width="4.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="968.1" y="718.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.&lt;init&gt; (2,810 samples, 0.39%)</title><rect x="965.1" y="691.0" width="4.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="968.1" y="702.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream$BlockDataInputStream.&lt;init&gt; (1,908 samples, 0.27%)</title><rect x="965.1" y="675.0" width="3.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="968.1" y="686.0"></text>
</g>
<g>
<title>byte[] (217 samples, 0.03%)</title><rect x="965.1" y="659.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="968.1" y="670.0"></text>
</g>
<g>
<title>char[] (504 samples, 0.07%)</title><rect x="965.5" y="659.0" width="0.8" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="968.5" y="670.0"></text>
</g>
<g>
<title>java/io/DataInputStream.&lt;init&gt; (970 samples, 0.14%)</title><rect x="966.6" y="659.0" width="1.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="969.6" y="670.0"></text>
</g>
<g>
<title>char[] (288 samples, 0.04%)</title><rect x="966.8" y="643.0" width="0.5" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="969.8" y="654.0"></text>
</g>
<g>
<title>char[] (573 samples, 0.08%)</title><rect x="967.3" y="643.0" width="0.9" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="970.3" y="654.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream$HandleTable.&lt;init&gt; (888 samples, 0.12%)</title><rect x="968.2" y="675.0" width="1.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="971.2" y="686.0"></text>
</g>
<g>
<title>byte[] (333 samples, 0.05%)</title><rect x="968.2" y="659.0" width="0.6" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="971.2" y="670.0"></text>
</g>
<g>
<title>java.lang.Object[] (457 samples, 0.06%)</title><rect x="968.9" y="659.0" width="0.8" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="971.9" y="670.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (133,939 samples, 18.67%)</title><rect x="969.7" y="899.0" width="220.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="972.7" y="910.0">one/nio/server/SelectorThread..</text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (2,865 samples, 0.40%)</title><rect x="969.7" y="883.0" width="4.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="972.7" y="894.0"></text>
</g>
<g>
<title>one.nio.net.NativeSelector$2 (2,865 samples, 0.40%)</title><rect x="969.7" y="867.0" width="4.7" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="972.7" y="878.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (131,074 samples, 18.27%)</title><rect x="974.4" y="883.0" width="215.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="977.4" y="894.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (131,074 samples, 18.27%)</title><rect x="974.4" y="867.0" width="215.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="977.4" y="878.0">one/nio/http/HttpSession.pro..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (131,074 samples, 18.27%)</title><rect x="974.4" y="851.0" width="215.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="977.4" y="862.0">one/nio/http/HttpSession.pro..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (25,903 samples, 3.61%)</title><rect x="974.4" y="835.0" width="42.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="977.4" y="846.0">one/..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (25,903 samples, 3.61%)</title><rect x="974.4" y="819.0" width="42.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="977.4" y="830.0">one/..</text>
</g>
<g>
<title>RequestHandler0_get.handleRequest (14,165 samples, 1.97%)</title><rect x="974.4" y="803.0" width="23.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="977.4" y="814.0">R..</text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (10,378 samples, 1.45%)</title><rect x="974.4" y="787.0" width="17.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="977.4" y="798.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (10,378 samples, 1.45%)</title><rect x="974.4" y="771.0" width="17.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="977.4" y="782.0"></text>
</g>
<g>
<title>java/lang/String.substring (10,378 samples, 1.45%)</title><rect x="974.4" y="755.0" width="17.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="977.4" y="766.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (10,378 samples, 1.45%)</title><rect x="974.4" y="739.0" width="17.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="977.4" y="750.0"></text>
</g>
<g>
<title>java.lang.String (6,312 samples, 0.88%)</title><rect x="974.4" y="723.0" width="10.4" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="977.4" y="734.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (4,066 samples, 0.57%)</title><rect x="984.8" y="723.0" width="6.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="987.8" y="734.0"></text>
</g>
<g>
<title>byte[] (4,066 samples, 0.57%)</title><rect x="984.8" y="707.0" width="6.7" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="987.8" y="718.0"></text>
</g>
<g>
<title>ru/mail/polis/service/valaubr/HttpService.get (3,787 samples, 0.53%)</title><rect x="991.5" y="787.0" width="6.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="994.5" y="798.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (3,721 samples, 0.52%)</title><rect x="991.5" y="771.0" width="6.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="994.5" y="782.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (3,721 samples, 0.52%)</title><rect x="991.5" y="755.0" width="6.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="994.5" y="766.0"></text>
</g>
<g>
<title>ru/mail/polis/service/valaubr/HttpService$$Lambda$124/1082880506.get$Lambda (3,721 samples, 0.52%)</title><rect x="991.5" y="739.0" width="6.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="994.5" y="750.0"></text>
</g>
<g>
<title>ru.mail.polis.service.valaubr.HttpService$$Lambda$124 (3,721 samples, 0.52%)</title><rect x="991.5" y="723.0" width="6.1" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="994.5" y="734.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (11,738 samples, 1.64%)</title><rect x="997.7" y="803.0" width="19.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1000.7" y="814.0"></text>
</g>
<g>
<title>java/lang/String.substring (11,738 samples, 1.64%)</title><rect x="997.7" y="787.0" width="19.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1000.7" y="798.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (11,738 samples, 1.64%)</title><rect x="997.7" y="771.0" width="19.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1000.7" y="782.0"></text>
</g>
<g>
<title>java.lang.String (5,664 samples, 0.79%)</title><rect x="997.7" y="755.0" width="9.3" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="1000.7" y="766.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (6,074 samples, 0.85%)</title><rect x="1007.0" y="755.0" width="10.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1010.0" y="766.0"></text>
</g>
<g>
<title>byte[] (6,074 samples, 0.85%)</title><rect x="1007.0" y="739.0" width="10.0" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="1010.0" y="750.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (36,303 samples, 5.06%)</title><rect x="1017.0" y="835.0" width="59.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1020.0" y="846.0">one/ni..</text>
</g>
<g>
<title>one.nio.http.Request (7,111 samples, 0.99%)</title><rect x="1017.0" y="819.0" width="11.7" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="1020.0" y="830.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (7,056 samples, 0.98%)</title><rect x="1028.7" y="819.0" width="11.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1031.7" y="830.0"></text>
</g>
<g>
<title>java.lang.String[] (6,753 samples, 0.94%)</title><rect x="1028.7" y="803.0" width="11.1" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="1031.7" y="814.0"></text>
</g>
<g>
<title>java.lang.String[] (303 samples, 0.04%)</title><rect x="1039.8" y="803.0" width="0.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1042.8" y="814.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (22,136 samples, 3.09%)</title><rect x="1040.3" y="819.0" width="36.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1043.3" y="830.0">one..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (22,136 samples, 3.09%)</title><rect x="1040.3" y="803.0" width="36.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1043.3" y="814.0">one..</text>
</g>
<g>
<title>char[] (7,490 samples, 1.04%)</title><rect x="1040.3" y="787.0" width="12.3" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="1043.3" y="798.0"></text>
</g>
<g>
<title>char[] (524 samples, 0.07%)</title><rect x="1052.6" y="787.0" width="0.9" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1055.6" y="798.0"></text>
</g>
<g>
<title>java.lang.String (6,824 samples, 0.95%)</title><rect x="1053.5" y="787.0" width="11.2" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="1056.5" y="798.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (7,298 samples, 1.02%)</title><rect x="1064.7" y="787.0" width="12.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1067.7" y="798.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (7,298 samples, 1.02%)</title><rect x="1064.7" y="771.0" width="12.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1067.7" y="782.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (7,298 samples, 1.02%)</title><rect x="1064.7" y="755.0" width="12.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1067.7" y="766.0"></text>
</g>
<g>
<title>byte[] (7,298 samples, 1.02%)</title><rect x="1064.7" y="739.0" width="12.0" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="1067.7" y="750.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (68,868 samples, 9.60%)</title><rect x="1076.7" y="835.0" width="113.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1079.7" y="846.0">one/nio/util/U..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (68,868 samples, 9.60%)</title><rect x="1076.7" y="819.0" width="113.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1079.7" y="830.0">one/nio/util/U..</text>
</g>
<g>
<title>char[] (9,383 samples, 1.31%)</title><rect x="1076.7" y="803.0" width="15.5" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="1079.7" y="814.0"></text>
</g>
<g>
<title>char[] (21,140 samples, 2.95%)</title><rect x="1092.2" y="803.0" width="34.7" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1095.2" y="814.0">ch..</text>
</g>
<g>
<title>java.lang.String (7,693 samples, 1.07%)</title><rect x="1126.9" y="803.0" width="12.7" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="1129.9" y="814.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (30,652 samples, 4.27%)</title><rect x="1139.6" y="803.0" width="50.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1142.6" y="814.0">java/..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (30,652 samples, 4.27%)</title><rect x="1139.6" y="787.0" width="50.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1142.6" y="798.0">java/..</text>
</g>
<g>
<title>java/lang/StringUTF16.compress (30,652 samples, 4.27%)</title><rect x="1139.6" y="771.0" width="50.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1142.6" y="782.0">java/..</text>
</g>
<g>
<title>byte[] (30,652 samples, 4.27%)</title><rect x="1139.6" y="755.0" width="50.4" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="1142.6" y="766.0">byte[]</text>
</g>
</g>
</svg>
